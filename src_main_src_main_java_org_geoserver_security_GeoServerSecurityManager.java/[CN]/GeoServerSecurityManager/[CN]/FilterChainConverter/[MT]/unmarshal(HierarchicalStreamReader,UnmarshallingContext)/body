{
  GeoServerSecurityFilterChain filterChain=new GeoServerSecurityFilterChain();
  while (reader.hasMoreChildren()) {
    reader.moveDown();
    String path=reader.getAttribute("path");
    String name=reader.getAttribute("name");
    String classname=reader.getAttribute("class");
    String roleFilterName=reader.getAttribute("roleFilterName");
    String disabledString=reader.getAttribute("disabled");
    String allowSessionCreationString=reader.getAttribute("allowSessionCreation");
    String interceptorName=reader.getAttribute("interceptorName");
    String sslString=reader.getAttribute("ssl");
    String matchHTTPMethodString=reader.getAttribute("matchHTTPMethod");
    String httpMethodsString=reader.getAttribute("httpMethods");
    if (name == null) {
      RequestFilterChain requestChain=GeoServerSecurityFilterChain.lookupRequestChainByPattern(path,GeoServerSecurityManager.this);
      if (requestChain != null) {
        name=requestChain.getName();
      }
 else {
        name=path;
      }
    }
    if (classname == null) {
      if (GeoServerSecurityFilterChain.WEB_CHAIN_NAME.equals(name)) {
        classname=HtmlLoginFilterChain.class.getName();
        allowSessionCreationString="true";
        interceptorName=GeoServerSecurityFilterChain.FILTER_SECURITY_INTERCEPTOR;
      }
      if (GeoServerSecurityFilterChain.WEB_LOGIN_CHAIN_NAME.equals(name)) {
        classname=ConstantFilterChain.class.getName();
        allowSessionCreationString="true";
        interceptorName=GeoServerSecurityFilterChain.FILTER_SECURITY_INTERCEPTOR;
      }
      if (GeoServerSecurityFilterChain.WEB_LOGOUT_CHAIN_NAME.equals(name)) {
        classname=LogoutFilterChain.class.getName();
        allowSessionCreationString="true";
        interceptorName=GeoServerSecurityFilterChain.FILTER_SECURITY_INTERCEPTOR;
      }
      if (GeoServerSecurityFilterChain.REST_CHAIN_NAME.equals(name)) {
        classname=ServiceLoginFilterChain.class.getName();
        allowSessionCreationString="false";
        interceptorName=GeoServerSecurityFilterChain.FILTER_SECURITY_REST_INTERCEPTOR;
      }
      if (GeoServerSecurityFilterChain.GWC_CHAIN_NAME.equals(name)) {
        classname=ServiceLoginFilterChain.class.getName();
        allowSessionCreationString="false";
        interceptorName=GeoServerSecurityFilterChain.FILTER_SECURITY_REST_INTERCEPTOR;
      }
      if (GeoServerSecurityFilterChain.DEFAULT_CHAIN_NAME.equals(name)) {
        classname=ServiceLoginFilterChain.class.getName();
        allowSessionCreationString="false";
        interceptorName=GeoServerSecurityFilterChain.FILTER_SECURITY_INTERCEPTOR;
      }
    }
    ArrayList<String> filterNames=new ArrayList<String>();
    while (reader.hasMoreChildren()) {
      reader.moveDown();
      filterNames.add(reader.getValue());
      reader.moveUp();
    }
    RequestFilterChain requestChain=null;
    try {
      Class<?> chainClass=Class.forName(classname);
      Constructor<?> cons=chainClass.getConstructor(new Class[]{String[].class});
      String[] args=path.split(",");
      requestChain=(RequestFilterChain)cons.newInstance(new Object[]{args});
    }
 catch (    Exception ex) {
      throw new RuntimeException(ex);
    }
    requestChain.setName(name);
    if (StringUtils.hasLength(disabledString)) {
      requestChain.setDisabled(Boolean.parseBoolean(disabledString));
    }
    if (StringUtils.hasLength(allowSessionCreationString)) {
      requestChain.setAllowSessionCreation(Boolean.parseBoolean(allowSessionCreationString));
    }
    if (StringUtils.hasLength(sslString)) {
      requestChain.setRequireSSL(Boolean.parseBoolean(sslString));
    }
    if (StringUtils.hasLength(matchHTTPMethodString)) {
      requestChain.setMatchHTTPMethod(Boolean.parseBoolean(matchHTTPMethodString));
    }
    if (StringUtils.hasLength(httpMethodsString)) {
      for (      String method : httpMethodsString.split(",")) {
        requestChain.getHttpMethods().add(HTTPMethod.fromString(method));
      }
    }
    requestChain.setRoleFilterName(roleFilterName);
    if (requestChain instanceof VariableFilterChain) {
      ((VariableFilterChain)requestChain).setInterceptorName(interceptorName);
    }
    requestChain.setFilterNames(filterNames);
    filterChain.getRequestChains().add(requestChain);
    reader.moveUp();
  }
  return filterChain;
}
