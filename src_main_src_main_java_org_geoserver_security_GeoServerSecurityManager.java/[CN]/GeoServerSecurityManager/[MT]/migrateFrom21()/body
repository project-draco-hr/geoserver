{
  if (role().getType() != Type.UNDEFINED) {
    Resource oldUserFile=security().get("users.properties.old");
    if (oldUserFile.getType() != Type.UNDEFINED) {
      LOGGER.warning(oldUserFile.path() + " could be removed manually");
    }
    return false;
  }
  LOGGER.info("Start security migration");
  get("security/role").dir();
  get("security/usergroup").dir();
  get("security/auth").dir();
  get("security/pwpolicy").dir();
  get("security/filter").dir();
  get("security/masterpw").dir();
  MasterPasswordProviderConfig mpProviderConfig=loadMasterPassswordProviderConfig("default");
  if (mpProviderConfig == null) {
    mpProviderConfig=new URLMasterPasswordProviderConfig();
    mpProviderConfig.setName("default");
    mpProviderConfig.setClassName(URLMasterPasswordProvider.class.getCanonicalName());
    mpProviderConfig.setReadOnly(false);
    ((URLMasterPasswordProviderConfig)mpProviderConfig).setURL(new URL("file:passwd"));
    ((URLMasterPasswordProviderConfig)mpProviderConfig).setEncrypting(true);
    saveMasterPasswordProviderConfig(mpProviderConfig,false);
    MasterPasswordProvider mpProvider=loadMasterPasswordProvider(mpProviderConfig.getName());
    Resource propFile=security().get("users.properties");
    Properties userprops=null;
    if (propFile.getType() == Type.RESOURCE)     userprops=Util.loadPropertyFile(propFile);
    mpProvider.setMasterPassword(extractMasterPasswordForMigration(userprops));
  }
  MasterPasswordConfig mpConfig=new MasterPasswordConfig();
  mpConfig.setProviderName(mpProviderConfig.getName());
  saveMasterPasswordConfig(mpConfig);
  Resource serviceFile=security().get("services.properties");
  if (serviceFile.getType() == Type.UNDEFINED) {
    org.geoserver.data.util.IOUtils.copy(Util.class.getResourceAsStream("serviceTemplate.properties"),serviceFile.out());
  }
  long checkInterval=10000;
  GeoServerUserGroupService userGroupService=loadUserGroupService(XMLUserGroupService.DEFAULT_NAME);
  KeyStoreProvider keyStoreProvider=getKeyStoreProvider();
  keyStoreProvider.reloadKeyStore();
  keyStoreProvider.setUserGroupKey(XMLUserGroupService.DEFAULT_NAME,randomPasswdProvider.getRandomPassword(32));
  keyStoreProvider.storeKeyStore();
  PasswordValidator validator=loadPasswordValidator(PasswordValidator.DEFAULT_NAME);
  if (validator == null) {
    PasswordPolicyConfig pwpconfig=new PasswordPolicyConfig();
    pwpconfig.setName(PasswordValidator.DEFAULT_NAME);
    pwpconfig.setClassName(PasswordValidatorImpl.class.getName());
    pwpconfig.setMinLength(0);
    savePasswordPolicy(pwpconfig);
    validator=loadPasswordValidator(PasswordValidator.DEFAULT_NAME);
  }
  validator=loadPasswordValidator(PasswordValidator.MASTERPASSWORD_NAME);
  if (validator == null) {
    PasswordPolicyConfig pwpconfig=new PasswordPolicyConfig();
    pwpconfig.setName(PasswordValidator.MASTERPASSWORD_NAME);
    pwpconfig.setClassName(PasswordValidatorImpl.class.getName());
    pwpconfig.setMinLength(8);
    savePasswordPolicy(pwpconfig);
    validator=loadPasswordValidator(PasswordValidator.MASTERPASSWORD_NAME);
  }
  if (userGroupService == null) {
    XMLUserGroupServiceConfig ugConfig=new XMLUserGroupServiceConfig();
    ugConfig.setName(XMLUserGroupService.DEFAULT_NAME);
    ugConfig.setClassName(XMLUserGroupService.class.getName());
    ugConfig.setCheckInterval(checkInterval);
    ugConfig.setFileName(XMLConstants.FILE_UR);
    ugConfig.setValidating(true);
    ugConfig.setPasswordEncoderName(loadPasswordEncoder(GeoServerPBEPasswordEncoder.class,null,false).getName());
    ugConfig.setPasswordPolicyName(PasswordValidator.DEFAULT_NAME);
    saveUserGroupService(ugConfig);
    userGroupService=loadUserGroupService(XMLUserGroupService.DEFAULT_NAME);
  }
  GeoServerRoleService roleService=loadRoleService(XMLRoleService.DEFAULT_NAME);
  if (roleService == null) {
    XMLRoleServiceConfig gaConfig=new XMLRoleServiceConfig();
    gaConfig.setName(XMLRoleService.DEFAULT_NAME);
    gaConfig.setClassName(XMLRoleService.class.getName());
    gaConfig.setCheckInterval(checkInterval);
    gaConfig.setFileName(XMLConstants.FILE_RR);
    gaConfig.setValidating(true);
    gaConfig.setAdminRoleName(XMLRoleService.DEFAULT_LOCAL_ADMIN_ROLE);
    gaConfig.setGroupAdminRoleName(XMLRoleService.DEFAULT_LOCAL_GROUP_ADMIN_ROLE);
    saveRoleService(gaConfig);
    roleService=loadRoleService(XMLRoleService.DEFAULT_NAME);
  }
  String filterName=GeoServerSecurityFilterChain.BASIC_AUTH_FILTER;
  GeoServerSecurityFilter filter=loadFilter(filterName);
  if (filter == null) {
    BasicAuthenticationFilterConfig bfConfig=new BasicAuthenticationFilterConfig();
    bfConfig.setName(filterName);
    bfConfig.setClassName(GeoServerBasicAuthenticationFilter.class.getName());
    bfConfig.setUseRememberMe(true);
    saveFilter(bfConfig);
  }
  filterName=GeoServerSecurityFilterChain.FORM_LOGIN_FILTER;
  filter=loadFilter(filterName);
  if (filter == null) {
    UsernamePasswordAuthenticationFilterConfig upConfig=new UsernamePasswordAuthenticationFilterConfig();
    upConfig.setClassName(GeoServerUserNamePasswordAuthenticationFilter.class.getName());
    upConfig.setName(filterName);
    upConfig.setUsernameParameterName(UsernamePasswordAuthenticationFilterConfig.DEFAULT_USERNAME_PARAM);
    upConfig.setPasswordParameterName(UsernamePasswordAuthenticationFilterConfig.DEFAULT_PASSWORD_PARAM);
    saveFilter(upConfig);
  }
  filterName=GeoServerSecurityFilterChain.SECURITY_CONTEXT_ASC_FILTER;
  filter=loadFilter(filterName);
  if (filter == null) {
    SecurityContextPersistenceFilterConfig pConfig=new SecurityContextPersistenceFilterConfig();
    pConfig.setClassName(GeoServerSecurityContextPersistenceFilter.class.getName());
    pConfig.setName(filterName);
    pConfig.setAllowSessionCreation(true);
    saveFilter(pConfig);
  }
  filterName=GeoServerSecurityFilterChain.SECURITY_CONTEXT_NO_ASC_FILTER;
  filter=loadFilter(filterName);
  if (filter == null) {
    SecurityContextPersistenceFilterConfig pConfig=new SecurityContextPersistenceFilterConfig();
    pConfig.setClassName(GeoServerSecurityContextPersistenceFilter.class.getName());
    pConfig.setName(filterName);
    pConfig.setAllowSessionCreation(false);
    saveFilter(pConfig);
  }
  filterName=GeoServerSecurityFilterChain.ANONYMOUS_FILTER;
  filter=loadFilter(filterName);
  if (filter == null) {
    AnonymousAuthenticationFilterConfig aConfig=new AnonymousAuthenticationFilterConfig();
    aConfig.setClassName(GeoServerAnonymousAuthenticationFilter.class.getName());
    aConfig.setName(filterName);
    saveFilter(aConfig);
  }
  filterName=GeoServerSecurityFilterChain.REMEMBER_ME_FILTER;
  filter=loadFilter(filterName);
  if (filter == null) {
    RememberMeAuthenticationFilterConfig rConfig=new RememberMeAuthenticationFilterConfig();
    rConfig.setClassName(GeoServerRememberMeAuthenticationFilter.class.getName());
    rConfig.setName(filterName);
    saveFilter(rConfig);
  }
  filterName=GeoServerSecurityFilterChain.FILTER_SECURITY_INTERCEPTOR;
  filter=loadFilter(filterName);
  if (filter == null) {
    SecurityInterceptorFilterConfig siConfig=new SecurityInterceptorFilterConfig();
    siConfig.setClassName(GeoServerSecurityInterceptorFilter.class.getName());
    siConfig.setName(filterName);
    siConfig.setAllowIfAllAbstainDecisions(false);
    siConfig.setSecurityMetadataSource("geoserverMetadataSource");
    saveFilter(siConfig);
  }
  filterName=GeoServerSecurityFilterChain.FILTER_SECURITY_REST_INTERCEPTOR;
  filter=loadFilter(filterName);
  if (filter == null) {
    SecurityInterceptorFilterConfig siConfig=new SecurityInterceptorFilterConfig();
    siConfig.setClassName(GeoServerSecurityInterceptorFilter.class.getName());
    siConfig.setName(filterName);
    siConfig.setAllowIfAllAbstainDecisions(false);
    siConfig.setSecurityMetadataSource("restFilterDefinitionMap");
    saveFilter(siConfig);
  }
  filterName=GeoServerSecurityFilterChain.FORM_LOGOUT_FILTER;
  filter=loadFilter(filterName);
  if (filter == null) {
    LogoutFilterConfig loConfig=new LogoutFilterConfig();
    loConfig.setClassName(GeoServerLogoutFilter.class.getName());
    loConfig.setName(filterName);
    saveFilter(loConfig);
  }
  filterName=GeoServerSecurityFilterChain.DYNAMIC_EXCEPTION_TRANSLATION_FILTER;
  filter=loadFilter(filterName);
  if (filter == null) {
    ExceptionTranslationFilterConfig bfConfig=new ExceptionTranslationFilterConfig();
    bfConfig.setClassName(GeoServerExceptionTranslationFilter.class.getName());
    bfConfig.setName(filterName);
    bfConfig.setAuthenticationFilterName(null);
    bfConfig.setAccessDeniedErrorPage("/accessDenied.jsp");
    saveFilter(bfConfig);
  }
  filterName=GeoServerSecurityFilterChain.GUI_EXCEPTION_TRANSLATION_FILTER;
  filter=loadFilter(filterName);
  if (filter == null) {
    ExceptionTranslationFilterConfig bfConfig=new ExceptionTranslationFilterConfig();
    bfConfig.setClassName(GeoServerExceptionTranslationFilter.class.getName());
    bfConfig.setName(filterName);
    bfConfig.setAuthenticationFilterName(GeoServerSecurityFilterChain.FORM_LOGIN_FILTER);
    bfConfig.setAccessDeniedErrorPage("/accessDenied.jsp");
    saveFilter(bfConfig);
  }
  GeoServerAuthenticationProvider authProvider=loadAuthenticationProvider(GeoServerAuthenticationProvider.DEFAULT_NAME);
  if (authProvider == null) {
    UsernamePasswordAuthenticationProviderConfig upAuthConfig=new UsernamePasswordAuthenticationProviderConfig();
    upAuthConfig.setName(GeoServerAuthenticationProvider.DEFAULT_NAME);
    upAuthConfig.setClassName(UsernamePasswordAuthenticationProvider.class.getName());
    upAuthConfig.setUserGroupServiceName(userGroupService.getName());
    saveAuthenticationProvider(upAuthConfig);
    authProvider=loadAuthenticationProvider(GeoServerAuthenticationProvider.DEFAULT_NAME);
  }
  SecurityManagerConfig config=new SecurityManagerConfig();
  config.setRoleServiceName(roleService.getName());
  config.getAuthProviderNames().add(authProvider.getName());
  config.setEncryptingUrlParams(false);
  config.setConfigPasswordEncrypterName(loadPasswordEncoder(GeoServerPBEPasswordEncoder.class,true,false).getName());
  RememberMeServicesConfig rememberMeConfig=new RememberMeServicesConfig();
  rememberMeConfig.setClassName(GeoServerTokenBasedRememberMeServices.class.getName());
  config.setRememberMeService(rememberMeConfig);
  config.setFilterChain(GeoServerSecurityFilterChain.createInitialChain());
  saveSecurityConfig(config);
  userGroupService.setSecurityManager(this);
  roleService.setSecurityManager(this);
  GeoServerUserGroupStore userGroupStore=userGroupService.createStore();
  GeoServerRoleStore roleStore=roleService.createStore();
  Resource usersFile=security().get("users.properties");
  if (usersFile.getType() == Type.RESOURCE) {
    Properties props=Util.loadPropertyFile(usersFile);
    UserAttributeEditor configAttribEd=new UserAttributeEditor();
    for (Iterator<Object> iter=props.keySet().iterator(); iter.hasNext(); ) {
      String username=(String)iter.next();
      configAttribEd.setAsText(props.getProperty(username));
      UserAttribute attr=(UserAttribute)configAttribEd.getValue();
      if (attr != null) {
        GeoServerUser user=userGroupStore.createUserObject(username,attr.getPassword(),attr.isEnabled());
        userGroupStore.addUser(user);
        for (        GrantedAuthority auth : attr.getAuthorities()) {
          String roleName=GeoServerRole.ADMIN_ROLE.getAuthority().equals(auth.getAuthority()) ? XMLRoleService.DEFAULT_LOCAL_ADMIN_ROLE : auth.getAuthority();
          GeoServerRole role=roleStore.getRoleByName(roleName);
          if (role == null) {
            role=roleStore.createRoleObject(roleName);
            roleStore.addRole(role);
          }
          roleStore.associateRoleToUser(role,username);
        }
      }
    }
  }
 else {
    if (userGroupService.getUserByUsername(GeoServerUser.ADMIN_USERNAME) == null) {
      userGroupStore.addUser(GeoServerUser.createDefaultAdmin());
      GeoServerRole localAdminRole=roleStore.createRoleObject(XMLRoleService.DEFAULT_LOCAL_ADMIN_ROLE);
      roleStore.addRole(localAdminRole);
      roleStore.associateRoleToUser(localAdminRole,GeoServerUser.ADMIN_USERNAME);
    }
  }
  if (roleStore.getRoleByName(XMLRoleService.DEFAULT_LOCAL_GROUP_ADMIN_ROLE) == null) {
    roleStore.addRole(roleStore.createRoleObject(XMLRoleService.DEFAULT_LOCAL_GROUP_ADMIN_ROLE));
  }
  for (  String filename : new String[]{"services.properties","layers.properties","rest.properties"}) {
    Resource file=security().get(filename);
    if (file.getType() == Type.UNDEFINED)     continue;
    List<String> lines=new ArrayList<String>();
    BufferedReader reader=new BufferedReader(new InputStreamReader(file.in()));
    String line;
    while ((line=reader.readLine()) != null)     lines.add(line.replace(GeoServerRole.ADMIN_ROLE.getAuthority(),XMLRoleService.DEFAULT_LOCAL_ADMIN_ROLE));
    reader.close();
    PrintWriter writer=new PrintWriter(new OutputStreamWriter(file.out()));
    for (    String s : lines) {
      writer.println(s);
    }
    writer.close();
  }
  serviceFile=security().get("services.properties");
  if (serviceFile.getType() != Type.UNDEFINED) {
    Properties props=Util.loadPropertyFile(serviceFile);
    for (    Entry<Object,Object> entry : props.entrySet()) {
      StringTokenizer tokenizer=new StringTokenizer((String)entry.getValue(),",");
      while (tokenizer.hasMoreTokens()) {
        String roleName=tokenizer.nextToken().trim();
        if (roleName.length() > 0) {
          if (roleStore.getRoleByName(roleName) == null)           roleStore.addRole(roleStore.createRoleObject(roleName));
        }
      }
    }
  }
  Resource dataFile=security().get("layers.properties");
  if (dataFile.getType() == Type.RESOURCE) {
    Properties props=Util.loadPropertyFile(dataFile);
    for (    Entry<Object,Object> entry : props.entrySet()) {
      if ("mode".equals(entry.getKey().toString()))       continue;
      StringTokenizer tokenizer=new StringTokenizer((String)entry.getValue(),",");
      while (tokenizer.hasMoreTokens()) {
        String roleName=tokenizer.nextToken().trim();
        if (roleName.length() > 0 && roleName.equals("*") == false) {
          if (roleStore.getRoleByName(roleName) == null)           roleStore.addRole(roleStore.createRoleObject(roleName));
        }
      }
    }
  }
  roleStore.store();
  userGroupStore.store();
  if (usersFile.getType() != Type.UNDEFINED) {
    Resource oldUserFile=dataDir.get(usersFile.path() + ".old");
    usersFile.renameTo(oldUserFile);
    LOGGER.info("Renamed " + usersFile.path() + " to "+ oldUserFile.path());
  }
  LOGGER.info("End security migration");
  return true;
}
