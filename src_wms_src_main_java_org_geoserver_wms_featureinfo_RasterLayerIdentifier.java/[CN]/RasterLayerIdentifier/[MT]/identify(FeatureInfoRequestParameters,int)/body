{
  final MapLayerInfo layer=params.getLayer();
  final Filter filter=params.getFilter();
  final CoverageInfo cinfo=layer.getCoverage();
  final GridCoverage2DReader reader=(GridCoverage2DReader)cinfo.getGridCoverageReader(new NullProgressListener(),GeoTools.getDefaultHints());
  final Coordinate middle=WMS.pixelToWorld(params.getX(),params.getY(),params.getRequestedBounds(),params.getWidth(),params.getHeight());
  double x=middle.x;
  double y=middle.y;
  CoordinateReferenceSystem requestedCRS=params.getRequestedCRS();
  CoordinateReferenceSystem targetCRS;
  if (cinfo.getProjectionPolicy() == ProjectionPolicy.NONE) {
    targetCRS=cinfo.getNativeCRS();
  }
 else {
    targetCRS=cinfo.getCRS();
  }
  DirectPosition targetCoverageMedianPosition=reader.getOriginalEnvelope().getMedian();
  if (requestedCRS != null && requestedCRS instanceof GeographicCRS) {
    TransformedDirectPosition coverageMedianPosition=new TransformedDirectPosition(targetCRS,requestedCRS,new Hints(Hints.LENIENT_DATUM_SHIFT,Boolean.TRUE));
    try {
      coverageMedianPosition.transform(targetCoverageMedianPosition);
    }
 catch (    TransformException exception) {
      throw new CannotEvaluateException("Cannot find coverage median position in requested CRS",exception);
    }
    if (CRS.getAxisOrder(requestedCRS) == CRS.AxisOrder.NORTH_EAST) {
      y+=360 * Math.round((coverageMedianPosition.getOrdinate(1) - y) / 360);
    }
 else {
      x+=360 * Math.round((coverageMedianPosition.getOrdinate(0) - x) / 360);
    }
  }
  DirectPosition position=new DirectPosition2D(requestedCRS,x,y);
  if (requestedCRS != null) {
    final TransformedDirectPosition arbitraryToInternal=new TransformedDirectPosition(requestedCRS,targetCRS,new Hints(Hints.LENIENT_DATUM_SHIFT,Boolean.TRUE));
    try {
      arbitraryToInternal.transform(position);
    }
 catch (    TransformException exception) {
      throw new CannotEvaluateException("Unable to answer the geatfeatureinfo",exception);
    }
    position=arbitraryToInternal;
  }
  if (targetCRS != null && targetCRS instanceof GeographicCRS) {
    x=position.getOrdinate(0);
    y=position.getOrdinate(1);
    if (CRS.getAxisOrder(targetCRS) == CRS.AxisOrder.NORTH_EAST) {
      y+=360 * Math.round((targetCoverageMedianPosition.getOrdinate(1) - y) / 360);
    }
 else {
      x+=360 * Math.round((targetCoverageMedianPosition.getOrdinate(0) - x) / 360);
    }
    position=new DirectPosition2D(targetCRS,x,y);
  }
  if (!reader.getOriginalEnvelope().contains(position)) {
    return null;
  }
  GetMapRequest getMap=params.getGetMapRequest();
  GeneralParameterValue[] parameters=wms.getWMSReadParameters(getMap,layer,filter,params.getTimes(),params.getElevations(),reader,true);
  final MathTransform worldToGrid=reader.getOriginalGridToWorld(PixelInCell.CELL_CORNER).inverse();
  final DirectPosition rasterMid=worldToGrid.transform(position,null);
  final Rectangle2D.Double rasterArea=new Rectangle2D.Double();
  rasterArea.setFrameFromCenter(rasterMid.getOrdinate(0),rasterMid.getOrdinate(1),rasterMid.getOrdinate(0) + 10,rasterMid.getOrdinate(1) + 10);
  final Rectangle integerRasterArea=rasterArea.getBounds();
  final GridEnvelope gridEnvelope=reader.getOriginalGridRange();
  final Rectangle originalArea=(gridEnvelope instanceof GridEnvelope2D) ? (GridEnvelope2D)gridEnvelope : new Rectangle();
  XRectangle2D.intersect(integerRasterArea,originalArea,integerRasterArea);
  if (integerRasterArea.isEmpty()) {
    return null;
  }
  for (int k=0; k < parameters.length; k++) {
    if (!(parameters[k] instanceof Parameter<?>))     continue;
    final Parameter<?> parameter=(Parameter<?>)parameters[k];
    if (parameter.getDescriptor().getName().equals(AbstractGridFormat.READ_GRIDGEOMETRY2D.getName())) {
      parameter.setValue(new GridGeometry2D(new GridEnvelope2D(integerRasterArea),reader.getOriginalGridToWorld(PixelInCell.CELL_CENTER),reader.getCoordinateReferenceSystem()));
    }
  }
  final GridCoverage2D coverage=(GridCoverage2D)reader.read(parameters);
  if (coverage == null) {
    if (LOGGER.isLoggable(Level.FINE))     LOGGER.fine("Unable to load raster data for this request.");
    return null;
  }
  FeatureCollection pixel=null;
  try {
    final double[] pixelValues=coverage.evaluate(position,(double[])null);
    pixel=wrapPixelInFeatureCollection(coverage,pixelValues,cinfo.getQualifiedName());
  }
 catch (  PointOutsideCoverageException e) {
  }
 finally {
    RenderedImage ri=coverage.getRenderedImage();
    coverage.dispose(true);
    if (ri instanceof PlanarImage) {
      ImageUtilities.disposePlanarImageChain((PlanarImage)ri);
    }
  }
  return Collections.singletonList(pixel);
}
