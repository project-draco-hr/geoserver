{
  Classifier groups=null;
  int classNumber=features.size();
  try {
    final Function classify=ff.function("UniqueInterval",ff.property(property),ff.literal(classNumber));
    groups=(Classifier)classify.evaluate(features);
    if (groups instanceof RangedClassifier)     return this.closedRangedRules((RangedClassifier)groups,property,propertyType,normalize);
 else     if (groups instanceof ExplicitClassifier) {
      ExplicitClassifier explicitGroups=(ExplicitClassifier)groups;
      if (intervals > 0 && explicitGroups.getSize() > intervals) {
        throw new IllegalArgumentException("Intervals: " + explicitGroups.getSize());
      }
      return this.explicitRules(explicitGroups,property,propertyType);
    }
  }
 catch (  Exception e) {
    if (LOGGER.isLoggable(Level.INFO))     LOGGER.log(Level.INFO,"Failed to build UniqueInterval Classification" + e.getLocalizedMessage(),e);
    if (e instanceof IllegalArgumentException) {
      throw (IllegalArgumentException)e;
    }
  }
  return null;
}
