{
  Rule r;
  Filter f;
  List<Rule> list=new ArrayList();
  Expression att=normalizeProperty(ff.property(property),propertyType,normalize);
  try {
    r=styleFactory.createRule();
    if (groups.getMin(0).equals(groups.getMax(0))) {
      f=ff.equals(att,ff.literal(groups.getMax(0)));
      r.setFilter(f);
      r.setTitle(ff.literal(groups.getMax(0)).toString());
      list.add(r);
    }
 else {
      f=ff.lessOrEqual(att,ff.literal(groups.getMax(0)));
      r.setFilter(f);
      r.setTitle(" <= " + ff.literal(groups.getMax(0)));
      list.add(r);
    }
    for (int i=1; i < groups.getSize() - 1; i++) {
      r=styleFactory.createRule();
      if (groups.getMin(i).equals(groups.getMax(i))) {
        f=ff.equals(att,ff.literal(groups.getMax(i)));
        r.setTitle(ff.literal(groups.getMin(i)).toString());
        r.setFilter(f);
        list.add(r);
      }
 else {
        f=ff.and(ff.greater(att,ff.literal(groups.getMin(i))),ff.lessOrEqual(att,ff.literal(groups.getMax(i))));
        r.setTitle(" > " + ff.literal(groups.getMin(i)) + " AND <= "+ ff.literal(groups.getMax(i)));
        r.setFilter(f);
        list.add(r);
      }
    }
    r=styleFactory.createRule();
    if (groups.getMin(groups.getSize() - 1).equals(groups.getMax(groups.getSize() - 1))) {
      f=ff.equals(att,ff.literal(groups.getMin(groups.getSize() - 1)));
      r.setFilter(f);
      r.setTitle(ff.literal(groups.getMin(groups.getSize() - 1)).toString());
      list.add(r);
    }
 else {
      f=ff.greater(att,ff.literal(groups.getMin(groups.getSize() - 1)));
      r.setFilter(f);
      r.setTitle(" > " + ff.literal(groups.getMin(groups.getSize() - 1)));
      list.add(r);
    }
    return list;
  }
 catch (  Exception e) {
    if (LOGGER.isLoggable(Level.INFO))     LOGGER.log(Level.INFO,"Failed to build Open Ranged rules" + e.getLocalizedMessage(),e);
  }
  return null;
}
