{
  final GWC mediator=GWC.get();
  final List<GeoServerTileLayerInfo[]> modifications=Lists.newLinkedList();
  lock.acquireWriteLock();
  try {
    for (    String deletedId : pendingDeletes) {
      try {
        tileLayerCatalog.delete(deletedId);
      }
 catch (      RuntimeException e) {
        LOGGER.log(Level.SEVERE,"Error deleting tile layer '" + deletedId + "' from catalog",e);
      }
    }
    for (    GeoServerTileLayerInfo modified : pendingModications.values()) {
      final GeoServerTileLayerInfo old;
      try {
        old=tileLayerCatalog.save(modified);
        modifications.add(new GeoServerTileLayerInfo[]{old,modified});
      }
 catch (      RuntimeException e) {
        LOGGER.log(Level.SEVERE,"Error saving tile layer '" + modified.getName() + "'",e);
      }
    }
    this.pendingModications.clear();
    this.pendingDeletes.clear();
  }
  finally {
    lock.downgradeToReadLock();
    try {
      for (      GeoServerTileLayerInfo[] oldNew : modifications) {
        final GeoServerTileLayerInfo old=oldNew[0];
        final GeoServerTileLayerInfo modified=oldNew[1];
        try {
          if (old == null) {
            String layerName=modified.getName();
            mediator.layerAdded(layerName);
          }
 else {
            issueTileLayerInfoChangeNotifications(old,modified);
          }
        }
 catch (        RuntimeException e) {
          LOGGER.log(Level.SEVERE,"Error issuing change events for tile layer " + modified + ".  This may result in leaked tiles that will not be truncated.",e);
        }
      }
    }
  finally {
      lock.releaseReadLock();
    }
  }
}
