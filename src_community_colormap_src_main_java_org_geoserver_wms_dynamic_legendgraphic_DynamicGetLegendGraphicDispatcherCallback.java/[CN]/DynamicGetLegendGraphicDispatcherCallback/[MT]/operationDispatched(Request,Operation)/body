{
  final String id=operation.getId();
  if (id.equalsIgnoreCase("getLegendGraphic")) {
    final Object[] params=operation.getParameters();
    if (params != null && params.length > 0 && params[0] instanceof GetLegendGraphicRequest) {
      final GetLegendGraphicRequest getLegendRequest=(GetLegendGraphicRequest)params[0];
      try {
        for (        LegendRequest legend : getLegendRequest.getLegends()) {
          ProcessFunction transformation=getDynamicColorMapTransformation(legend);
          if (transformation != null) {
            LayerInfo layer=legend.getLayerInfo();
            if (layer != null && layer.getResource() instanceof CoverageInfo) {
              CoverageInfo coverageInfo=(CoverageInfo)layer.getResource();
              List<CoverageDimensionInfo> dimensions=coverageInfo.getDimensions();
              String unit="";
              if (dimensions != null && !dimensions.isEmpty()) {
                CoverageDimensionInfo dimensionInfo=dimensions.get(0);
                unit=dimensionInfo.getUnit();
                if (unit == null) {
                  unit="";
                }
              }
              Style style=getDynamicStyle(coverageInfo,transformation);
              if (style != null) {
                legend.setStyle(style);
              }
            }
          }
        }
      }
 catch (      Exception e) {
        throw new ServiceException("Failed to extract legend",e);
      }
    }
  }
  return operation;
}
