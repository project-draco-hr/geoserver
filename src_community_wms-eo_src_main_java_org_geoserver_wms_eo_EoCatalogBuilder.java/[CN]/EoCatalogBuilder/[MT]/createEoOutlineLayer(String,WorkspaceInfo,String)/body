{
  File dir=DataUtilities.urlToFile(new URL(url));
  if (ws == null) {
    ws=catalog.getDefaultWorkspace();
  }
  String storeName=dir.getName();
  String layerName=groupName + "_OUTLINES";
  CatalogBuilder builder=new CatalogBuilder(catalog);
  DataStoreInfo storeInfo=builder.buildDataStore(layerName);
  DataStoreFactorySpi dataStoreFactory=getOutlineDataStoreFactory(dir);
  Map<String,Serializable> parameters=getOutlineDataStoreParameters(dir,dataStoreFactory);
  NamespaceInfo ns=catalog.getNamespaceByPrefix(ws.getName());
  parameters.put("namespace",ns.getURI());
  storeInfo.setType(dataStoreFactory.getDisplayName());
  storeInfo.setWorkspace(ws);
  storeInfo.getConnectionParameters().putAll(parameters);
  catalog.add(storeInfo);
  builder.setStore(storeInfo);
  DataStore dataStore=(DataStore)storeInfo.getDataStore(new NullProgressListener());
  SimpleFeatureSource featureSource=dataStore.getFeatureSource(storeName);
  FeatureTypeInfo featureType=builder.buildFeatureType(featureSource);
  featureType.setName(layerName);
  featureType.setTitle(layerName);
  builder.setupBounds(featureType,featureSource);
  boolean foundTime=enableDimensions(featureType,loadProperties(new File(dir,storeName + ".properties")));
  if (!foundTime) {
    throw new IllegalArgumentException("Unable to enable TIME dimension on outline layer:" + layerName);
  }
  catalog.add(featureType);
  LayerInfo layer=builder.buildLayer(featureType);
  layer.setName(layerName);
  layer.setTitle(layerName);
  layer.setEnabled(true);
  layer.setQueryable(true);
  layer.setType(LayerInfo.Type.VECTOR);
  layer.getMetadata().put(EoLayerType.KEY,EoLayerType.COVERAGE_OUTLINE.name());
  addEoStyles(layer,DEFAULT_OUTLINE_STYLE);
  catalog.add(layer);
  return layer;
}
