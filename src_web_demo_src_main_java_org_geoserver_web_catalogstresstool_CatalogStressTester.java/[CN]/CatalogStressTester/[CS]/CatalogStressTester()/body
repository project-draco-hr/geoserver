{
  super();
  setDefaultModel(new Model());
  Form form=new Form("form",new Model());
  add(form);
  IModel<List<Tuple>> wsModel=new LoadableDetachableModel<List<Tuple>>(){
    private static final long serialVersionUID=1L;
    @Override protected List<Tuple> load(){
      Catalog catalog=GeoServerApplication.get().getCatalog();
      Filter filter=Predicates.acceptAll();
      CloseableIterator<WorkspaceInfo> list=catalog.list(WorkspaceInfo.class,filter,null,4000,null);
      List<Tuple> workspaces;
      try {
        workspaces=Lists.newArrayList(Iterators.transform(list,new Function<WorkspaceInfo,Tuple>(){
          @Override public Tuple apply(          WorkspaceInfo input){
            return new Tuple(input.getId(),input.getName());
          }
        }
));
      }
  finally {
        list.close();
      }
      Collections.sort(workspaces);
      return workspaces;
    }
  }
;
  workspace=new DropDownChoice<Tuple>("workspace",new Model<Tuple>(),wsModel,new TupleChoiceRenderer());
  workspace.setNullValid(true);
  workspace.setOutputMarkupId(true);
  workspace.setRequired(true);
  form.add(workspace);
  workspace.add(new OnChangeAjaxBehavior(){
    private static final long serialVersionUID=-5613056077847641106L;
    @Override protected void onUpdate(    AjaxRequestTarget target){
      target.add(store);
      target.add(resourceAndLayer);
    }
  }
);
  IModel<List<Tuple>> storesModel=new LoadableDetachableModel<List<Tuple>>(){
    private static final long serialVersionUID=1L;
    @Override protected List<Tuple> load(){
      Catalog catalog=GeoServerApplication.get().getCatalog();
      Tuple ws=workspace.getModelObject();
      if (ws == null) {
        return Lists.newArrayList();
      }
      Filter filter=Predicates.equal("workspace.id",ws.id);
      int limit=100;
      CloseableIterator<StoreInfo> iter=catalog.list(StoreInfo.class,filter,null,limit,null);
      List<Tuple> stores;
      try {
        stores=Lists.newArrayList(Iterators.transform(iter,new Function<StoreInfo,Tuple>(){
          @Override public Tuple apply(          StoreInfo input){
            return new Tuple(input.getId(),input.getName());
          }
        }
));
      }
  finally {
        iter.close();
      }
      Collections.sort(stores);
      return stores;
    }
  }
;
  store=new DropDownChoice<Tuple>("store",new Model<Tuple>(),storesModel,new TupleChoiceRenderer());
  store.setNullValid(true);
  store.setOutputMarkupId(true);
  store.add(new OnChangeAjaxBehavior(){
    private static final long serialVersionUID=-5333344688588590014L;
    @Override protected void onUpdate(    AjaxRequestTarget target){
      target.add(resourceAndLayer);
    }
  }
);
  form.add(store);
  IModel<List<Tuple>> resourcesModel=new LoadableDetachableModel<List<Tuple>>(){
    private static final long serialVersionUID=1L;
    @Override protected List<Tuple> load(){
      Catalog catalog=getCatalog();
      Tuple storeInfo=store.getModelObject();
      if (storeInfo == null) {
        return Lists.newArrayList();
      }
      Integer limit=100;
      Filter filter=Predicates.equal("store.id",storeInfo.id);
      CloseableIterator<ResourceInfo> iter=catalog.list(ResourceInfo.class,filter,null,limit,null);
      List<Tuple> resources;
      try {
        resources=Lists.newArrayList(Iterators.transform(iter,new Function<ResourceInfo,Tuple>(){
          @Override public Tuple apply(          ResourceInfo input){
            return new Tuple(input.getId(),input.getName());
          }
        }
));
      }
  finally {
        iter.close();
      }
      Collections.sort(resources);
      return resources;
    }
  }
;
  resourceAndLayer=new DropDownChoice<Tuple>("resourceAndLayer",new Model<Tuple>(),resourcesModel,new TupleChoiceRenderer());
  resourceAndLayer.setNullValid(true);
  resourceAndLayer.setOutputMarkupId(true);
  form.add(resourceAndLayer);
  duplicateCount=new TextField<Integer>("duplicateCount",new Model<Integer>(100),Integer.class);
  duplicateCount.setRequired(true);
  duplicateCount.add(new RangeValidator<Integer>(1,100000));
  form.add(duplicateCount);
  sufix=new TextField<String>("sufix",new Model<String>("copy-"));
  sufix.setRequired(true);
  form.add(sufix);
  progress=new Label("progress",new Model<String>("0/0"));
  progress.setOutputMarkupId(true);
  form.add(progress);
  form.add(new AjaxButton("cancel"){
    private static final long serialVersionUID=5767430648099432407L;
    protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      setResponsePage(ToolPage.class);
    }
  }
);
  startLink=new AjaxButton("submit",form){
    private static final long serialVersionUID=-4087484089208211355L;
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      progress.setDefaultModelObject("");
      startLink.setVisible(false);
      target.add(startLink);
      target.add(progress);
      try {
        startCopy(target,form);
      }
 catch (      Exception e) {
        form.error(e.getMessage());
        target.add(form);
      }
 finally {
        startLink.setVisible(true);
        target.add(startLink);
        target.add(progress);
      }
    }
  }
;
  form.add(startLink);
  startLink.setOutputMarkupId(true);
}
