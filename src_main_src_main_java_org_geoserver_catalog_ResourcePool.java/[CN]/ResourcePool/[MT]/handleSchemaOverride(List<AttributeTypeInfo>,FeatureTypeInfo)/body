{
  GeoServerDataDirectory dd=new GeoServerDataDirectory(catalog.getResourceLoader());
  File schemaFile=dd.findSuppResourceFile(ft,"schema.xsd");
  if (schemaFile == null) {
    schemaFile=dd.findSuppLegacyResourceFile(ft,"schema.xsd");
    if (schemaFile == null) {
      File oldSchemaFile=dd.findSuppResourceFile(ft,"schema.xml");
      if (oldSchemaFile == null) {
        oldSchemaFile=dd.findSuppLegacyResourceFile(ft,"schema.xml");
      }
      if (oldSchemaFile != null) {
        schemaFile=new File(oldSchemaFile.getParentFile(),"schema.xsd");
        BufferedWriter out=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(schemaFile)));
        out.write("<xs:schema xmlns:xs='http://www.w3.org/2001/XMLSchema'");
        out.write(" xmlns:gml='http://www.opengis.net/gml'");
        out.write(">");
        IOUtils.copy(new FileInputStream(oldSchemaFile),out);
        out.write("</xs:schema>");
        out.flush();
        out.close();
      }
    }
  }
  if (schemaFile != null) {
    List locators=Arrays.asList(GML.getInstance().createSchemaLocator());
    XSDSchema schema=null;
    try {
      schema=Schemas.parse(schemaFile.getAbsolutePath(),locators,null);
    }
 catch (    Exception e) {
      LOGGER.warning("Unable to parse " + schemaFile.getAbsolutePath() + "."+ " Falling back on native feature type");
    }
    if (schema != null) {
      XSDTypeDefinition type=null;
      for (Iterator e=schema.getElementDeclarations().iterator(); e.hasNext(); ) {
        XSDElementDeclaration element=(XSDElementDeclaration)e.next();
        if (ft.getName().equals(element.getName())) {
          type=element.getTypeDefinition();
          break;
        }
      }
      if (type == null) {
        for (Iterator t=schema.getTypeDefinitions().iterator(); t.hasNext(); ) {
          XSDTypeDefinition typedef=(XSDTypeDefinition)t.next();
          if ((ft.getName() + "_Type").equals(typedef.getName())) {
            type=typedef;
            break;
          }
        }
      }
      if (type != null) {
        List children=Schemas.getChildElementDeclarations(type,true);
        for (Iterator<AttributeTypeInfo> i=atts.iterator(); i.hasNext(); ) {
          AttributeTypeInfo at=i.next();
          boolean found=false;
          for (Iterator c=children.iterator(); c.hasNext(); ) {
            XSDElementDeclaration ce=(XSDElementDeclaration)c.next();
            if (at.getName().equals(ce.getName())) {
              found=true;
              if (ce.getContainer() instanceof XSDParticle) {
                XSDParticle part=(XSDParticle)ce.getContainer();
                at.setMinOccurs(part.getMinOccurs());
                at.setMaxOccurs(part.getMaxOccurs());
              }
              break;
            }
          }
          if (!found) {
            i.remove();
          }
        }
      }
    }
  }
}
