{
  DeleteDbFiles.execute("target","acme",true);
  H2DataStoreFactory fac=new H2DataStoreFactory();
  HashMap params=new HashMap();
  params.put(H2DataStoreFactory.DATABASE.key,"target/acme");
  params.put(H2DataStoreFactory.DBTYPE.key,"h2");
  DataStore ds=fac.createDataStore(params);
  SimpleFeatureTypeBuilder tb=new SimpleFeatureTypeBuilder();
  tb.setName("widgets");
  tb.add("type",String.class);
  tb.add("price",Double.class);
  tb.add("geom",Point.class);
  SimpleFeatureType ft=tb.buildFeatureType();
  ds.createSchema(ft);
  FeatureWriter fw=ds.getFeatureWriter("widgets",Transaction.AUTO_COMMIT);
  WKTReader wkt=new WKTReader();
  fw.hasNext();
  SimpleFeature next=(SimpleFeature)fw.next();
  next.setAttribute("type","anvil");
  next.setAttribute("price",10.99);
  next.setAttribute("geom",wkt.read("POINT(12.5 13.7)"));
  fw.write();
  fw.hasNext();
  next=(SimpleFeature)fw.next();
  next.setAttribute("type","dynamite");
  next.setAttribute("price",99.99);
  next.setAttribute("geom",wkt.read("POINT(11.8 16.7)"));
  fw.write();
  fw.close();
  Catalog cat=createNiceMock(Catalog.class);
  WorkspaceInfo ws=createNiceMock(WorkspaceInfo.class);
  expect(ws.getName()).andReturn("acme").anyTimes();
  replay(ws);
  expect(cat.getWorkspaces()).andReturn(Arrays.asList(ws)).anyTimes();
  expect(cat.getDefaultWorkspace()).andReturn(ws).anyTimes();
  expect(cat.getWorkspaceByName("acme")).andReturn(ws).anyTimes();
  DataStoreInfo acme=createNiceMock(DataStoreInfo.class);
  expect(acme.getName()).andReturn("acme").anyTimes();
  expect(acme.getWorkspace()).andReturn(ws).anyTimes();
  expect(acme.getDataStore(null)).andReturn((DataAccess)ds).anyTimes();
  replay(acme);
  expect(cat.getDataStoresByWorkspace(ws)).andReturn(Arrays.asList(acme)).anyTimes();
  expect(cat.getDataStoresByWorkspace("acme")).andReturn(Arrays.asList(acme)).anyTimes();
  expect(cat.getDataStoreByName("acme","acme")).andReturn(acme).anyTimes();
  expect(cat.getDataStoreByName(ws,"acme")).andReturn(acme).anyTimes();
  FeatureTypeInfo widgets=createNiceMock(FeatureTypeInfo.class);
  expect(widgets.getName()).andReturn("widgets");
  expect(widgets.getFeatureSource(null,null)).andReturn((FeatureSource)ds.getFeatureSource("widgets"));
  expect(widgets.getFeatureType()).andReturn(ds.getSchema("widgets"));
  expect(widgets.getStore()).andReturn(acme);
  replay(widgets);
  expect(cat.getFeatureTypeByDataStore(acme,"widgets")).andReturn(widgets).anyTimes();
  expect(cat.getFeatureTypeByStore(acme,"widgets")).andReturn(widgets).anyTimes();
  ApplicationContext app=createNiceMock(ApplicationContext.class);
  expect(app.getBean("catalog")).andReturn(cat).anyTimes();
  replay(cat);
  replay(app);
  GeoServerExtensionsHelper.init(app);
}
