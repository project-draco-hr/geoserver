{
  start("fes:Filter_Capabilities");
  start("fes:Conformance");
  start("fes:Constraint",attributes(new String[]{"name","ImplementsQuery"}));
  element("ows:NoValues",null);
  element("ows:DefaultValue","TRUE");
  end("fes:Constraint");
  start("fes:Constraint",attributes(new String[]{"name","ImplementsAdHocQuery"}));
  element("ows:NoValues",null);
  element("ows:DefaultValue","TRUE");
  end("fes:Constraint");
  start("fes:Constraint",attributes(new String[]{"name","ImplementsFunctions"}));
  element("ows:NoValues",null);
  element("ows:DefaultValue","TRUE");
  end("fes:Constraint");
  start("fes:Constraint",attributes(new String[]{"name","ImplementsMinStandardFilter"}));
  element("ows:NoValues",null);
  element("ows:DefaultValue","TRUE");
  end("fes:Constraint");
  start("fes:Constraint",attributes(new String[]{"name","ImplementsStandardFilter"}));
  element("ows:NoValues",null);
  element("ows:DefaultValue","FALSE");
  end("fes:Constraint");
  start("fes:Constraint",attributes(new String[]{"name","ImplementsMinSpatialFilter"}));
  element("ows:NoValues",null);
  element("ows:DefaultValue","TRUE");
  end("fes:Constraint");
  start("fes:Constraint",attributes(new String[]{"name","ImplementsSpatialFilter"}));
  element("ows:NoValues",null);
  element("ows:DefaultValue","FALSE");
  end("fes:Constraint");
  start("fes:Constraint",attributes(new String[]{"name","ImplementsMinTemporalFilter"}));
  element("ows:NoValues",null);
  element("ows:DefaultValue","TRUE");
  end("fes:Constraint");
  start("fes:Constraint",attributes(new String[]{"name","ImplementsTemporalFilter"}));
  element("ows:NoValues",null);
  element("ows:DefaultValue","TRUE");
  end("fes:Constraint");
  start("fes:Constraint",attributes(new String[]{"name","ImplementsVersionNav"}));
  element("ows:NoValues",null);
  element("ows:DefaultValue","FALSE");
  end("fes:Constraint");
  start("fes:Constraint",attributes(new String[]{"name","ImplementsSorting"}));
  start("ows:AllowedValues");
  element("ows:Value","ASC");
  element("ows:Value","DESC");
  end("ows:AllowedValues");
  element("ows:DefaultValue","ASC");
  end("fes:Constraint");
  start("fes:Constraint",attributes(new String[]{"name","ImplementsExtendedOperators"}));
  element("ows:NoValues",null);
  element("ows:DefaultValue","FALSE");
  end("fes:Constraint");
  end("fes:Conformance");
  start("fes:Id_Capabilities");
  element("fes:ResourceIdentifier",null,attributes(new String[]{"name","fes:ResourceId"}));
  end("fes:Id_Capabilities");
  start("fes:Scalar_Capabilities");
  element("fes:LogicalOperators",null);
  start("fes:ComparisonOperators");
  element("fes:ComparisonOperator",null,attributes(new String[]{"name","PropertyIsLessThan"}));
  element("fes:ComparisonOperator",null,attributes(new String[]{"name","PropertyIsGreaterThan"}));
  element("fes:ComparisonOperator",null,attributes(new String[]{"name","PropertyIsLessThanOrEqualTo"}));
  element("fes:ComparisonOperator",null,attributes(new String[]{"name","PropertyIsGreaterThanOrEqualTo"}));
  element("fes:ComparisonOperator",null,attributes(new String[]{"name","PropertyIsEqualTo"}));
  element("fes:ComparisonOperator",null,attributes(new String[]{"name","PropertyIsNotEqualTo"}));
  element("fes:ComparisonOperator",null,attributes(new String[]{"name","PropertyIsLike"}));
  element("fes:ComparisonOperator",null,attributes(new String[]{"name","PropertyIsBetween"}));
  element("fes:ComparisonOperator",null,attributes(new String[]{"name","PropertyIsNull"}));
  element("fes:ComparisonOperator",null,attributes(new String[]{"name","PropertyIsNil"}));
  end("fes:ComparisonOperators");
  end("fes:Scalar_Capabilities");
  start("fes:Spatial_Capabilities");
  start("fes:GeometryOperands");
  element("fes:GeometryOperand",null,attributes(new String[]{"name","gml:Envelope"}));
  element("fes:GeometryOperand",null,attributes(new String[]{"name","gml:Point"}));
  element("fes:GeometryOperand",null,attributes(new String[]{"name","gml:MultiPoint"}));
  element("fes:GeometryOperand",null,attributes(new String[]{"name","gml:LineString"}));
  element("fes:GeometryOperand",null,attributes(new String[]{"name","gml:MultiLineString"}));
  element("fes:GeometryOperand",null,attributes(new String[]{"name","gml:Polygon"}));
  element("fes:GeometryOperand",null,attributes(new String[]{"name","gml:MultiPolygon"}));
  element("fes:GeometryOperand",null,attributes(new String[]{"name","gml:MultiGeometry"}));
  end("fes:GeometryOperands");
  start("fes:SpatialOperators");
  element("fes:SpatialOperator",null,attributes(new String[]{"name","Disjoint"}));
  element("fes:SpatialOperator",null,attributes(new String[]{"name","Equals"}));
  element("fes:SpatialOperator",null,attributes(new String[]{"name","DWithin"}));
  element("fes:SpatialOperator",null,attributes(new String[]{"name","Beyond"}));
  element("fes:SpatialOperator",null,attributes(new String[]{"name","Intersects"}));
  element("fes:SpatialOperator",null,attributes(new String[]{"name","Touches"}));
  element("fes:SpatialOperator",null,attributes(new String[]{"name","Crosses"}));
  element("fes:SpatialOperator",null,attributes(new String[]{"name","Within"}));
  element("fes:SpatialOperator",null,attributes(new String[]{"name","Contains"}));
  element("fes:SpatialOperator",null,attributes(new String[]{"name","Overlaps"}));
  element("fes:SpatialOperator",null,attributes(new String[]{"name","BBOX"}));
  end("fes:SpatialOperators");
  end("fes:Spatial_Capabilities");
  start("fes:Temporal_Capabilities");
  start("fes:TemporalOperands");
  element("fes:TemporalOperand",null,attributes(new String[]{"name","gml:TimeInstant"}));
  element("fes:TemporalOperand",null,attributes(new String[]{"name","gml:TimePeriod"}));
  end("fes:TemporalOperands");
  start("fes:TemporalOperators");
  element("fes:TemporalOperator",null,attributes(new String[]{"name","After"}));
  element("fes:TemporalOperator",null,attributes(new String[]{"name","Before"}));
  element("fes:TemporalOperator",null,attributes(new String[]{"name","Begins"}));
  element("fes:TemporalOperator",null,attributes(new String[]{"name","BegunBy"}));
  element("fes:TemporalOperator",null,attributes(new String[]{"name","TContains"}));
  element("fes:TemporalOperator",null,attributes(new String[]{"name","During"}));
  element("fes:TemporalOperator",null,attributes(new String[]{"name","TEquals"}));
  element("fes:TemporalOperator",null,attributes(new String[]{"name","TOverlaps"}));
  element("fes:TemporalOperator",null,attributes(new String[]{"name","Meets"}));
  element("fes:TemporalOperator",null,attributes(new String[]{"name","OverlappedBy"}));
  element("fes:TemporalOperator",null,attributes(new String[]{"name","MetBy"}));
  element("fes:TemporalOperator",null,attributes(new String[]{"name","EndedBy"}));
  end("fes:TemporalOperators");
  end("fes:Temporal_Capabilities");
  List<Schema> typeMappingProfiles=org.geotools.gml3.v3_2.GML.getInstance().getAllTypeMappingProfiles();
  start("fes:Functions");
  for (  FunctionName fn : getAvailableFunctionNames()) {
    start("fes:Function",attributes(new String[]{"name",fn.getName()}));
    Name returnType=lookupTypeName(typeMappingProfiles,fn.getReturn());
    String prefix=getNamespaceSupport().getPrefix(returnType.getNamespaceURI());
    if (prefix != null) {
      element("fes:Returns",prefix + ":" + returnType.getLocalPart());
    }
 else {
      LOGGER.warning(String.format("Unable to map function return type to QName for " + "function %s. No namespace mapping for %s.",fn.getName(),returnType.getNamespaceURI()));
    }
    if (!fn.getArgumentNames().isEmpty()) {
      start("fes:Arguments");
      for (      Parameter<?> arg : fn.getArguments()) {
        start("fes:Argument",attributes(new String[]{"name",arg.getName()}));
        Name argType=lookupTypeName(typeMappingProfiles,arg);
        prefix=getNamespaceSupport().getPrefix(argType.getNamespaceURI());
        if (prefix != null) {
          element("fes:Type",prefix + ":" + argType.getLocalPart());
        }
 else {
          LOGGER.warning(String.format("Unable to map function argument type to QName for " + "function %s. No namespace mapping for %s.",arg.getName(),argType.getNamespaceURI()));
        }
        end("fes:Argument");
      }
      end("fes:Arguments");
    }
    end("fes:Function");
  }
  end("fes:Functions");
  end("fes:Filter_Capabilities");
}
