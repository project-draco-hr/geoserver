{
  super(id,new Model(new HashMap()));
  add(new TextField("username",new MapModel(getModel(),"username")));
  add(new PasswordTextField("password",new MapModel(getModel(),"password")).setRequired(false));
  add(new AjaxSubmitLink("test"){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      ((FormComponent)TestLDAPConnectionPanel.this.get("username")).processInput();
      ((FormComponent)TestLDAPConnectionPanel.this.get("password")).processInput();
      ((FormComponent)LDAPAuthProviderPanel.this.get("serverURL")).processInput();
      ((FormComponent)LDAPAuthProviderPanel.this.get("useTLS")).processInput();
      ((FormComponent)LDAPAuthProviderPanel.this.get("userDnPattern")).processInput();
      ((FormComponent)LDAPAuthProviderPanel.this.get("userFilter")).processInput();
      ((FormComponent)LDAPAuthProviderPanel.this.get("userFormat")).processInput();
      String username=(String)((FormComponent)TestLDAPConnectionPanel.this.get("username")).getConvertedInput();
      String password=(String)((FormComponent)TestLDAPConnectionPanel.this.get("password")).getConvertedInput();
      LDAPSecurityServiceConfig ldapConfig=(LDAPSecurityServiceConfig)getForm().getModelObject();
      doTest(ldapConfig,username,password);
      target.addComponent(getPage().get("feedback"));
    }
    void doTest(    LDAPSecurityServiceConfig ldapConfig,    String username,    String password){
      try {
        if (ldapConfig.getUserDnPattern() == null && ldapConfig.getUserFilter() == null) {
          error("Neither user dn pattern or user filter specified");
          return;
        }
        LDAPSecurityProvider provider=new LDAPSecurityProvider(getSecurityManager());
        LDAPAuthenticationProvider authProvider=(LDAPAuthenticationProvider)provider.createAuthenticationProvider(ldapConfig);
        Authentication authentication=authProvider.authenticate(new UsernamePasswordAuthenticationToken(username,password));
        if (authentication == null || !authentication.isAuthenticated()) {
          throw new AuthenticationException("Cannot authenticate " + username);
        }
        provider.destroy(null);
        info(new StringResourceModel(LDAPAuthProviderPanel.class.getSimpleName() + ".connectionSuccessful",null).getObject());
      }
 catch (      Exception e) {
        error(e);
        LOGGER.log(Level.WARNING,e.getMessage(),e);
      }
 finally {
      }
    }
  }
.setDefaultFormProcessing(false));
}
