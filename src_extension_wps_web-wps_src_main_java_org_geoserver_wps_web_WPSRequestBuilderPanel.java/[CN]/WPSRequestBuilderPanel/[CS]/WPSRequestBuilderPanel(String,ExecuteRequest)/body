{
  super(id);
  setOutputMarkupId(true);
  this.execute=executeRequest;
  final DropDownChoice<String> processChoice=new DropDownChoice<String>("process",new PropertyModel<String>(execute,"processName"),buildProcessList());
  add(processChoice);
  descriptionContainer=new WebMarkupContainer("descriptionContainer");
  descriptionContainer.setVisible(false);
  add(descriptionContainer);
  final Label descriptionLabel=new Label("processDescription",new PropertyModel(this,"description"));
  descriptionContainer.add(descriptionLabel);
  inputContainer=new WebMarkupContainer("inputContainer");
  inputContainer.setVisible(false);
  add(inputContainer);
  inputView=new ListView<InputParameterValues>("inputs",new PropertyModel(execute,"inputs")){
    @Override protected void populateItem(    ListItem item){
      InputParameterValues pv=(InputParameterValues)item.getModelObject();
      Parameter p=pv.getParameter();
      item.add(new Label("param",buildParamSpec(p)));
      item.add(new Label("paramDescription",p.description.toString(Locale.ENGLISH)));
      final PropertyModel property=new PropertyModel(pv,"values[0].value");
      if (pv.isBoundingBox()) {
        EnvelopePanel envelope=new EnvelopePanel("paramValue",property);
        envelope.setCRSFieldVisible(true);
        item.add(envelope);
      }
 else       if (pv.isCoordinateReferenceSystem()) {
        CRSPanel crs=new CRSPanel("paramValue",property);
        item.add(crs);
      }
 else       if (pv.isEnum()) {
        EnumPanel panel=new EnumPanel("paramValue",((Class<Enum>)pv.getParameter().type),property);
        item.add(panel);
      }
 else       if (pv.isComplex()) {
        ComplexInputPanel input=new ComplexInputPanel("paramValue",pv,0);
        item.add(input);
      }
 else {
        Fragment f=new Fragment("paramValue","literal",WPSRequestBuilderPanel.this);
        FormComponent literal=new TextField("literalValue",property);
        literal.setRequired(p.minOccurs > 0);
        literal.setLabel(new Model<String>(p.key));
        f.add(literal);
        item.add(f);
      }
    }
  }
;
  inputView.setReuseItems(true);
  inputContainer.add(inputView);
  outputContainer=new WebMarkupContainer("outputContainer");
  outputContainer.setVisible(false);
  add(outputContainer);
  outputView=new ListView("outputs",new PropertyModel(execute,"outputs")){
    @Override protected void populateItem(    ListItem item){
      OutputParameter pv=(OutputParameter)item.getModelObject();
      Parameter p=pv.getParameter();
      item.add(new CheckBox("include",new PropertyModel<Boolean>(pv,"include")));
      item.add(new Label("param",buildParamSpec(p)));
      item.add(new Label("paramDescription",p.description.toString(Locale.ENGLISH)));
      if (pv.isComplex()) {
        DropDownChoice mime=new DropDownChoice("mime",new PropertyModel(pv,"mimeType"),pv.getSupportedMime());
        item.add(mime);
      }
 else {
        item.add(new Label("mime","").setVisible(false));
      }
    }
  }
;
  outputView.setReuseItems(true);
  outputContainer.add(outputView);
  responseWindow=new ModalWindow("responseWindow");
  add(responseWindow);
  responseWindow.setCookieName("demoResponse");
  responseWindow.setPageCreator(new ModalWindow.PageCreator(){
    public Page createPage(){
      DemoRequest request=new DemoRequest(null);
      HttpServletRequest http=(HttpServletRequest)WPSRequestBuilderPanel.this.getRequest().getContainerRequest();
      String url=ResponseUtils.buildURL(ResponseUtils.baseURL(http),"ows",Collections.singletonMap("strict","true"),URLType.SERVICE);
      request.setRequestUrl(url);
      request.setRequestBody((String)responseWindow.getDefaultModelObject());
      return new DemoRequestResponse(new Model<DemoRequest>(request));
    }
  }
);
  final GeoServerAjaxFormLink describeLink=new GeoServerAjaxFormLink("describeProcess"){
    @Override protected void onClick(    AjaxRequestTarget target,    Form form){
      processChoice.processInput();
      if (execute.processName != null) {
        responseWindow.setDefaultModel(new Model<String>(getDescribeXML(execute.processName)));
        responseWindow.show(target);
      }
    }
  }
;
  descriptionContainer.add(describeLink);
  feedback=new FeedbackPanel("feedback");
  feedback.setOutputMarkupId(true);
  add(feedback);
  processChoice.add(new AjaxFormComponentUpdatingBehavior("onchange"){
    @Override protected void onUpdate(    AjaxRequestTarget target){
      initProcessView();
      target.add(WPSRequestBuilderPanel.this);
      WebPage page=getWebPage();
      if (page instanceof GeoServerBasePage) {
        target.add(((GeoServerBasePage)page).getFeedbackPanel());
      }
    }
  }
);
  if (execute.processName != null)   initProcessView();
  final WebMarkupContainer authenticationContainer=new WebMarkupContainer("authenticationContainer");
  authenticationContainer.setOutputMarkupId(true);
  add(authenticationContainer);
  final WebMarkupContainer userpwdContainer=new WebMarkupContainer("userpwdContainer");
  userpwdContainer.setOutputMarkupId(true);
  userpwdContainer.setVisible(false);
  authenticationContainer.add(userpwdContainer);
  final TextField username=new TextField("username",new PropertyModel(this,"username"));
  userpwdContainer.add(username);
  final PasswordTextField password=new PasswordTextField("password",new PropertyModel(this,"password"));
  password.setRequired(false);
  userpwdContainer.add(password);
  CheckBox checkbox=new CheckBox("authenticate",new PropertyModel(this,"authenticate"));
  checkbox.add(new AjaxFormComponentUpdatingBehavior("onchange"){
    @Override protected void onUpdate(    AjaxRequestTarget target){
      userpwdContainer.setVisible(authenticate);
      target.add(authenticationContainer);
    }
  }
);
  authenticationContainer.add(checkbox);
}
