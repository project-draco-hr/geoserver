{
  delete();
  Collection<Granule> granules=mosaic.granules();
  if (granules.isEmpty()) {
    LOGGER.warning("No granules in mosaic, nothing to write");
    return;
  }
  Granule first=Iterators.find(granules.iterator(),new Predicate<Granule>(){
    @Override public boolean apply(    Granule input){
      return input.getEnvelope() != null && input.getEnvelope().getCoordinateReferenceSystem() != null;
    }
  }
);
  if (first == null) {
    throw new IOException("Unable to determine CRS for mosaic");
  }
  Envelope2D envelope=new Envelope2D(first.getEnvelope());
  SimpleFeatureTypeBuilder typeBuilder=new SimpleFeatureTypeBuilder();
  typeBuilder.setName(mosaic.getName());
  typeBuilder.setCRS(envelope.getCoordinateReferenceSystem());
  typeBuilder.add("the_geom",Polygon.class);
  typeBuilder.add("location",String.class);
  if (mosaic.getTimeMode() != TimeMode.NONE) {
    typeBuilder.add("time",Date.class);
  }
  Resource indexerFile=mosaic.getFile().get("indexer.properties");
  Properties indexer=new Properties();
  indexer.put(Utils.Prop.NAME,mosaic.getName());
  indexer.put(Utils.Prop.INDEX_NAME,mosaic.getName());
  indexer.put(Utils.Prop.USE_EXISTING_SCHEMA,"true");
  OutputStream ifos=null;
  try {
    ifos=indexerFile.out();
    indexer.store(ifos,null);
  }
  finally {
    IOUtils.closeQuietly(ifos);
  }
  ShapefileDataStoreFactory shpFactory=new ShapefileDataStoreFactory();
  DirectoryDataStore dir=new DirectoryDataStore(mosaic.getFile().dir(),new ShapefileDataStoreFactory.ShpFileStoreFactory(shpFactory,new HashMap()));
  try {
    dir.createSchema(typeBuilder.buildFeatureType());
    FeatureWriter<SimpleFeatureType,SimpleFeature> w=dir.getFeatureWriterAppend(mosaic.getName(),Transaction.AUTO_COMMIT);
    try {
      for (      Granule g : mosaic.granules()) {
        if (g.getEnvelope() == null) {
          LOGGER.warning("Skipping " + g.getFile().path() + ", no envelope");
        }
        SimpleFeature f=w.next();
        f.setDefaultGeometry(JTS.toGeometry((BoundingBox)g.getEnvelope()));
        f.setAttribute("location",g.getFile().name());
        if (mosaic.getTimeMode() != TimeMode.NONE) {
          f.setAttribute("time",g.getTimestamp());
        }
        w.write();
        envelope.include(g.getEnvelope());
      }
    }
  finally {
      w.close();
    }
  }
  finally {
    dir.dispose();
  }
  ImageMosaicFormat format=new ImageMosaicFormat();
  ImageMosaicReader reader=format.getReader(Resources.find(mosaic.getFile()));
  reader.dispose();
  if (mosaic.getTimeMode() != TimeMode.NONE) {
    Resource propertyFile=mosaic.getFile().get(mosaic.getName() + ".properties");
    InputStream fis=null;
    OutputStream fos=null;
    try {
      fis=propertyFile.in();
      Properties props=new Properties();
      props.load(fis);
      fis.close();
      props.setProperty("TimeAttribute","time");
      fos=propertyFile.out();
      props.store(fos,null);
    }
  finally {
      IOUtils.closeQuietly(fis);
      IOUtils.closeQuietly(fos);
    }
  }
}
