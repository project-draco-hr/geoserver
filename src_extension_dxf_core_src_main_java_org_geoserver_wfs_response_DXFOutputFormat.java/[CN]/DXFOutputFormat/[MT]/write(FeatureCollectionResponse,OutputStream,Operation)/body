{
  String format=getDxfExtension(operation);
  BufferedWriter w=null;
  ZipOutputStream zipStream=null;
  if (format.equals("dxf")) {
    LOGGER.log(Level.FINE,"Plain DXF output");
    w=new BufferedWriter(new OutputStreamWriter(output));
  }
 else {
    LOGGER.log(Level.FINE,"Zipped DXF output");
    zipStream=new ZipOutputStream(output);
    ZipEntry entry=new ZipEntry(getFileName(operation) + ".dxf");
    zipStream.putNextEntry(entry);
    w=new BufferedWriter(new OutputStreamWriter(zipStream));
  }
  GetFeatureRequest gft=GetFeatureRequest.adapt(operation.getParameters()[0]);
  String version=(String)gft.getFormatOptions().get("VERSION");
  String blocks=(String)gft.getFormatOptions().get("ASBLOCKS");
  String colors=(String)gft.getFormatOptions().get("COLORS");
  String ltypes=(String)gft.getFormatOptions().get("LTYPES");
  String[] layers=null;
  if (gft.getFormatOptions().get("LAYERS") instanceof String) {
    layers=((String)gft.getFormatOptions().get("LAYERS")).split(",");
  }
 else   if (gft.getFormatOptions().get("LAYERS") instanceof List) {
    layers=(String[])((List)gft.getFormatOptions().get("LAYERS")).toArray(new String[0]);
  }
  if (layers != null) {
    for (int count=0; count < layers.length; count++) {
      layers[count]=layers[count].toUpperCase();
    }
  }
  String writeAttributes=(String)gft.getFormatOptions().get("WITHATTRIBUTES");
  LOGGER.log(Level.FINE,"Format options: " + version + "; "+ blocks+ "; "+ colors+ "; "+ ltypes+ "; "+ StringUtils.join(layers,",")+ "; "+ writeAttributes);
  DXFWriter dxfWriter=DXFWriterFinder.getWriter(version,w);
  if (dxfWriter != null) {
    LOGGER.log(Level.INFO,"DXFWriter: " + dxfWriter.getDescription());
    if (layers == null) {
      layers=getLayerNames(gft.getQueries());
    }
    LOGGER.log(Level.FINE,"Layers names: " + StringUtils.join(layers,","));
    dxfWriter.setOption("layers",layers);
    if (writeAttributes != null) {
      dxfWriter.setOption("writeattributes",writeAttributes.toLowerCase().equals("true"));
    }
    if (blocks != null && blocks.toLowerCase().equals("true"))     dxfWriter.setOption("geometryasblock",true);
    if (colors != null) {
      try {
        String[] sColors=colors.split(",");
        int[] icolors=new int[sColors.length];
        for (int count=0; count < sColors.length; count++)         icolors[count]=Integer.parseInt(sColors[count]);
        dxfWriter.setOption("colors",icolors);
      }
 catch (      Throwable t) {
        LOGGER.log(Level.WARNING,"format option colors ignored by DXFOutputFormat due to a wrong format: " + t.getMessage());
      }
    }
    if (ltypes != null) {
      try {
        String[] sLTypes=ltypes.split(",");
        LineType[] ltypesArr=new LineType[sLTypes.length];
        for (int count=0; count < sLTypes.length; count++)         ltypesArr[count]=LineType.parse(sLTypes[count]);
        dxfWriter.setOption("linetypes",ltypesArr);
      }
 catch (      Throwable t) {
        LOGGER.warning("format option ltypes ignored by DXFOutputFormat due to a wrong format: " + t.getMessage());
      }
    }
    dxfWriter.write(featureCollection.getFeature(),version);
    w.flush();
    if (zipStream != null) {
      zipStream.closeEntry();
      zipStream.close();
    }
    dxfWriter=null;
    zipStream=null;
    w=null;
  }
 else   throw new UnsupportedOperationException("Version " + version + " not supported by dxf output format");
}
