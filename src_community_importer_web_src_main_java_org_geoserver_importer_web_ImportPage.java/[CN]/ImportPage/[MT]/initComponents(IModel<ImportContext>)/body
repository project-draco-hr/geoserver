{
  add(new Label("id",new PropertyModel(model,"id")));
  ImportContextProvider provider=new ImportContextProvider(){
    @Override protected List<Property<ImportContext>> getProperties(){
      return Arrays.asList(STATE,CREATED,UPDATED);
    }
    @Override protected List<ImportContext> getItems(){
      return Collections.singletonList(model.getObject());
    }
  }
;
  add(new AjaxLink("raw"){
    @Override public void onClick(    AjaxRequestTarget target){
      dialog.setInitialHeight(500);
      dialog.setInitialWidth(700);
      dialog.showOkCancel(target,new DialogDelegate(){
        @Override protected Component getContents(        String id){
          XStreamPersister xp=importer().createXStreamPersisterXML();
          ByteArrayOutputStream bout=new ByteArrayOutputStream();
          try {
            xp.save(model.getObject(),bout);
          }
 catch (          IOException e) {
            bout=new ByteArrayOutputStream();
            LOGGER.log(Level.FINER,e.getMessage(),e);
            e.printStackTrace(new PrintWriter(bout));
          }
          return new TextAreaPanel(id,new Model(new String(bout.toByteArray())));
        }
        @Override protected boolean onSubmit(        AjaxRequestTarget target,        Component contents){
          return true;
        }
      }
);
    }
  }
.setVisible(ImporterWebUtils.isDevMode()));
  final ImportContextTable headerTable=new ImportContextTable("header",provider);
  headerTable.setOutputMarkupId(true);
  headerTable.setFilterable(false);
  headerTable.setPageable(false);
  add(headerTable);
  final ImportContext imp=model.getObject();
  boolean selectable=imp.getState() != ImportContext.State.COMPLETE;
  final ImportTaskTable taskTable=new ImportTaskTable("tasks",new ImportTaskProvider(model),selectable){
    @Override protected void onSelectionUpdate(    AjaxRequestTarget target){
      updateImportLink((AjaxLink)ImportPage.this.get("import"),this,target);
    }
  }
.setFeedbackPanel(feedbackPanel);
  taskTable.setOutputMarkupId(true);
  taskTable.setFilterable(false);
  add(taskTable);
  final AjaxLink<Long> importLink=new AjaxLink<Long>("import",new Model<Long>()){
    @Override protected void disableLink(    ComponentTag tag){
      super.disableLink(tag);
      ImporterWebUtils.disableLink(tag);
    }
    @Override public void onClick(    AjaxRequestTarget target){
      ImportContext imp=model.getObject();
      BasicImportFilter filter=new BasicImportFilter();
      for (      ImportTask t : taskTable.getSelection()) {
        filter.add(t);
      }
      running.set(true);
      target.addComponent(cancelLink(this));
      final Long jobid=importer().runAsync(imp,filter);
      setDefaultModelObject(jobid);
      final AjaxLink self=this;
      taskTable.add(new AbstractAjaxTimerBehavior(Duration.milliseconds(500)){
        @Override protected void onTimer(        AjaxRequestTarget target){
          Task<ImportContext> job=importer().getTask(jobid);
          if (job == null || job.isDone()) {
            stop();
            self.setEnabled(true);
            target.addComponent(self);
            running.set(false);
            target.addComponent(cancelLink(self));
          }
          target.addComponent(taskTable);
          target.addComponent(headerTable);
        }
      }
);
      target.addComponent(taskTable);
      setLinkEnabled(this,false,target);
    }
  }
;
  importLink.setOutputMarkupId(true);
  importLink.setEnabled(doSelectReady(imp,taskTable,null));
  add(importLink);
  final AjaxLink cancelLink=new AjaxLink("cancel"){
    @Override protected void disableLink(    ComponentTag tag){
      super.disableLink(tag);
      ImporterWebUtils.disableLink(tag);
    }
    @Override public void onClick(    AjaxRequestTarget target){
      ImportContext imp=model.getObject();
      if (!running.get()) {
        setResponsePage(ImportDataPage.class);
        return;
      }
      Long jobid=importLink.getModelObject();
      if (jobid == null) {
        return;
      }
      Task<ImportContext> task=importer().getTask(jobid);
      if (task == null || task.isDone()) {
        return;
      }
      task.getMonitor().setCanceled(true);
      task.cancel(false);
      try {
        task.get();
      }
 catch (      Exception e) {
      }
      setLinkEnabled(importLink,true,target);
    }
  }
;
  cancelLink.add(new Label("text",new CancelTitleModel()));
  add(cancelLink);
  WebMarkupContainer selectPanel=new WebMarkupContainer("select");
  selectPanel.add(new AjaxLink<ImportContext>("select-all",model){
    @Override public void onClick(    AjaxRequestTarget target){
      taskTable.selectAll();
      target.addComponent(taskTable);
      updateImportLink(importLink,taskTable,target);
    }
  }
);
  selectPanel.add(new AjaxLink<ImportContext>("select-none",model){
    @Override public void onClick(    AjaxRequestTarget target){
      taskTable.clearSelection();
      target.addComponent(taskTable);
      updateImportLink(importLink,taskTable,target);
    }
  }
);
  selectPanel.add(new AjaxLink<ImportContext>("select-ready",model){
    @Override public void onClick(    AjaxRequestTarget target){
      doSelectReady(getModelObject(),taskTable,target);
      target.addComponent(taskTable);
      updateImportLink(importLink,taskTable,target);
    }
  }
);
  add(selectPanel);
  add(new Icon("icon",new DataIconModel(imp.getData())));
  add(new Label("title",new DataTitleModel(imp)).add(new AttributeModifier("title",new DataTitleModel(imp,false))));
  add(dialog=new GeoServerDialog("dialog"));
}
