{
  final Resource.Lock memoryLock=memoryProvider.acquire(lockKey);
  final File file=getFile(lockKey);
  try {
    FileOutputStream currFos=null;
    FileLock currLock=null;
    try {
      int count=0;
      while (currLock == null && count < maxLockAttempts) {
        currFos=new FileOutputStream(file);
        try {
          currLock=currFos.getChannel().lock();
        }
 catch (        OverlappingFileLockException e) {
          IOUtils.closeQuietly(currFos);
          try {
            Thread.sleep(20);
          }
 catch (          InterruptedException ie) {
          }
        }
catch (        IOException e) {
          IOUtils.closeQuietly(currFos);
          try {
            Thread.sleep(20);
          }
 catch (          InterruptedException ie) {
          }
        }
        count++;
      }
      if (count >= maxLockAttempts) {
        throw new IllegalStateException("Failed to get a lock on key " + lockKey + " after "+ count+ " attempts");
      }
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug("Lock " + lockKey + " acquired by thread "+ Thread.currentThread().getId()+ " on file "+ file);
      }
      final FileOutputStream fos=currFos;
      final FileLock lock=currLock;
      currFos=null;
      currLock=null;
      return new Resource.Lock(){
        boolean released;
        public void release(){
          if (released) {
            return;
          }
          try {
            released=true;
            if (!lock.isValid()) {
              if (LOGGER.isDebugEnabled()) {
                LOGGER.debug("Lock key " + lockKey + " for releasing lock is unkonwn, it means "+ "this lock was never acquired, or was released twice. "+ "Current thread is: "+ Thread.currentThread().getId()+ ". "+ "Are you running two instances in the same JVM using NIO locks? "+ "This case is not supported and will generate exactly this error message");
                return;
              }
            }
            try {
              lock.release();
              IOUtils.closeQuietly(fos);
              file.delete();
              if (LOGGER.isDebugEnabled()) {
                LOGGER.debug("Lock " + lockKey + " released by thread "+ Thread.currentThread().getId());
              }
            }
 catch (            IOException e) {
              throw new IllegalStateException("Failure while trying to release lock for key " + lockKey,e);
            }
          }
  finally {
            memoryLock.release();
          }
        }
        @Override public String toString(){
          return "FileLock " + file.getName();
        }
      }
;
    }
  finally {
      if (currLock != null) {
        currLock.release();
        memoryLock.release();
      }
      IOUtils.closeQuietly(currFos);
      file.delete();
    }
  }
 catch (  IOException e) {
    throw new IllegalStateException("Failure while trying to get lock for key " + lockKey,e);
  }
}
