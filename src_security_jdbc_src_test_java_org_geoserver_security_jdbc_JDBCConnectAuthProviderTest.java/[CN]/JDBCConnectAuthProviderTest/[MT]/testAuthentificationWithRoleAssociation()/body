{
  GeoServerRoleService roleService=createRoleService("jdbc3");
  JDBCConnectAuthProviderConfig config=createAuthConfg("jdbc3",null);
  getSecurityManager().saveAuthenticationProvider(config);
  GeoServerAuthenticationProvider provider=getSecurityManager().loadAuthenticationProvider("jdbc3");
  GeoServerRoleStore roleStore=roleService.createStore();
  roleStore.addRole(GeoServerRole.ADMIN_ROLE);
  roleStore.associateRoleToUser(GeoServerRole.ADMIN_ROLE,"sa");
  roleStore.store();
  getSecurityManager().setActiveRoleService(roleService);
  UsernamePasswordAuthenticationToken token=new UsernamePasswordAuthenticationToken("sa","");
  token.setDetails("details");
  assertTrue(provider.supports(token.getClass()));
  assertFalse(provider.supports(RememberMeAuthenticationToken.class));
  Authentication auth=provider.authenticate(token);
  assertNotNull(auth);
  assertEquals("sa",auth.getPrincipal());
  assertNull(auth.getCredentials());
  assertEquals("details",auth.getDetails());
  assertEquals(2,auth.getAuthorities().size());
  checkForAuthenticatedRole(auth);
  assertTrue(auth.getAuthorities().contains(GeoServerRole.ADMIN_ROLE));
  token=new UsernamePasswordAuthenticationToken("abc","def");
  boolean fail=false;
  try {
    if (provider.authenticate(token) == null)     fail=true;
  }
 catch (  BadCredentialsException ex) {
    fail=true;
  }
catch (  UsernameNotFoundException ex) {
    fail=true;
  }
  assertTrue(fail);
}
