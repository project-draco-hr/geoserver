{
  Resource dir=getResource().parent();
  Resource newKSFile=dir.get(PREPARED_FILE_NAME);
  if (newKSFile.getType() != Type.UNDEFINED) {
    newKSFile.delete();
  }
  try {
    KeyStore oldKS=KeyStore.getInstance(KEYSTORETYPE);
    try (InputStream fin=getResource().in()){
      oldKS.load(fin,oldPassword);
    }
     KeyStore newKS=KeyStore.getInstance(KEYSTORETYPE);
    newKS.load(null,newPassword);
    KeyStore.PasswordProtection protectionparam=new KeyStore.PasswordProtection(newPassword);
    Enumeration<String> enumeration=oldKS.aliases();
    while (enumeration.hasMoreElements()) {
      String alias=enumeration.nextElement();
      Key key=oldKS.getKey(alias,oldPassword);
      KeyStore.Entry entry=null;
      if (key instanceof SecretKey)       entry=new KeyStore.SecretKeyEntry((SecretKey)key);
      if (key instanceof PrivateKey)       entry=new KeyStore.PrivateKeyEntry((PrivateKey)key,oldKS.getCertificateChain(alias));
      if (key instanceof PublicKey)       entry=new KeyStore.TrustedCertificateEntry(oldKS.getCertificate(alias));
      if (entry == null)       LOGGER.warning("Unknown key in store, alias: " + alias + " class: "+ key.getClass().getName());
 else       newKS.setEntry(alias,entry,protectionparam);
    }
    try (OutputStream fos=newKSFile.out()){
      newKS.store(fos,newPassword);
    }
   }
 catch (  Exception ex) {
    throw new IOException(ex);
  }
}
