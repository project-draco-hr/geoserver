{
  final DropDownChoice<StoreInfo> stores=new DropDownChoice<>("storesDropDown",new Model<StoreInfo>(),new StoreListModel(),new StoreListChoiceRenderer());
  stores.setOutputMarkupId(true);
  stores.add(new AjaxFormComponentUpdatingBehavior("change"){
    @Override protected void onUpdate(    AjaxRequestTarget target){
      if (stores.getModelObject() != null) {
        StoreInfo store=(StoreInfo)stores.getModelObject();
        NewLayerPage.this.storeId=store.getId();
        provider.setStoreId(store.getId());
        storeName.setDefaultModelObject(store.getName());
        selectLayers.setVisible(true);
        try {
          provider.getItems();
        }
 catch (        Exception e) {
          LOGGER.log(Level.SEVERE,"Error retrieving layers for the specified store",e);
          error(e.getMessage());
          selectLayers.setVisible(false);
        }
        updateSpecialFunctionPanels(store);
      }
 else {
        selectLayers.setVisible(false);
        createTypeContainer.setVisible(false);
      }
      target.add(selectLayersContainer);
      target.add(feedbackPanel);
    }
  }
);
  return stores;
}
