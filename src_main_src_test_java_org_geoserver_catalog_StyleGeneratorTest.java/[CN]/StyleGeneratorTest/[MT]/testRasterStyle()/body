{
  ResourcePool rp=createNiceMock(ResourcePool.class);
  rp.writeStyle((StyleInfo)anyObject(),(InputStream)anyObject());
  expectLastCall().andAnswer(new IAnswer<Void>(){
    @Override public Void answer() throws Throwable {
      Object[] args=getCurrentArguments();
      InputStream is=(InputStream)args[1];
      byte[] input=IOUtils.toByteArray(is);
      SLDParser parser=new SLDParser(CommonFactoryFinder.getStyleFactory());
      parser.setInput(new ByteArrayInputStream(input));
      StyledLayerDescriptor sld=parser.parseSLD();
      NamedLayer nl=(NamedLayer)sld.getStyledLayers()[0];
      assertEquals("foo",nl.getName());
      Style style=nl.getStyles()[0];
      assertEquals("A raster style",style.getDescription().getTitle().toString());
      assertEquals(1,style.featureTypeStyles().size());
      FeatureTypeStyle fts=style.featureTypeStyles().get(0);
      assertEquals(1,fts.rules().size());
      assertThat(fts.rules().get(0).symbolizers().get(0),instanceOf(RasterSymbolizer.class));
      SLDValidator validator=new SLDValidator();
      List errors=validator.validateSLD(new ByteArrayInputStream(input));
      assertEquals(0,errors.size());
      return null;
    }
  }
);
  Catalog cat=createNiceMock(Catalog.class);
  expect(cat.getFactory()).andReturn(new CatalogFactoryImpl(null)).anyTimes();
  expect(cat.getResourcePool()).andReturn(rp).anyTimes();
  WorkspaceInfo ws=createNiceMock(WorkspaceInfo.class);
  CoverageInfo ci=createNiceMock(CoverageInfo.class);
  expect(ci.getName()).andReturn("foo").anyTimes();
  replay(rp,ci,ws,cat);
  StyleGenerator gen=new StyleGenerator(cat){
    protected void randomizeRamp(){
    }
  }
;
  gen.setWorkspace(ws);
  StyleInfo style=gen.createStyle(new SLDHandler(),ci);
  assertNotNull(style);
  assertNotNull(style.getWorkspace());
}
