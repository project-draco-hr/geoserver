{
  VersionedFeatureCollectionType results=(VersionedFeatureCollectionType)value;
  List featureCollections=results.getFeature();
  HashMap ns2metas=new HashMap();
  for (Iterator fc=featureCollections.iterator(); fc.hasNext(); ) {
    SimpleFeatureCollection features=(SimpleFeatureCollection)fc.next();
    SimpleFeatureType featureType=features.getSchema();
    String namespaceURI=featureType.getName().getNamespaceURI();
    FeatureTypeInfo meta=catalog.getFeatureTypeByName(namespaceURI,featureType.getTypeName());
    if (meta == null)     throw new WFSException("Could not find feature type " + namespaceURI + ":"+ featureType.getTypeName()+ " in the GeoServer catalog");
    Set metas=(Set)ns2metas.get(namespaceURI);
    if (metas == null) {
      metas=new HashSet();
      ns2metas.put(namespaceURI,metas);
    }
    metas.add(meta);
  }
  WFSInfo wfs=gs.getService(WFSInfo.class);
  GeoServerInfo global=wfs.getGeoServer().getGlobal();
  Encoder encoder=new Encoder(configuration,configuration.schema());
  encoder.setEncoding(Charset.forName(gs.getSettings().getCharset()));
  BaseRequestType gft=(BaseRequestType)getFeature.getParameters()[0];
  encoder.setSchemaLocation(org.geoserver.wfsv.xml.v1_1_0.WFSV.NAMESPACE,buildSchemaURL(gft.getBaseUrl(),"wfs/1.1.0/wfs.xsd"));
  for (Iterator i=ns2metas.entrySet().iterator(); i.hasNext(); ) {
    Map.Entry entry=(Map.Entry)i.next();
    String namespaceURI=(String)entry.getKey();
    Set metas=(Set)entry.getValue();
    StringBuffer typeNames=new StringBuffer();
    for (Iterator m=metas.iterator(); m.hasNext(); ) {
      FeatureTypeInfo meta=(FeatureTypeInfo)m.next();
      typeNames.append(meta.getName());
      if (m.hasNext()) {
        typeNames.append(",");
      }
    }
    Map<String,String> params=params("service","WFS","version","1.1.0","request","DescribeFeatureType","typeName",typeNames.toString());
    encoder.setSchemaLocation(namespaceURI,buildURL(gft.getBaseUrl(),"wfs",params,URLType.SERVICE));
  }
  encoder.encode(results,org.geoserver.wfs.xml.v1_1_0.WFS.FEATURECOLLECTION,output);
}
