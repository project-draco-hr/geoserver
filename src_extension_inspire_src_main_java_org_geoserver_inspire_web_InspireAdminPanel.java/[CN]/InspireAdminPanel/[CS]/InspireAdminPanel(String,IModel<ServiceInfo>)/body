{
  super(id,model);
  MetadataMap serviceMetadata=model.getObject().getMetadata();
  String metadataURL=(String)serviceMetadata.get(SERVICE_METADATA_URL.key);
  String mediaType=(String)serviceMetadata.get(SERVICE_METADATA_TYPE.key);
  String language=(String)serviceMetadata.get(LANGUAGE.key);
  boolean isDownloadService=model.getObject() instanceof WFSInfo || model.getObject() instanceof WCSInfo;
  UniqueResourceIdentifiers ids=null;
  if (isDownloadService) {
    ids=(UniqueResourceIdentifiers)serviceMetadata.get(SPATIAL_DATASET_IDENTIFIER_TYPE.key,UniqueResourceIdentifiers.class);
  }
  if (!serviceMetadata.containsKey(CREATE_EXTENDED_CAPABILITIES.key)) {
    if (metadataURL == null || isDownloadService && (ids == null || ids.isEmpty())) {
      serviceMetadata.put(CREATE_EXTENDED_CAPABILITIES.key,false);
    }
 else {
      serviceMetadata.put(CREATE_EXTENDED_CAPABILITIES.key,true);
    }
  }
  PropertyModel<MetadataMap> metadata=new PropertyModel<MetadataMap>(model,"metadata");
  final CheckBox createInspireExtendedCapabilities=new CheckBox("createExtendedCapabilities",new MetadataMapModel(metadata,CREATE_EXTENDED_CAPABILITIES.key,Boolean.class));
  add(createInspireExtendedCapabilities);
  final WebMarkupContainer container=new WebMarkupContainer("container");
  container.setOutputMarkupId(true);
  add(container);
  final WebMarkupContainer configs=new WebMarkupContainer("configs");
  configs.setOutputMarkupId(true);
  configs.setVisible(createInspireExtendedCapabilities.getModelObject());
  container.add(configs);
  createInspireExtendedCapabilities.add(new OnChangeAjaxBehavior(){
    private static final long serialVersionUID=1L;
    @Override protected void onUpdate(    AjaxRequestTarget target){
      configs.setVisible(createInspireExtendedCapabilities.getModelObject());
      target.addComponent(container);
    }
  }
);
  if (!model.getObject().getMetadata().containsKey(LANGUAGE.key)) {
    model.getObject().getMetadata().put(LANGUAGE.key,"eng");
  }
  configs.add(new LanguageDropDownChoice("language",new MapModel(metadata,LANGUAGE.key)));
  TextField metadataUrlField=new TextField("metadataURL",new MapModel(metadata,SERVICE_METADATA_URL.key));
  metadataUrlField.setRequired(true);
  FormComponentFeedbackBorder metadataURLBorder=new FormComponentFeedbackBorder("border");
  metadataURLBorder.add(metadataUrlField);
  configs.add(metadataURLBorder);
  metadataUrlField.add(new AttributeModifier("title",true,new ResourceModel("InspireAdminPanel.metadataURL.title")));
  final Map<String,String> mdUrlTypes=new HashMap<String,String>();
  mdUrlTypes.put("application/vnd.ogc.csw.GetRecordByIdResponse_xml","CSW GetRecordById Response");
  mdUrlTypes.put("application/vnd.iso.19139+xml","ISO 19139 ServiceMetadata record");
  IModel<String> urlTypeModel=new MapModel(metadata,SERVICE_METADATA_TYPE.key);
  IChoiceRenderer<String> urlTypeChoiceRenderer=new IChoiceRenderer<String>(){
    private static final long serialVersionUID=1L;
    @Override public Object getDisplayValue(    final String key){
      final String resourceKey="InspireAdminPanel.metadataURLType." + key;
      final String defaultValue=key;
      final String displayValue=new ResourceModel(resourceKey,defaultValue).getObject();
      return displayValue;
    }
    @Override public String getIdValue(    final String key,    int index){
      return key;
    }
  }
;
  List<String> urlTypeChoices=new ArrayList<String>(mdUrlTypes.keySet());
  DropDownChoice<String> serviceMetadataRecordType=new DropDownChoice<String>("metadataURLType",urlTypeModel,urlTypeChoices,urlTypeChoiceRenderer);
  serviceMetadataRecordType.setNullValid(true);
  configs.add(serviceMetadataRecordType);
  WebMarkupContainer identifiersContainer=new WebMarkupContainer("datasetIdentifiersContainer");
  identifiersContainer.setVisible(isDownloadService);
  configs.add(identifiersContainer);
  IModel<UniqueResourceIdentifiers> sdiModel=new MetadataMapModel(metadata,SPATIAL_DATASET_IDENTIFIER_TYPE.key,UniqueResourceIdentifiers.class);
  UniqueResourceIdentifiersEditor identifiersEditor=new UniqueResourceIdentifiersEditor("spatialDatasetIdentifiers",sdiModel);
  identifiersContainer.add(identifiersEditor);
}
