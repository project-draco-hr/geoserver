{
  PyObject run=process(engine);
  List<PyObject> args=new ArrayList();
  List<String> kw=new ArrayList();
  for (  Map.Entry<String,Object> input : inputs.entrySet()) {
    args.add(Py.java2py(input.getValue()));
    kw.add(input.getKey());
  }
  PyObject r=run.__call__(args.toArray(new PyObject[args.size()]),kw.toArray(new String[kw.size()]));
  Map<String,Parameter<?>> outputs=getOutputs(engine);
  Map<String,?> result=null;
  if (r instanceof Map) {
    result=(Map<String,?>)r;
  }
 else {
    result=Collections.singletonMap(outputs.keySet().iterator().next(),r);
  }
  if (result.size() != outputs.size()) {
    throw new IllegalStateException(String.format("Process returned %d values, should have " + "returned %d",result.size(),outputs.size()));
  }
  Map<String,Object> results=new LinkedHashMap<String,Object>();
  for (  Map.Entry<String,Parameter<?>> e : outputs.entrySet()) {
    String key=e.getKey();
    Parameter output=e.getValue();
    Object obj=result.get(key);
    if (obj instanceof PyObject) {
      obj=((PyObject)obj).__tojava__(output.type);
    }
    if (obj != null && !output.type.isInstance(obj)) {
      LOGGER.warning(String.format("Output %s declared type %s but returned %s",output.getName(),output.getType().getSimpleName(),obj.getClass().getSimpleName()));
    }
    results.put(output.key,obj);
  }
  return results;
}
