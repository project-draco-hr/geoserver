{
  final String responseCRS=request.getSRS();
  final CoordinateReferenceSystem targetCRS=CRS.decode(responseCRS);
  final String requestCRS=request.getSRS();
  final CoordinateReferenceSystem sourceCRS=CRS.decode(requestCRS);
  final CoordinateReferenceSystem cvCRS=((GeneralEnvelope)coverageReader.getOriginalEnvelope()).getCoordinateReferenceSystem();
  final GeneralEnvelope destinationEnvelopeInSourceCRS=CRS.transform(destinationEnvelope,cvCRS);
  Rectangle destinationSize=null;
  destinationSize=new Rectangle(0,0,request.getHeight(),request.getWidth());
  Interpolation interpolation=Interpolation.getInstance(Interpolation.INTERP_BILINEAR);
  Map<Object,Object> parameters=new HashMap<Object,Object>();
  parameters.put(AbstractGridFormat.READ_GRIDGEOMETRY2D.getName().toString(),new GridGeometry2D(new GeneralGridEnvelope(destinationSize),destinationEnvelopeInSourceCRS));
  final GridCoverage2D coverage=coverageReader.read(CoverageUtils.getParameters(coverageReader.getFormat().getReadParameters(),parameters,true));
  if (coverage == null) {
    LOGGER.log(Level.FINE,"Failed to read coverage - continuing");
    return null;
  }
  final GridCoverage2D croppedGridCoverage=BilWCSUtils.crop(coverage,(GeneralEnvelope)coverage.getEnvelope(),cvCRS,destinationEnvelopeInSourceCRS,Boolean.TRUE);
  GridCoverage2D subCoverage=croppedGridCoverage;
  final GeneralGridEnvelope newGridrange=new GeneralGridEnvelope(destinationSize);
  subCoverage=BilWCSUtils.scale(croppedGridCoverage,newGridrange,croppedGridCoverage,cvCRS,destinationEnvelopeInSourceCRS);
  subCoverage=BilWCSUtils.reproject(subCoverage,sourceCRS,targetCRS,interpolation);
  return subCoverage;
}
