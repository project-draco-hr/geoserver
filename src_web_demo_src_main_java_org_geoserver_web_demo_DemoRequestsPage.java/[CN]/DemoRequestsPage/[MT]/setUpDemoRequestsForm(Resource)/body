{
  final IModel requestModel=getDefaultModel();
  final Form demoRequestsForm;
  demoRequestsForm=new Form("demoRequestsForm");
  demoRequestsForm.setOutputMarkupId(true);
  demoRequestsForm.setModel(requestModel);
  add(demoRequestsForm);
  final List<String> demoList=getDemoList(demoDir);
  final DropDownChoice demoRequestsList;
  final IModel reqFileNameModel=new PropertyModel(requestModel,"requestFileName");
  demoRequestsList=new DropDownChoice("demoRequestsList",reqFileNameModel,demoList,new ChoiceRenderer(){
    public String getIdValue(    Object obj,    int index){
      return String.valueOf(obj);
    }
    public Object getDisplayValue(    Object obj){
      return obj;
    }
  }
);
  demoRequestsForm.add(demoRequestsList);
  demoRequestsList.add(new AjaxFormSubmitBehavior(demoRequestsForm,"change"){
    @Override protected void onSubmit(    AjaxRequestTarget target){
      final String reqFileName=demoRequestsList.getModelValue();
      final String contents;
      String proxyBaseUrl;
      final String baseUrl;
{
        HttpServletRequest httpServletRequest=getGeoServerApplication().servletRequest(DemoRequestsPage.this.getRequest());
        proxyBaseUrl=GeoServerExtensions.getProperty("PROXY_BASE_URL");
        if (StringUtils.isEmpty(proxyBaseUrl)) {
          GeoServer gs=getGeoServer();
          proxyBaseUrl=gs.getGlobal().getSettings().getProxyBaseUrl();
          if (StringUtils.isEmpty(proxyBaseUrl)) {
            baseUrl=ResponseUtils.baseURL(httpServletRequest);
          }
 else {
            baseUrl=proxyBaseUrl;
          }
        }
 else {
          baseUrl=proxyBaseUrl;
        }
      }
      try {
        contents=getFileContents(reqFileName);
      }
 catch (      IOException e) {
        LOGGER.log(Level.WARNING,"Can't load demo file " + reqFileName,e);
        throw new WicketRuntimeException("Can't load demo file " + reqFileName,e);
      }
      boolean demoRequestIsHttpGet=reqFileName.endsWith(".url");
      final String service=reqFileName.substring(0,reqFileName.indexOf('_')).toLowerCase();
      if (demoRequestIsHttpGet) {
        String url=ResponseUtils.appendPath(baseUrl,contents);
        urlTextField.setModelObject(url);
        body.setModelObject("");
      }
 else {
        String serviceUrl=ResponseUtils.appendPath(baseUrl,service);
        urlTextField.setModelObject(serviceUrl);
        body.setModelObject(contents);
      }
      setResponsePage(DemoRequestsPage.this);
    }
    @Override protected void onError(    AjaxRequestTarget target){
    }
  }
);
  urlTextField=new TextField("url",new PropertyModel(requestModel,"requestUrl"));
  urlTextField.setMarkupId("requestUrl");
  urlTextField.setOutputMarkupId(true);
  demoRequestsForm.add(urlTextField);
  body=new CodeMirrorEditor("body",new PropertyModel(requestModel,"requestBody"));
  body.setTextAreaMarkupId("requestBody");
  demoRequestsForm.add(body);
  username=new TextField("username",new PropertyModel(requestModel,"userName"));
  demoRequestsForm.add(username);
  password=new PasswordTextField("password",new PropertyModel(requestModel,"password"));
  password.setRequired(false);
  demoRequestsForm.add(password);
  final ModalWindow responseWindow;
  responseWindow=new ModalWindow("responseWindow");
  add(responseWindow);
  responseWindow.setCookieName("demoResponse");
  responseWindow.setPageCreator(new ModalWindow.PageCreator(){
    public Page createPage(){
      return new DemoRequestResponse(requestModel);
    }
  }
);
  demoRequestsForm.add(new AjaxSubmitLink("submit",demoRequestsForm){
    @Override public void onSubmit(    AjaxRequestTarget target,    Form testWfsPostForm){
      responseWindow.show(target);
    }
    @Override protected void updateAjaxAttributes(    AjaxRequestAttributes attributes){
      super.updateAjaxAttributes(attributes);
      attributes.getAjaxCallListeners().add(new AjaxCallListener(){
        @Override public CharSequence getBeforeHandler(        Component component){
          return "document.getElementById('requestBody').value = document.gsEditors.requestBody.getValue();";
        }
      }
);
    }
  }
);
}
