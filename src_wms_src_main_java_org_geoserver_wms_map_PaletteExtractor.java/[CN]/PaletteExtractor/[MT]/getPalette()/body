{
  if (!canComputePalette())   return null;
  int[] cmap=new int[colors.size()];
  int i=0;
  for (Iterator it=colors.iterator(); it.hasNext(); ) {
    Color color=(Color)it.next();
    cmap[i++]=(color.getAlpha() << 24) | (color.getRed() << 16) | (color.getGreen() << 8)| color.getBlue();
  }
  Arrays.sort(cmap);
  int transparentIndex=cmap[cmap.length - 1] == TRANSPARENT_CODE ? cmap.length - 1 : -1;
  int bits=8;
  if (cmap.length <= 2) {
    bits=1;
  }
 else   if (cmap.length <= 4) {
    bits=2;
  }
 else   if (cmap.length <= 16) {
    bits=4;
  }
  int length=bits == 1 ? 2 : 256;
  if (cmap.length < length) {
    int[] temp=new int[length];
    System.arraycopy(cmap,0,temp,0,cmap.length);
    cmap=temp;
  }
  return new IndexColorModel(bits,cmap.length,cmap,0,true,transparentIndex,DataBuffer.TYPE_BYTE);
}
