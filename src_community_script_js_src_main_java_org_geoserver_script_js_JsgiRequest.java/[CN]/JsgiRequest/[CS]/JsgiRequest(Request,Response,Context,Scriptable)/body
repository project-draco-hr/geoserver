{
  super(scope,ScriptableObject.getObjectPrototype(scope));
  Reference ref=request.getResourceRef();
  this.put("method",this,request.getMethod().toString());
  this.put("scriptName",this,ref.getLastSegment());
  List<String> seg=new ArrayList<String>(ref.getSegments().subList(4,ref.getSegments().size()));
  seg.add(0,"");
  this.put("pathInfo",this,StringUtils.join(seg.toArray(),"/"));
  this.put("queryString",this,ref.getQuery());
  this.put("host",this,ref.getHostDomain());
  this.put("port",this,ref.getHostPort());
  this.put("scheme",this,ref.getScheme());
  try {
    this.put("input",this,Context.javaToJS(request.getEntity().getStream(),scope));
  }
 catch (  IOException e) {
    LOGGER.warning(e.getMessage());
  }
  Scriptable headers=cx.newObject(scope);
  Form requestHeaders=(Form)request.getAttributes().get("org.restlet.http.headers");
  for (  String name : requestHeaders.getNames()) {
    String value=requestHeaders.getFirstValue(name,true);
    headers.put(name.toLowerCase(),headers,value);
  }
  this.put("headers",this,headers);
  Scriptable jsgiObject=cx.newObject(scope);
  int readonly=ScriptableObject.PERMANENT | ScriptableObject.READONLY;
  Scriptable version=cx.newArray(scope,new Object[]{Integer.valueOf(0),Integer.valueOf(3)});
  ScriptableObject.defineProperty(jsgiObject,"version",version,readonly);
  ScriptableObject.defineProperty(jsgiObject,"multithread",Boolean.TRUE,readonly);
  ScriptableObject.defineProperty(jsgiObject,"multiprocess",Boolean.FALSE,readonly);
  ScriptableObject.defineProperty(jsgiObject,"async",Boolean.TRUE,readonly);
  ScriptableObject.defineProperty(jsgiObject,"runOnce",Boolean.FALSE,readonly);
  ScriptableObject.defineProperty(jsgiObject,"cgi",Boolean.FALSE,readonly);
  this.put("jsgi",this,jsgiObject);
  Scriptable env=cx.newObject(scope);
  env.put("servletRequest",env,Context.javaToJS(request,scope));
  env.put("servletResponse",env,Context.javaToJS(response,scope));
  this.put("env",this,env);
}
