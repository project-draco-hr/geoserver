{
  AttributeValue[] argValues=new AttributeValue[inputs.size()];
  EvaluationResult result=evalArgs(inputs,context,argValues);
  if (result != null)   return result;
  boolean boolResult=false;
switch (getFunctionId()) {
case ID_INTEGER_GREATER_THAN:
{
      long arg0=((IntegerAttribute)(argValues[0])).getValue();
      long arg1=((IntegerAttribute)(argValues[1])).getValue();
      boolResult=(arg0 > arg1);
      break;
    }
case ID_INTEGER_GREATER_THAN_OR_EQUAL:
{
    long arg0=((IntegerAttribute)(argValues[0])).getValue();
    long arg1=((IntegerAttribute)(argValues[1])).getValue();
    boolResult=(arg0 >= arg1);
    break;
  }
case ID_INTEGER_LESS_THAN:
{
  long arg0=((IntegerAttribute)(argValues[0])).getValue();
  long arg1=((IntegerAttribute)(argValues[1])).getValue();
  boolResult=(arg0 < arg1);
  break;
}
case ID_INTEGER_LESS_THAN_OR_EQUAL:
{
long arg0=((IntegerAttribute)(argValues[0])).getValue();
long arg1=((IntegerAttribute)(argValues[1])).getValue();
boolResult=(arg0 <= arg1);
break;
}
case ID_DOUBLE_GREATER_THAN:
{
double arg0=((DoubleAttribute)(argValues[0])).getValue();
double arg1=((DoubleAttribute)(argValues[1])).getValue();
boolResult=(doubleCompare(arg0,arg1) > 0);
break;
}
case ID_DOUBLE_GREATER_THAN_OR_EQUAL:
{
double arg0=((DoubleAttribute)(argValues[0])).getValue();
double arg1=((DoubleAttribute)(argValues[1])).getValue();
boolResult=(doubleCompare(arg0,arg1) >= 0);
break;
}
case ID_DOUBLE_LESS_THAN:
{
double arg0=((DoubleAttribute)(argValues[0])).getValue();
double arg1=((DoubleAttribute)(argValues[1])).getValue();
boolResult=(doubleCompare(arg0,arg1) < 0);
break;
}
case ID_DOUBLE_LESS_THAN_OR_EQUAL:
{
double arg0=((DoubleAttribute)(argValues[0])).getValue();
double arg1=((DoubleAttribute)(argValues[1])).getValue();
boolResult=(doubleCompare(arg0,arg1) <= 0);
break;
}
case ID_STRING_GREATER_THAN:
{
String arg0=((StringAttribute)(argValues[0])).getValue();
String arg1=((StringAttribute)(argValues[1])).getValue();
boolResult=(arg0.compareTo(arg1) > 0);
break;
}
case ID_STRING_GREATER_THAN_OR_EQUAL:
{
String arg0=((StringAttribute)(argValues[0])).getValue();
String arg1=((StringAttribute)(argValues[1])).getValue();
boolResult=(arg0.compareTo(arg1) >= 0);
break;
}
case ID_STRING_LESS_THAN:
{
String arg0=((StringAttribute)(argValues[0])).getValue();
String arg1=((StringAttribute)(argValues[1])).getValue();
boolResult=(arg0.compareTo(arg1) < 0);
break;
}
case ID_STRING_LESS_THAN_OR_EQUAL:
{
String arg0=((StringAttribute)(argValues[0])).getValue();
String arg1=((StringAttribute)(argValues[1])).getValue();
boolResult=(arg0.compareTo(arg1) <= 0);
break;
}
case ID_TIME_GREATER_THAN:
{
TimeAttribute arg0=(TimeAttribute)(argValues[0]);
TimeAttribute arg1=(TimeAttribute)(argValues[1]);
boolResult=(dateCompare(arg0.getValue(),arg0.getNanoseconds(),arg1.getValue(),arg1.getNanoseconds()) > 0);
break;
}
case ID_TIME_GREATER_THAN_OR_EQUAL:
{
TimeAttribute arg0=(TimeAttribute)(argValues[0]);
TimeAttribute arg1=(TimeAttribute)(argValues[1]);
boolResult=(dateCompare(arg0.getValue(),arg0.getNanoseconds(),arg1.getValue(),arg1.getNanoseconds()) >= 0);
break;
}
case ID_TIME_LESS_THAN:
{
TimeAttribute arg0=(TimeAttribute)(argValues[0]);
TimeAttribute arg1=(TimeAttribute)(argValues[1]);
boolResult=(dateCompare(arg0.getValue(),arg0.getNanoseconds(),arg1.getValue(),arg1.getNanoseconds()) < 0);
break;
}
case ID_TIME_LESS_THAN_OR_EQUAL:
{
TimeAttribute arg0=(TimeAttribute)(argValues[0]);
TimeAttribute arg1=(TimeAttribute)(argValues[1]);
boolResult=(dateCompare(arg0.getValue(),arg0.getNanoseconds(),arg1.getValue(),arg1.getNanoseconds()) <= 0);
break;
}
case ID_DATETIME_GREATER_THAN:
{
DateTimeAttribute arg0=(DateTimeAttribute)(argValues[0]);
DateTimeAttribute arg1=(DateTimeAttribute)(argValues[1]);
boolResult=(dateCompare(arg0.getValue(),arg0.getNanoseconds(),arg1.getValue(),arg1.getNanoseconds()) > 0);
break;
}
case ID_DATETIME_GREATER_THAN_OR_EQUAL:
{
DateTimeAttribute arg0=(DateTimeAttribute)(argValues[0]);
DateTimeAttribute arg1=(DateTimeAttribute)(argValues[1]);
boolResult=(dateCompare(arg0.getValue(),arg0.getNanoseconds(),arg1.getValue(),arg1.getNanoseconds()) >= 0);
break;
}
case ID_DATETIME_LESS_THAN:
{
DateTimeAttribute arg0=(DateTimeAttribute)(argValues[0]);
DateTimeAttribute arg1=(DateTimeAttribute)(argValues[1]);
boolResult=(dateCompare(arg0.getValue(),arg0.getNanoseconds(),arg1.getValue(),arg1.getNanoseconds()) < 0);
break;
}
case ID_DATETIME_LESS_THAN_OR_EQUAL:
{
DateTimeAttribute arg0=(DateTimeAttribute)(argValues[0]);
DateTimeAttribute arg1=(DateTimeAttribute)(argValues[1]);
boolResult=(dateCompare(arg0.getValue(),arg0.getNanoseconds(),arg1.getValue(),arg1.getNanoseconds()) <= 0);
break;
}
case ID_DATE_GREATER_THAN:
{
Date arg0=((DateAttribute)(argValues[0])).getValue();
Date arg1=((DateAttribute)(argValues[1])).getValue();
boolResult=(arg0.compareTo(arg1) > 0);
break;
}
case ID_DATE_GREATER_THAN_OR_EQUAL:
{
Date arg0=((DateAttribute)(argValues[0])).getValue();
Date arg1=((DateAttribute)(argValues[1])).getValue();
boolResult=(arg0.compareTo(arg1) >= 0);
break;
}
case ID_DATE_LESS_THAN:
{
Date arg0=((DateAttribute)(argValues[0])).getValue();
Date arg1=((DateAttribute)(argValues[1])).getValue();
boolResult=(arg0.compareTo(arg1) < 0);
break;
}
case ID_DATE_LESS_THAN_OR_EQUAL:
{
Date arg0=((DateAttribute)(argValues[0])).getValue();
Date arg1=((DateAttribute)(argValues[1])).getValue();
boolResult=(arg0.compareTo(arg1) <= 0);
break;
}
}
return EvaluationResult.getInstance(boolResult);
}
