{
  final Filter securityFilter=ECQL.toFilter("A > 10");
  final Filter requestFilter=ECQL.toFilter("B < 10");
  Format format=createNiceMock(Format.class);
  expect(format.getReadParameters()).andReturn(new ImageMosaicFormat().getReadParameters()).anyTimes();
  EasyMock.replay(format);
  GridCoverage2DReader reader=createNiceMock(GridCoverage2DReader.class);
  expect(reader.getFormat()).andReturn(format).anyTimes();
  expect(reader.read(isA(GeneralParameterValue[].class))).andAnswer(new IAnswer<GridCoverage2D>(){
    @Override public GridCoverage2D answer() throws Throwable {
      GeneralParameterValue[] params=(GeneralParameterValue[])EasyMock.getCurrentArguments()[0];
      ParameterValue param=(ParameterValue)params[0];
      Filter filter=(Filter)param.getValue();
      assertEquals(Predicates.and(requestFilter,securityFilter),filter);
      return null;
    }
  }
);
  EasyMock.replay(reader);
  CoverageAccessLimits accessLimits=new CoverageAccessLimits(CatalogMode.HIDE,securityFilter,null,null);
  SecuredGridCoverage2DReader secured=new SecuredGridCoverage2DReader(reader,WrapperPolicy.readOnlyHide(accessLimits));
  final ParameterValue pv=ImageMosaicFormat.FILTER.createValue();
  pv.setValue(requestFilter);
  secured.read(new GeneralParameterValue[]{pv});
}
