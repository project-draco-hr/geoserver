{
  List<Property<ProcessGroupInfo>> props=new ArrayList<GeoServerDataProvider.Property<ProcessGroupInfo>>();
  props.add(new BeanProperty<ProcessGroupInfo>("enabled","enabled"));
  props.add(new AbstractProperty<ProcessGroupInfo>("prefix"){
    @Override public Object getPropertyValue(    ProcessGroupInfo item){
      Class factoryClass=item.getFactoryClass();
      Set<String> prefixes=new HashSet<String>();
      ProcessFactory pf=GeoServerProcessors.getProcessFactory(factoryClass,false);
      if (pf != null) {
        Set<Name> names=pf.getNames();
        for (        Name name : names) {
          prefixes.add(name.getNamespaceURI());
        }
      }
      if (prefixes.isEmpty()) {
        return "";
      }
 else {
        List<String> pl=new ArrayList<String>(prefixes);
        Collections.sort(pl);
        StringBuilder sb=new StringBuilder();
        for (int i=0; i < pl.size(); i++) {
          sb.append(pl.get(i));
          if (i < pl.size() - 1) {
            sb.append(", ");
          }
        }
        return sb.toString();
      }
    }
  }
);
  props.add(new AbstractProperty<ProcessGroupInfo>("title"){
    @Override public Object getPropertyValue(    ProcessGroupInfo item){
      Class factoryClass=item.getFactoryClass();
      String title=null;
      ProcessFactory pf=GeoServerProcessors.getProcessFactory(factoryClass,false);
      if (pf != null) {
        title=pf.getTitle().toString(locale);
      }
      if (title == null) {
        title=factoryClass.getName();
      }
      return title;
    }
  }
);
  props.add(new AbstractProperty<ProcessGroupInfo>("summary"){
    @Override public Object getPropertyValue(    final ProcessGroupInfo item){
      return new LoadableDetachableModel<String>(){
        @Override protected String load(){
          if (item.getFilteredProcesses().isEmpty()) {
            return new ParamResourceModel("WPSAdminPage.filter.all",null).getString();
          }
          Class factoryClass=item.getFactoryClass();
          ProcessFactory pf=GeoServerProcessors.getProcessFactory(factoryClass,false);
          if (pf != null) {
            Set<Name> names=new HashSet<Name>(pf.getNames());
            int total=names.size();
            for (            ProcessInfo toRemove : item.getFilteredProcesses()) {
              if (!toRemove.isEnabled()) {
                names.remove(toRemove.getName());
              }
            }
            int active=names.size();
            if (active != total) {
              return new ParamResourceModel("WPSAdminPage.filter.active",null,active,total).getString();
            }
 else {
              return new ParamResourceModel("WPSAdminPage.filter.all",null).getString();
            }
          }
          return "?";
        }
      }
;
    }
  }
);
  props.add(new AbstractProperty<ProcessGroupInfo>("roles"){
    @Override public Object getPropertyValue(    ProcessGroupInfo item){
      return item.getRoles();
    }
    @Override public IModel getModel(    IModel itemModel){
      return new PropertyModel(itemModel,"roles");
    }
  }
);
  props.add(new PropertyPlaceholder("edit"));
  return props;
}
