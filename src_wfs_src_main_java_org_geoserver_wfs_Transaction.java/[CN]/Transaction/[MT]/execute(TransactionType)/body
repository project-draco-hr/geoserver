{
  if (request.getReleaseAction() == null) {
    request.setReleaseAction(AllSomeType.ALL_LITERAL);
  }
  for (Iterator it=transactionPlugins.iterator(); it.hasNext(); ) {
    TransactionPlugin tp=(TransactionPlugin)it.next();
    tp.beforeTransaction(request);
  }
  TransactionListenerMux multiplexer=new TransactionListenerMux();
  transaction=getDatastoreTransaction(request);
  Map stores=new HashMap();
  Map stores2=new HashMap();
  Map elementHandlers=gatherElementHandlers(request.getGroup());
  for (Iterator it=elementHandlers.entrySet().iterator(); it.hasNext(); ) {
    Map.Entry entry=(Map.Entry)it.next();
    EObject element=(EObject)entry.getKey();
    TransactionElementHandler handler=(TransactionElementHandler)entry.getValue();
    Map featureTypeInfos=new HashMap();
    QName[] typeNames=handler.getTypeNames(element);
    for (int i=0; i < typeNames.length; i++) {
      final QName typeName=typeNames[i];
      final String name=typeName.getLocalPart();
      final String namespaceURI;
      if (typeName.getNamespaceURI() != null) {
        namespaceURI=typeName.getNamespaceURI();
      }
 else {
        namespaceURI=catalog.getDefaultNamespace().getURI();
      }
      LOGGER.fine("Locating FeatureSource uri:'" + namespaceURI + "' name:'"+ name+ "'");
      final FeatureTypeInfo meta=catalog.getFeatureTypeByName(namespaceURI,name);
      if (meta == null) {
        String msg="Feature type '" + name + "' is not available: ";
        String handle=(String)EMFUtils.get(element,"handle");
        throw new WFSTransactionException(msg,(String)null,handle);
      }
      featureTypeInfos.put(typeName,meta);
    }
    handler.checkValidity(element,featureTypeInfos);
    for (Iterator m=featureTypeInfos.values().iterator(); m.hasNext(); ) {
      FeatureTypeInfo meta=(FeatureTypeInfo)m.next();
      String typeRef=meta.getStore().getName() + ":" + meta.getName();
      String URI=meta.getNamespace().getURI();
      QName elementName=new QName(URI,meta.getName(),meta.getNamespace().getPrefix());
      QName elementNameDefault=null;
      if (catalog.getDefaultNamespace().getURI().equals(URI)) {
        elementNameDefault=new QName(meta.getName());
      }
      LOGGER.fine("located FeatureType w/ typeRef '" + typeRef + "' and elementName '"+ elementName+ "'");
      if (stores.containsKey(elementName)) {
        continue;
      }
      try {
        FeatureSource<? extends FeatureType,? extends Feature> source=meta.getFeatureSource(null,null);
        if (source instanceof FeatureStore) {
          FeatureStore<? extends FeatureType,? extends Feature> store;
          store=(FeatureStore<? extends FeatureType,? extends Feature>)source;
          store.setTransaction(transaction);
          stores.put(elementName,source);
          if (elementNameDefault != null) {
            stores.put(elementNameDefault,source);
          }
          stores2.put(typeRef,source);
        }
 else {
          String msg=elementName + " is read-only";
          String handle=(String)EMFUtils.get(element,"handle");
          throw new WFSTransactionException(msg,(String)null,handle);
        }
      }
 catch (      IOException ioException) {
        String msg=elementName + " is not available: " + ioException.getLocalizedMessage();
        String handle=(String)EMFUtils.get(element,"handle");
        throw new WFSTransactionException(msg,ioException,handle);
      }
    }
  }
  String authorizationID=request.getLockId();
  if (authorizationID != null) {
    if (!wfs.getServiceLevel().getOps().contains(WFSInfo.Operation.LOCKFEATURE)) {
      throw new WFSException("Lock support is not enabled");
    }
    LOGGER.finer("got lockId: " + authorizationID);
    if (!lockExists(authorizationID)) {
      String mesg="Attempting to use a lockID that does not exist" + ", it has either expired or was entered wrong.";
      throw new WFSException(mesg,"InvalidParameterValue");
    }
    try {
      transaction.addAuthorization(authorizationID);
    }
 catch (    IOException ioException) {
      throw new WFSException("Authorization ID '" + authorizationID + "' not useable",ioException);
    }
  }
  TransactionResponseType result=WfsFactory.eINSTANCE.createTransactionResponseType();
  result.setTransactionResults(WfsFactory.eINSTANCE.createTransactionResultsType());
  result.getTransactionResults().setHandle(request.getHandle());
  result.setTransactionSummary(WfsFactory.eINSTANCE.createTransactionSummaryType());
  result.getTransactionSummary().setTotalInserted(BigInteger.valueOf(0));
  result.getTransactionSummary().setTotalUpdated(BigInteger.valueOf(0));
  result.getTransactionSummary().setTotalDeleted(BigInteger.valueOf(0));
  result.setInsertResults(WfsFactory.eINSTANCE.createInsertResultsType());
  boolean exception=false;
  try {
    for (Iterator it=elementHandlers.entrySet().iterator(); it.hasNext(); ) {
      Map.Entry entry=(Map.Entry)it.next();
      EObject element=(EObject)entry.getKey();
      TransactionElementHandler handler=(TransactionElementHandler)entry.getValue();
      handler.execute(element,request,stores,result,multiplexer);
    }
  }
 catch (  WFSTransactionException e) {
    exception=true;
    LOGGER.log(Level.SEVERE,"Transaction failed",e);
    ActionType action=WfsFactory.eINSTANCE.createActionType();
    if (e.getCode() != null) {
      action.setCode(e.getCode());
    }
 else {
      action.setCode("InvalidParameterValue");
    }
    action.setLocator(e.getLocator());
    action.setMessage(e.getMessage());
    result.getTransactionResults().getAction().add(action);
  }
  boolean committed=false;
  try {
    if (exception) {
      transaction.rollback();
    }
 else {
      for (Iterator it=transactionPlugins.iterator(); it.hasNext(); ) {
        TransactionPlugin tp=(TransactionPlugin)it.next();
        tp.beforeCommit(request);
      }
      transaction.commit();
      committed=true;
      if (request.getLockId() != null) {
        if (request.getReleaseAction() == AllSomeType.ALL_LITERAL) {
          lockRelease(request.getLockId());
        }
 else         if (request.getReleaseAction() == AllSomeType.SOME_LITERAL) {
          lockRefresh(request.getLockId());
        }
      }
    }
  }
  finally {
    transaction.close();
    transaction=null;
  }
  for (Iterator it=transactionPlugins.iterator(); it.hasNext(); ) {
    TransactionPlugin tp=(TransactionPlugin)it.next();
    tp.afterTransaction(request,committed);
  }
  if (result.getInsertResults().getFeature().isEmpty()) {
    InsertedFeatureType insertedFeature=WfsFactory.eINSTANCE.createInsertedFeatureType();
    insertedFeature.getFeatureId().add(filterFactory.featureId("none"));
    result.getInsertResults().getFeature().add(insertedFeature);
  }
  return result;
}
