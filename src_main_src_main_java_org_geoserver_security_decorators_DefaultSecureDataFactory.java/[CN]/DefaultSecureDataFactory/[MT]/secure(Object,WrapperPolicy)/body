{
  if (object == null)   return null;
  Class clazz=object.getClass();
  if (!canSecure(clazz))   throw new IllegalArgumentException("Don't know how to wrap objects of class " + object.getClass());
  if (DataStore.class.isAssignableFrom(clazz)) {
    return new ReadOnlyDataStore((DataStore)object,policy);
  }
 else   if (DataAccess.class.isAssignableFrom(clazz)) {
    return new ReadOnlyDataAccess((DataAccess)object,policy);
  }
  if (SimpleFeatureSource.class.isAssignableFrom(clazz)) {
    if ((policy.level == AccessLevel.READ_ONLY || policy.level == AccessLevel.METADATA || policy.level == AccessLevel.HIDDEN) && policy.response != Response.CHALLENGE) {
      return new SecuredSimpleFeatureSource((SimpleFeatureSource)object,policy);
    }
 else     if (SimpleFeatureLocking.class.isAssignableFrom(clazz)) {
      return new SecuredSimpleFeatureLocking((SimpleFeatureLocking)object,policy);
    }
 else     if (SimpleFeatureStore.class.isAssignableFrom(clazz)) {
      return new SecuredSimpleFeatureStore((SimpleFeatureStore)object,policy);
    }
 else     if (SimpleFeatureSource.class.isAssignableFrom(clazz)) {
      return new SecuredSimpleFeatureSource((SimpleFeatureSource)object,policy);
    }
  }
 else   if (FeatureSource.class.isAssignableFrom(clazz)) {
    if ((policy.level == AccessLevel.READ_ONLY || policy.level == AccessLevel.METADATA || policy.level == AccessLevel.HIDDEN) && policy.response != Response.CHALLENGE) {
      return new SecuredFeatureSource((FeatureSource)object,policy);
    }
 else     if (FeatureLocking.class.isAssignableFrom(clazz)) {
      return new SecuredFeatureLocking((FeatureLocking)object,policy);
    }
 else     if (FeatureStore.class.isAssignableFrom(clazz)) {
      return new SecuredFeatureStore((FeatureStore)object,policy);
    }
 else     if (FeatureSource.class.isAssignableFrom(clazz)) {
      return new SecuredFeatureSource((FeatureSource)object,policy);
    }
  }
  if (SimpleFeatureCollection.class.isAssignableFrom(clazz)) {
    return new SecuredSimpleFeatureCollection((SimpleFeatureCollection)object,policy);
  }
 else   if (FeatureCollection.class.isAssignableFrom(clazz)) {
    return new SecuredFeatureCollection((FeatureCollection)object,policy);
  }
 else   if (Iterator.class.isAssignableFrom(clazz)) {
    return new SecuredIterator((Iterator)object,policy);
  }
 else   if (SimpleFeatureIterator.class.isAssignableFrom(clazz)) {
    return new SecuredSimpleFeatureIterator((SimpleFeatureIterator)object);
  }
 else   if (FeatureIterator.class.isAssignableFrom(clazz)) {
    return new SecuredFeatureIterator((FeatureIterator)object);
  }
  if (AbstractGridCoverage2DReader.class.isAssignableFrom(clazz)) {
    return new SecuredGridCoverage2DReader((AbstractGridCoverage2DReader)object,policy);
  }
 else   if (AbstractGridFormat.class.isAssignableFrom(clazz)) {
    return new SecuredGridFormat((AbstractGridFormat)object,policy);
  }
  if (WebMapServer.class.isAssignableFrom(clazz)) {
    try {
      return new SecuredWebMapServer((WebMapServer)object);
    }
 catch (    Exception e) {
      throw new RuntimeException("Unexpected error wrapping the web map server",e);
    }
  }
  throw new IllegalArgumentException("Don't know how to wrap objects of class " + object.getClass());
}
