{
  List<Query> queries=request.getQueries();
  if (queries.isEmpty()) {
    throw new WFSException(request,"No query specified");
  }
  processStoredQueries(request);
  queries=request.getQueries();
  if (request.isQueryTypeNamesUnset()) {
    for (    Query q : queries) {
      if (!q.getTypeNames().isEmpty())       continue;
      if (q.getFilter() != null) {
        TypeNameExtractingVisitor v=new TypeNameExtractingVisitor(catalog);
        q.getFilter().accept(v,null);
        q.getTypeNames().addAll(v.getTypeNames());
      }
      if (q.getTypeNames().isEmpty()) {
        String msg="No feature types specified";
        throw new WFSException(request,msg);
      }
    }
  }
  BigInteger bi=request.getMaxFeatures();
  if (bi == null) {
    request.setMaxFeatures(BigInteger.valueOf(Integer.MAX_VALUE));
  }
  int maxFeatures=Math.min(request.getMaxFeatures().intValue(),wfs.getMaxFeatures());
  if (wfs.isHitsIgnoreMaxFeatures() && request.isResultTypeHits()) {
    maxFeatures=org.geotools.data.Query.DEFAULT_MAX;
  }
  List<Map<String,String>> viewParams=null;
  if (request.getViewParams() != null && request.getViewParams().size() > 0) {
    viewParams=request.getViewParams();
  }
  int count=0;
  int totalCount=0;
  int totalOffset=request.getStartIndex() != null ? request.getStartIndex().intValue() : -1;
  if (totalOffset == -1 && request.getVersion().startsWith("2") && wfs.isCiteCompliant()) {
    totalOffset=0;
  }
  int offset=totalOffset;
  List results=new ArrayList();
  List<CountExecutor> totalCountExecutors=new ArrayList<CountExecutor>();
  try {
    for (int i=0; (i < queries.size()) && (count < maxFeatures); i++) {
      Query query=queries.get(i);
      try {
        if (!query.getAliases().isEmpty()) {
          if (query.getAliases().size() != query.getTypeNames().size()) {
            throw new WFSException(request,String.format("Query specifies %d type names and %d " + "aliases, must be equal",query.getTypeNames().size(),query.getAliases().size()));
          }
        }
        List<FeatureTypeInfo> metas=new ArrayList();
        for (        QName typeName : query.getTypeNames()) {
          metas.add(featureTypeInfo(typeName,request));
        }
        FeatureTypeInfo meta=metas.get(0);
        List<List<String>> reqPropertyNames=parsePropertyNames(query,metas);
        NamespaceSupport ns=getNamespaceSupport();
        List<List<PropertyName>> propNames=new ArrayList();
        List<List<PropertyName>> allPropNames=new ArrayList();
        for (int j=0; j < metas.size(); j++) {
          List<String> propertyNames=reqPropertyNames.get(j);
          List<PropertyName> metaPropNames=null;
          List<PropertyName> metaAllPropNames=null;
          if (!propertyNames.isEmpty()) {
            metaPropNames=new ArrayList<PropertyName>();
            for (Iterator iter=propertyNames.iterator(); iter.hasNext(); ) {
              PropertyName propName=createPropertyName((String)iter.next(),ns);
              if (propName.evaluate(meta.getFeatureType()) == null) {
                String mesg="Requested property: " + propName + " is "+ "not available "+ "for "+ meta.getPrefixedName()+ ".  ";
                if (meta.getFeatureType() instanceof SimpleFeatureType) {
                  List<AttributeTypeInfo> atts=meta.attributes();
                  List attNames=new ArrayList(atts.size());
                  for (                  AttributeTypeInfo att : atts) {
                    attNames.add(att.getName());
                  }
                  mesg+="The possible propertyName values are: " + attNames;
                }
                throw new WFSException(request,mesg,"InvalidParameterValue");
              }
              metaPropNames.add(propName);
            }
            if (wfs.isFeatureBounding()) {
              metaAllPropNames=addGeometryProperties(meta,metaPropNames);
            }
 else {
              metaAllPropNames=metaPropNames;
            }
            if (meta.getFeatureType() instanceof SimpleFeatureType) {
              metaAllPropNames=DataUtilities.addMandatoryProperties((SimpleFeatureType)meta.getFeatureType(),metaAllPropNames);
              metaPropNames=DataUtilities.addMandatoryProperties((SimpleFeatureType)meta.getFeatureType(),metaPropNames);
            }
          }
          allPropNames.add(metaAllPropNames);
          propNames.add(metaPropNames);
        }
        List<Join> joins=null;
        String primaryAlias=null;
        QName primaryTypeName=query.getTypeNames().get(0);
        FeatureTypeInfo primaryMeta=metas.get(0);
        Filter filter=query.getFilter();
        if (filter == null && metas.size() > 1) {
          throw new WFSException(request,"Join query must specify a filter");
        }
        if (filter != null) {
          if (meta.getFeatureType() instanceof SimpleFeatureType) {
            if (metas.size() > 1) {
              if (!isValidJoinFilter(filter)) {
                throw new WFSException(request,"Unable to preform join with specified filter: " + filter);
              }
              JoinExtractingVisitor extractor=new JoinExtractingVisitor(metas,query.getAliases());
              filter.accept(extractor,null);
              primaryAlias=extractor.getPrimaryAlias();
              primaryMeta=extractor.getPrimaryFeatureType();
              primaryTypeName=new QName(primaryMeta.getNamespace().getURI(),primaryMeta.getNativeName());
              joins=extractor.getJoins();
              if (joins.size() != metas.size() - 1) {
                throw new WFSException(request,String.format("Query specified %d types but %d " + "join filters were found",metas.size(),extractor.getJoins().size()));
              }
              for (int j=1; j < metas.size(); j++) {
                Join join=joins.get(j - 1);
                if (join.getFilter() != null) {
                  validateFilter(join.getFilter(),query,metas.get(j),request);
                }
              }
              filter=extractor.getPrimaryFilter();
              if (filter != null) {
                validateFilter(filter,query,meta,request);
              }
            }
 else {
              validateFilter(filter,query,meta,request);
            }
          }
 else {
            BBOXNamespaceSettingVisitor filterVisitor=new BBOXNamespaceSettingVisitor(ns);
            filter.accept(filterVisitor,null);
          }
        }
        List<SortBy> sortBy=query.getSortBy();
        if (sortBy != null && !sortBy.isEmpty()) {
          validateSortBy(sortBy,meta,request);
        }
        Hints hints=null;
        if (joins != null) {
          hints=new Hints(ResourcePool.JOINS,joins);
        }
        FeatureSource<? extends FeatureType,? extends Feature> source=primaryMeta.getFeatureSource(null,hints);
        int queryMaxFeatures=maxFeatures - count;
        int metaMaxFeatures=maxFeatures(metas);
        if (metaMaxFeatures > 0 && metaMaxFeatures < queryMaxFeatures) {
          queryMaxFeatures=metaMaxFeatures;
        }
        Map<String,String> viewParam=viewParams != null ? viewParams.get(i) : null;
        org.geotools.data.Query gtQuery=toDataQuery(query,filter,offset,queryMaxFeatures,source,request,allPropNames.get(0),viewParam,joins,primaryTypeName,primaryAlias);
        LOGGER.fine("Query is " + query + "\n To gt2: "+ gtQuery);
        FeatureCollection<? extends FeatureType,? extends Feature> features=getFeatures(request,source,gtQuery);
        if (!(meta.getFeatureType() instanceof SimpleFeatureType)) {
          features.getSchema().getUserData().put("targetCrs",query.getSrsName());
          features.getSchema().getUserData().put("targetVersion",request.getVersion());
        }
        boolean calculateSize=true;
        calculateSize=!(("1.0".equals(request.getVersion()) || "1.0.0".equals(request.getVersion())) && (queries.size() == 1 || maxFeatures == Integer.MAX_VALUE));
        if (!calculateSize) {
          calculateSize=offset > 0 && i < queries.size() - 1;
        }
        int size=0;
        if (calculateSize) {
          size=features.size();
        }
        count+=size;
        if (offset > 0) {
          if (size > 0) {
            offset=0;
          }
 else {
            org.geotools.data.Query q2=toDataQuery(query,filter,0,queryMaxFeatures,source,request,allPropNames.get(0),viewParam,joins,primaryTypeName,primaryAlias);
            int size2=source.getCount(q2);
            if (size2 > 0) {
              offset=Math.max(0,offset - size2);
            }
          }
        }
        if (calculateSize && queryMaxFeatures == Integer.MAX_VALUE && offset == 0) {
          totalCountExecutors.add(new CountExecutor(size));
        }
 else {
          org.geotools.data.Query qTotal=toDataQuery(query,filter,0,Integer.MAX_VALUE,source,request,allPropNames.get(0),viewParam,joins,primaryTypeName,primaryAlias);
          totalCountExecutors.add(new CountExecutor(source,qTotal));
        }
        List<PropertyName> metaPropNames=propNames.get(0);
        if (features.getSchema() instanceof SimpleFeatureType && metaPropNames != null && metaPropNames.size() < allPropNames.get(0).size()) {
          String[] residualNames=new String[metaPropNames.size()];
          Iterator<PropertyName> it=metaPropNames.iterator();
          int j=0;
          while (it.hasNext()) {
            residualNames[j]=it.next().getPropertyName();
            j++;
          }
          SimpleFeatureType targetType=DataUtilities.createSubType((SimpleFeatureType)features.getSchema(),residualNames);
          features=new FeatureBoundsFeatureCollection((SimpleFeatureCollection)features,targetType);
        }
        results.add(features);
      }
 catch (      WFSException e) {
        if (query.getHandle() != null && (e.getLocator() == null || "GetFeature".equalsIgnoreCase(e.getLocator()))) {
          e.setLocator(query.getHandle());
        }
        throw e;
      }
    }
    if (!request.getVersion().startsWith("2")) {
      totalCount=-1;
    }
 else {
      if (count < maxFeatures) {
        totalCount=count;
      }
 else {
        for (        CountExecutor q : totalCountExecutors) {
          int result=q.getCount();
          if (result == -1) {
            totalCount=-1;
            break;
          }
 else {
            totalCount+=result;
          }
        }
      }
    }
  }
 catch (  IOException e) {
    throw new WFSException(request,"Error occurred getting features",e,request.getHandle());
  }
catch (  SchemaException e) {
    throw new WFSException(request,"Error occurred getting features",e,request.getHandle());
  }
  String lockId=null;
  if (request.isLockRequest()) {
    LockFeatureRequest lockRequest=request.createLockRequest();
    lockRequest.setExpiry(request.getExpiry());
    lockRequest.setHandle(request.getHandle());
    lockRequest.setLockActionAll();
    for (int i=0; i < queries.size(); i++) {
      Query query=queries.get(i);
      Lock lock=lockRequest.createLock();
      lock.setFilter(query.getFilter());
      lock.setHandle(query.getHandle());
      List<QName> typeNames=query.getTypeNames();
      lock.setTypeName(typeNames.get(0));
      lockRequest.addLock(lock);
    }
    LockFeature lockFeature=new LockFeature(wfs,catalog);
    lockFeature.setFilterFactory(filterFactory);
    LockFeatureResponse response=lockFeature.lockFeature(lockRequest);
    lockId=response.getLockId();
  }
  return buildResults(request,totalOffset,maxFeatures,count,totalCount,results,lockId);
}
