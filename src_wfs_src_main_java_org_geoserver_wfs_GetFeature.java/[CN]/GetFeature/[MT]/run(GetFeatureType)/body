{
  List queries=request.getQuery();
  if (queries.isEmpty()) {
    throw new WFSException("No query specified");
  }
  if (EMFUtils.isUnset(queries,"typeName")) {
    String msg="No feature types specified";
    throw new WFSException(msg);
  }
  if (request.getMaxFeatures() == null) {
    request.setMaxFeatures(BigInteger.valueOf(Integer.MAX_VALUE));
  }
  int maxFeatures=Math.min(request.getMaxFeatures().intValue(),wfs.getMaxFeatures());
  List<Map<String,String>> viewParams=null;
  if (request.getMetadata() != null) {
    viewParams=(List<Map<String,String>>)request.getMetadata().get(SQL_VIEW_PARAMS);
  }
  int count=0;
  List results=new ArrayList();
  try {
    for (int i=0; (i < request.getQuery().size()) && (count < maxFeatures); i++) {
      QueryType query=(QueryType)request.getQuery().get(i);
      FeatureTypeInfo meta=null;
      if (query.getTypeName().size() == 1) {
        meta=featureTypeInfo((QName)query.getTypeName().get(0));
      }
 else {
      }
      FeatureSource<? extends FeatureType,? extends Feature> source=meta.getFeatureSource(null,null);
      NamespaceSupport ns=getNamespaceSupport();
      List<PropertyName> propNames=null;
      List<PropertyName> allPropNames=null;
      if (!query.getPropertyName().isEmpty()) {
        propNames=new ArrayList<PropertyName>();
        for (Iterator iter=query.getPropertyName().iterator(); iter.hasNext(); ) {
          PropertyName propName=createPropertyName((String)iter.next(),ns);
          if (propName.evaluate(meta.getFeatureType()) == null) {
            String mesg="Requested property: " + propName + " is "+ "not available "+ "for "+ query.getTypeName()+ ".  ";
            if (meta.getFeatureType() instanceof SimpleFeatureType) {
              List<AttributeTypeInfo> atts=meta.attributes();
              List attNames=new ArrayList(atts.size());
              for (              AttributeTypeInfo att : atts) {
                attNames.add(att.getName());
              }
              mesg+="The possible propertyName values are: " + attNames;
            }
            throw new WFSException(mesg);
          }
          propNames.add(propName);
        }
        if (wfs.isFeatureBounding()) {
          allPropNames=addGeometryProperties(meta,propNames);
        }
 else {
          allPropNames=propNames;
        }
        if (meta.getFeatureType() instanceof SimpleFeatureType) {
          allPropNames=DataUtilities.addMandatoryProperties((SimpleFeatureType)meta.getFeatureType(),allPropNames);
          propNames=DataUtilities.addMandatoryProperties((SimpleFeatureType)meta.getFeatureType(),propNames);
        }
      }
      if (query.getFilter() != null && source.getSchema() instanceof SimpleFeatureType) {
        final FeatureType featureType=source.getSchema();
        ExpressionVisitor visitor=new AbstractExpressionVisitor(){
          public Object visit(          PropertyName name,          Object data){
            if (name.evaluate(featureType) == null) {
              throw new WFSException("Illegal property name: " + name.getPropertyName(),"InvalidParameterValue");
            }
            return name;
          }
        }
;
        query.getFilter().accept(new AbstractFilterVisitor(visitor),null);
        AbstractFilterVisitor fvisitor=new AbstractFilterVisitor(){
          protected Object visit(          BinarySpatialOperator filter,          Object data){
            PropertyName name=null;
            if (filter.getExpression1() instanceof PropertyName) {
              name=(PropertyName)filter.getExpression1();
            }
 else             if (filter.getExpression2() instanceof PropertyName) {
              name=(PropertyName)filter.getExpression2();
            }
            if (name != null) {
              AttributeDescriptor att=(AttributeDescriptor)name.evaluate(featureType);
              if (!(att instanceof GeometryDescriptor)) {
                throw new WFSException("Property " + name + " is not geometric","InvalidParameterValue");
              }
            }
            return filter;
          }
        }
;
        query.getFilter().accept(fvisitor,null);
        if (wfs.isCiteCompliant()) {
          if (query.getSrsName() != null) {
            final QueryType fquery=query;
            fvisitor=new AbstractFilterVisitor(){
              public Object visit(              BBOX filter,              Object data){
                if (filter.getSRS() != null && !fquery.getSrsName().toString().equals(filter.getSRS())) {
                  CoordinateReferenceSystem geo=DefaultGeographicCRS.WGS84;
                  GeneralEnvelope e=new GeneralEnvelope(new double[]{filter.getMinX(),filter.getMinY()},new double[]{filter.getMaxX(),filter.getMaxY()});
                  CoordinateReferenceSystem crs=null;
                  try {
                    crs=CRS.decode(filter.getSRS());
                    e=CRS.transform(CRS.findMathTransform(crs,geo,true),e);
                  }
 catch (                  Exception ex) {
                    throw new WFSException(ex);
                  }
                  try {
                    crs=CRS.decode(fquery.getSrsName().toString());
                  }
 catch (                  Exception ex) {
                    throw new WFSException(ex);
                  }
                  GeographicBoundingBox valid=(GeographicBoundingBox)crs.getDomainOfValidity().getGeographicElements().iterator().next();
                  if (e.getMinimum(0) < valid.getWestBoundLongitude() || e.getMinimum(0) > valid.getEastBoundLongitude() || e.getMaximum(0) < valid.getWestBoundLongitude() || e.getMaximum(0) > valid.getEastBoundLongitude() || e.getMinimum(1) < valid.getSouthBoundLatitude() || e.getMinimum(1) > valid.getNorthBoundLatitude() || e.getMaximum(1) < valid.getSouthBoundLatitude() || e.getMaximum(1) > valid.getNorthBoundLatitude()) {
                    throw new WFSException("bounding box out of valid range of crs","InvalidParameterValue");
                  }
                }
                return data;
              }
            }
;
            query.getFilter().accept(fvisitor,null);
          }
        }
      }
      int queryMaxFeatures=maxFeatures - count;
      if (meta.getMaxFeatures() > 0 && meta.getMaxFeatures() < queryMaxFeatures)       queryMaxFeatures=meta.getMaxFeatures();
      Map<String,String> viewParam=viewParams != null ? viewParams.get(i) : null;
      org.geotools.data.Query gtQuery=toDataQuery(query,queryMaxFeatures,source,request,allPropNames,viewParam);
      LOGGER.fine("Query is " + query + "\n To gt2: "+ gtQuery);
      FeatureCollection<? extends FeatureType,? extends Feature> features=getFeatures(request,source,gtQuery);
      if (("1.0".equals(request.getVersion()) || "1.0.0".equals(request.getVersion())) && (request.getQuery().size() == 1 || maxFeatures == Integer.MAX_VALUE)) {
      }
 else {
        count+=features.size();
      }
      if (features.getSchema() instanceof SimpleFeatureType && propNames != null && propNames.size() < allPropNames.size()) {
        String[] residualNames=new String[propNames.size()];
        Iterator<PropertyName> it=propNames.iterator();
        int j=0;
        while (it.hasNext()) {
          residualNames[j]=it.next().getPropertyName();
          j++;
        }
        SimpleFeatureType targetType=DataUtilities.createSubType((SimpleFeatureType)features.getSchema(),residualNames);
        features=new FeatureBoundsFeatureCollection((SimpleFeatureCollection)features,targetType);
      }
      results.add(features);
    }
  }
 catch (  IOException e) {
    throw new WFSException("Error occurred getting features",e,request.getHandle());
  }
catch (  SchemaException e) {
    throw new WFSException("Error occurred getting features",e,request.getHandle());
  }
  String lockId=null;
  if (request instanceof GetFeatureWithLockType) {
    GetFeatureWithLockType withLockRequest=(GetFeatureWithLockType)request;
    LockFeatureType lockRequest=WfsFactory.eINSTANCE.createLockFeatureType();
    lockRequest.setExpiry(withLockRequest.getExpiry());
    lockRequest.setHandle(withLockRequest.getHandle());
    lockRequest.setLockAction(AllSomeType.ALL_LITERAL);
    for (int i=0; i < request.getQuery().size(); i++) {
      QueryType query=(QueryType)request.getQuery().get(i);
      LockType lock=WfsFactory.eINSTANCE.createLockType();
      lock.setFilter(query.getFilter());
      lock.setHandle(query.getHandle());
      lock.setTypeName((QName)query.getTypeName().get(0));
      lockRequest.getLock().add(lock);
    }
    LockFeature lockFeature=new LockFeature(wfs,catalog);
    lockFeature.setFilterFactory(filterFactory);
    LockFeatureResponseType response=lockFeature.lockFeature(lockRequest);
    lockId=response.getLockId();
  }
  return buildResults(count,results,lockId);
}
