{
  GetFeatureType gfreq=WfsFactory.eINSTANCE.createGetFeatureType();
  gfreq.setBaseUrl(fInfoReq.getBaseUrl());
  final int size=features.getFeature().size();
  for (int i=0; i < size; i++) {
    FeatureCollection fc=(FeatureCollection)features.getFeature().get(i);
    Name name=FeatureCollectionDecorator.getName(fc);
    QName qname=new QName(name.getNamespaceURI(),name.getLocalPart());
    features.getFeature().add(fc);
    QueryType qt=WfsFactory.eINSTANCE.createQueryType();
    qt.setTypeName(Collections.singletonList(qname));
    String crs=GML2EncodingUtils.epsgCode(fc.getSchema().getCoordinateReferenceSystem());
    if (crs != null) {
      final String srsName="EPSG:" + crs;
      try {
        qt.setSrsName(new URI(srsName));
      }
 catch (      URISyntaxException e) {
        throw new IOException("Unable to determite coordinate system for featureType " + fc.getSchema().getName().getLocalPart() + ".  Schema told us '"+ srsName+ "'",e);
      }
    }
    gfreq.getQuery().add(qt);
  }
  Service serviceDesc=new Service("wms",null,null,Collections.EMPTY_LIST);
  Operation opDescriptor=new Operation("",serviceDesc,null,new Object[]{gfreq});
  final GeoServer gs=wms.getGeoServer();
  final String contentType=getContentType();
  GeoJSONGetFeatureResponse format=new GeoJSONGetFeatureResponse(gs,contentType);
  format.write(features,out,opDescriptor);
}
