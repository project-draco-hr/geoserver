{
  final ReferencedEnvelope renderingArea=mapContent.getRenderingArea();
  final AffineTransform worldToScreen=mapContent.getRenderingTransform();
  final Rectangle screenSize=new Rectangle(mapContent.getMapWidth(),mapContent.getMapHeight());
  final double mapScale;
  try {
    mapScale=RendererUtilities.calculateScale(renderingArea,mapContent.getMapWidth(),mapContent.getMapHeight(),null);
  }
 catch (  TransformException|FactoryException e) {
    throw Throwables.propagate(e);
  }
  TopologyBuilder topologyBuilder=new TopologyBuilder(worldToScreen,renderingArea);
  List<Layer> layers=mapContent.layers();
  for (  Layer layer : layers) {
    FeatureSource<FeatureType,Feature> featureSource;
    featureSource=(FeatureSource<FeatureType,Feature>)layer.getFeatureSource();
    FeatureType schema=featureSource.getSchema();
    GeometryDescriptor geometryDescriptor=schema.getGeometryDescriptor();
    if (null == geometryDescriptor) {
      continue;
    }
    Style style=layer.getStyle();
    List<FeatureTypeStyle> featureStyles=style.featureTypeStyles();
    List<LiteFeatureTypeStyle> styleList=createLiteFeatureTypeStyles(featureStyles,schema,mapScale,screenSize);
    Query styleQuery;
    try {
      CoordinateReferenceSystem mapCRS=renderingArea.getCoordinateReferenceSystem();
      CoordinateReferenceSystem featCrs=geometryDescriptor.getCoordinateReferenceSystem();
      styleQuery=getStyleQuery(featureSource,schema,styleList,renderingArea,mapCRS,featCrs,screenSize,geometryDescriptor,worldToScreen);
    }
 catch (    IllegalFilterException|FactoryException e1) {
      throw Throwables.propagate(e1);
    }
    Query query=styleQuery;
    query.setCoordinateSystem(renderingArea.getCoordinateReferenceSystem());
    query.setCoordinateSystemReproject(renderingArea.getCoordinateReferenceSystem());
    FeatureCollection<?,?> features=featureSource.getFeatures(query);
    Feature next;
    try (FeatureIterator<?> it=features.features()){
      while (it.hasNext()) {
        try {
          next=it.next();
        }
 catch (        IllegalStateException e) {
          if (e.getCause() instanceof ProjectionException) {
            continue;
          }
          throw e;
        }
        topologyBuilder.addFeature(next);
      }
    }
   }
  Topology topology=topologyBuilder.build();
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  TopoJSONEncoder encoder=new TopoJSONEncoder();
  Writer writer=new OutputStreamWriter(out,Charsets.UTF_8);
  encoder.encode(topology,writer);
  writer.flush();
  byte[] mapContents=out.toByteArray();
  RawMap map=new RawMap(mapContent,mapContents,MIME_TYPE);
  map.setResponseHeader("Content-Length",String.valueOf(mapContents.length));
  return map;
}
