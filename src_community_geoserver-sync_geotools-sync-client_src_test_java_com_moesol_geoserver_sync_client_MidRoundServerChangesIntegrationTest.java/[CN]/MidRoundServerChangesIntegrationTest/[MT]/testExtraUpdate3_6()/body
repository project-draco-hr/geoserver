{
  FeatureCollectionType client=make(f("F1",59),f("F5",60),f("F4",57),f("F3",58),f("F2",56),f("F6",61));
  FeatureCollectionType server=make(f("F1",63),f("F5",60),f("F4",64),f("F3",58),f("F2",56),f("F6",62));
  GeoserverClientSynchronizer synchronizer=new GeoserverClientSynchronizer(makeConfiguration(),"url",SimulatedRequestBuilder.POST_TEMPLATE);
  Map<Identifier,FeatureAccessor> clientMap=asMap(client);
  final SimulatedRequestBuilder builder=new SimulatedRequestBuilder(server);
  synchronizer.setRequestBuilder(builder);
  synchronizer.setRoundListener(new RoundListener(){
    @Override public void beforeRound(    int r){
    }
    @Override public void afterRound(    int r){
      if (r != 1) {
        return;
      }
      try {
        builder.setServer(make(f("F1",163),f("F5",160),f("F4",164),f("F3",158),f("F2",156),f("F6",162)));
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
    @Override public void afterSynchronize(){
    }
    @Override public void sha1Collision(){
    }
  }
);
  synchronizer.synchronize(clientMap);
  assertEquals(6,clientMap.size());
  assertEquals(0,synchronizer.getNumCreates());
  assertEquals(3,synchronizer.getNumUpdates());
  assertEquals(0,synchronizer.getNumDeletes());
  assertEquals(2,synchronizer.getNumRounds());
}
