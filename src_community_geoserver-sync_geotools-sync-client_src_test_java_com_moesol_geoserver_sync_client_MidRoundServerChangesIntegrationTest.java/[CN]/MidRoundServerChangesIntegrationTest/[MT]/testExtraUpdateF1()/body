{
  FeatureCollectionType client=make(f("F1",24203),f("F5",24206),f("F4",24208),f("F3",24207),f("F2",24209),f("F6",24201));
  FeatureCollectionType server=make(f("F1",24214),f("F5",24211),f("F4",24210),f("F3",24215),f("F2",24212),f("F6",24213));
  GeoserverClientSynchronizer synchronizer=new GeoserverClientSynchronizer(makeConfiguration(),"url",SimulatedRequestBuilder.POST_TEMPLATE);
  Map<Identifier,FeatureAccessor> clientMap=asMap(client);
  final SimulatedRequestBuilder builder=new SimulatedRequestBuilder(server);
  synchronizer.setRequestBuilder(builder);
  synchronizer.setRoundListener(new RoundListener(){
    @Override public void beforeRound(    int r){
    }
    @Override public void afterRound(    int r){
      if (r != 1) {
        return;
      }
      try {
        builder.setServer(make(f("F1",24218),f("F5",24219),f("F4",24210),f("F3",24217),f("F2",24216),f("F6",24213)));
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
    @Override public void afterSynchronize(){
    }
    @Override public void sha1Collision(){
    }
  }
);
  synchronizer.synchronize(clientMap);
  assertEquals(6,clientMap.size());
  assertEquals(0,synchronizer.getNumCreates());
  assertEquals(6,synchronizer.getNumUpdates());
  assertEquals(0,synchronizer.getNumDeletes());
  assertEquals(2,synchronizer.getNumRounds());
}
