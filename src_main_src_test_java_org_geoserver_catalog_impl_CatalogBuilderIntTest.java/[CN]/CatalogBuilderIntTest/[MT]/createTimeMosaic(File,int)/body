{
  if (mosaic.exists()) {
    if (mosaic.isDirectory()) {
      FileUtils.deleteDirectory(mosaic);
    }
 else {
      mosaic.delete();
    }
  }
  mosaic.mkdir();
  System.out.println(mosaic.getAbsolutePath());
  GridCoverageFactory factory=new GridCoverageFactory();
  BufferedImage bi=new BufferedImage(10,10,BufferedImage.TYPE_4BYTE_ABGR);
  ReferencedEnvelope envelope=new ReferencedEnvelope(0,10,0,10,CRS.decode("EPSG:4326"));
  GridCoverage2D test=factory.create("test",bi,envelope);
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  GeoTiffWriter writer=new GeoTiffWriter(bos);
  writer.write(test,null);
  writer.dispose();
  byte[] bytes=bos.toByteArray();
  for (int i=0; i < fileCount; i++) {
    String pad="";
    if (i < 10) {
      pad="000";
    }
 else     if (i < 100) {
      pad="00";
    }
 else     if (i < 1000) {
      pad="0";
    }
    File target=new File(mosaic,"tile_" + pad + i+ ".tiff");
    FileUtils.writeByteArrayToFile(target,bytes);
  }
  Properties p=new Properties();
  p.put("ElevationAttribute","elevation");
  p.put("Schema","*the_geom:Polygon,location:String,elevation:Integer");
  p.put("PropertyCollectors","IntegerFileNameExtractorSPI[elevationregex](elevation)");
  FileOutputStream fos=new FileOutputStream(new File(mosaic,"indexer.properties"));
  p.store(fos,null);
  fos.close();
  p.clear();
  p.put("regex","(?<=_)(\\d{4})");
  fos=new FileOutputStream(new File(mosaic,"elevationregex.properties"));
  p.store(fos,null);
  fos.close();
}
