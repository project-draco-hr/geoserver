{
  boolean failed=false;
  try {
    validator.validateOAuth2FilterConfig(config);
  }
 catch (  FilterConfigException ex) {
    assertEquals(OAuth2FilterConfigException.OAUTH2_CLIENT_ID_REQUIRED,ex.getId());
    assertEquals(0,ex.getArgs().length);
    LOGGER.info(ex.getMessage());
    failed=true;
  }
  assertTrue(failed);
  config.setRoleSource(PreAuthenticatedUserNameRoleSource.UserGroupService);
  failed=false;
  try {
    validator.validateOAuth2FilterConfig(config);
  }
 catch (  FilterConfigException ex) {
    assertEquals(OAuth2FilterConfigException.OAUTH2_CLIENT_ID_REQUIRED,ex.getId());
    assertEquals(0,ex.getArgs().length);
    LOGGER.info(ex.getMessage());
    failed=true;
  }
  assertTrue(failed);
  config.setUserGroupServiceName("blabla");
  failed=false;
  try {
    validator.validateOAuth2FilterConfig(config);
  }
 catch (  FilterConfigException ex) {
    assertEquals(OAuth2FilterConfigException.OAUTH2_CLIENT_ID_REQUIRED,ex.getId());
    assertEquals(0,ex.getArgs().length);
    LOGGER.info(ex.getMessage());
    failed=true;
  }
  assertTrue(failed);
  config.setRoleConverterName(null);
  config.setCheckTokenEndpointUrl(null);
  failed=false;
  try {
    validator.validateOAuth2FilterConfig(config);
  }
 catch (  OAuth2FilterConfigException ex) {
    assertEquals(OAuth2FilterConfigException.OAUTH2_CHECKTOKENENDPOINT_URL_REQUIRED,ex.getId());
    assertEquals(0,ex.getArgs().length);
    LOGGER.info(ex.getMessage());
    failed=true;
  }
  assertTrue(failed);
  config.setCheckTokenEndpointUrl("http://localhost/callback");
  config.setAccessTokenUri("blabal");
  failed=false;
  try {
    validator.validateOAuth2FilterConfig(config);
  }
 catch (  OAuth2FilterConfigException ex) {
    assertEquals(OAuth2FilterConfigException.OAUTH2_ACCESSTOKENURI_MALFORMED,ex.getId());
    assertEquals(0,ex.getArgs().length);
    LOGGER.info(ex.getMessage());
    failed=true;
  }
  assertTrue(failed);
  config.setAccessTokenUri("http://localhost/callback");
  failed=false;
  try {
    validator.validateOAuth2FilterConfig(config);
  }
 catch (  OAuth2FilterConfigException ex) {
    assertEquals(OAuth2FilterConfigException.OAUTH2_CLIENT_ID_REQUIRED,ex.getId());
    assertEquals(0,ex.getArgs().length);
    LOGGER.info(ex.getMessage());
    failed=true;
  }
  assertTrue(failed);
  config.setAccessTokenUri("https://localhost/callback");
  config.setUserAuthorizationUri("blabal");
  failed=false;
  try {
    validator.validateOAuth2FilterConfig(config);
  }
 catch (  OAuth2FilterConfigException ex) {
    assertEquals(OAuth2FilterConfigException.OAUTH2_USERAUTHURI_MALFORMED,ex.getId());
    assertEquals(0,ex.getArgs().length);
    LOGGER.info(ex.getMessage());
    failed=true;
  }
  assertTrue(failed);
  config.setUserAuthorizationUri("https://oauth2server/case");
  config.setLogoutUri("blbla");
  failed=false;
  try {
    validator.validateOAuth2FilterConfig(config);
  }
 catch (  OAuth2FilterConfigException ex) {
    assertEquals(OAuth2FilterConfigException.OAUTH2_URL_IN_LOGOUT_URI_MALFORMED,ex.getId());
    assertEquals(0,ex.getArgs().length);
    LOGGER.info(ex.getMessage());
    failed=true;
  }
  assertTrue(failed);
  config.setLogoutUri("http://localhost/gesoerver");
  config.setCliendId("oauth2clientid");
  config.setClientSecret("oauth2clientsecret");
  config.setScopes("email,profile");
  validator.validateOAuth2FilterConfig(config);
}
