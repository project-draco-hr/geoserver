{
  try {
    Resource f=data.get(Paths.path("monitoring","hibernate.properties"));
    if (!Resources.exists(f)) {
      Properties props=new Properties();
      props.putAll(factory.getJpaVendorAdapter().getJpaPropertyMap());
      props.putAll(factory.getJpaPropertyMap());
      Resource monitoring=data.get("monitoring");
      Resource file=monitoring.get("hibernate.properties");
      OutputStream fout=file.out();
      props.store(fout,"hibernate configuration");
      fout.flush();
      fout.close();
    }
 else {
      Properties props=new Properties();
      InputStream fin=f.in();
      props.load(fin);
      fin.close();
      HibernateJpaVendorAdapter adapter=(HibernateJpaVendorAdapter)factory.getJpaVendorAdapter();
      adapter.setDatabase(Database.valueOf((String)props.get("database")));
      adapter.setDatabasePlatform((String)props.get("databasePlatform"));
      adapter.setShowSql(Boolean.valueOf((String)props.getProperty("showSql")));
      adapter.setGenerateDdl(Boolean.valueOf((String)props.getProperty("generateDdl")));
      for (      Map.Entry e : props.entrySet()) {
        if (((String)e.getKey()).startsWith("hibernate")) {
          factory.getJpaPropertyMap().put((String)e.getKey(),e.getValue());
        }
      }
    }
  }
 catch (  IOException e) {
    LOGGER.log(Level.WARNING,e.getLocalizedMessage(),e);
  }
}
