{
  List<Range<Double>> ranges=Arrays.asList(Range.create(0d,true,10d,false),Range.create(10d,true,20d,true));
  StreamingSampleStats s1=new StreamingSampleStats();
  s1.setStatistic(Statistic.MEAN);
  s1.addRange(ranges.get(0));
  s1.offer(10d);
  StreamingSampleStats s2=new StreamingSampleStats();
  s2.setStatistic(Statistic.MEAN);
  s2.addRange(ranges.get(0));
  s2.offer(10d);
  StreamingSampleStats[] stats=new StreamingSampleStats[]{s1,s2};
  ClassificationStats classStats=new FeatureClassStats.Results(ranges,stats);
  ClassificationStatsPPIO ppio=new ClassificationStatsPPIO();
  ByteArrayOutputStream bout=new ByteArrayOutputStream();
  ppio.encode(classStats,bout);
  Document doc=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new ByteArrayInputStream(bout.toByteArray()));
  assertEquals("Results",doc.getDocumentElement().getNodeName());
  XMLAssert.assertXpathExists("/Results/Class[@lowerBound='0.0']",doc);
  XMLAssert.assertXpathExists("/Results/Class[@lowerBound='10.0']",doc);
}
