{
  DownloadEstimatorProcess limits=new DownloadEstimatorProcess(new StaticDownloadServiceConfiguration(),getGeoServer());
  final WPSResourceManager resourceManager=getResourceManager();
  DownloadProcess downloadProcess=new DownloadProcess(getGeoServer(),limits,resourceManager);
  Polygon roi=(Polygon)new WKTReader2().read("POLYGON ((0.0008993124415341 0.0006854377923293, 0.0008437876520112 0.0006283489242283, 0.0008566913002806 0.0005341131898971, 0.0009642217025257 0.0005188634237605, 0.0011198475210477 0.000574779232928, 0.0010932581852198 0.0006572843779233, 0.0008993124415341 0.0006854377923293))");
  FeatureTypeInfo ti=getCatalog().getFeatureTypeByName(getLayerId(MockData.BUILDINGS));
  SimpleFeatureCollection rawSource=(SimpleFeatureCollection)ti.getFeatureSource(null,null).getFeatures();
  File shpeZip=downloadProcess.execute(getLayerId(MockData.BUILDINGS),CQL.toFilter("ADDRESS = '123 Main Street'"),"application/zip",null,DefaultGeographicCRS.WGS84,roi,true,null,null,null,null,new NullProgressListener());
  Assert.assertNotNull(shpeZip);
  SimpleFeatureCollection rawTarget=(SimpleFeatureCollection)decodeShape(new FileInputStream(shpeZip));
  Assert.assertNotNull(rawTarget);
  Assert.assertEquals(1,rawTarget.size());
  SimpleFeature srcFeature=rawSource.features().next();
  SimpleFeature trgFeature=rawTarget.features().next();
  Assert.assertEquals(srcFeature.getAttribute("ADDRESS"),trgFeature.getAttribute("ADDRESS"));
  Geometry srcGeometry=(Geometry)srcFeature.getDefaultGeometry();
  Geometry trgGeometry=(Geometry)trgFeature.getDefaultGeometry();
  Assert.assertTrue("Target geometry clipped and included into the source one",srcGeometry.contains(trgGeometry));
}
