{
  super(id,model);
  final LayerInfo layer=(LayerInfo)model.getObject();
  final ResourceInfo resource=layer.getResource();
  final PropertyModel metadata=new PropertyModel(model,"resource.metadata");
  IModel time=new MetadataMapModel(metadata,ResourceInfo.TIME,DimensionInfo.class);
  if (time.getObject() == null) {
    time.setObject(new DimensionInfoImpl());
  }
  add(new DimensionEditor("time",time,resource,Date.class));
  IModel elevation=new MetadataMapModel(metadata,ResourceInfo.ELEVATION,DimensionInfo.class);
  if (elevation.getObject() == null) {
    elevation.setObject(new DimensionInfoImpl());
  }
  add(new DimensionEditor("elevation",elevation,resource,Number.class));
  final List<RasterDimensionModel> customDimensionModels=new ArrayList<RasterDimensionModel>();
  if (resource instanceof CoverageInfo) {
    CoverageInfo ci=(CoverageInfo)resource;
    try {
      GridCoverage2DReader reader=(GridCoverage2DReader)ci.getGridCoverageReader(null,null);
      ReaderDimensionsAccessor ra=new ReaderDimensionsAccessor(reader);
      for (      String domain : ra.getCustomDomains()) {
        boolean hasRange=ra.hasRange(domain);
        boolean hasResolution=ra.hasResolution(domain);
        RasterDimensionModel mm=new RasterDimensionModel(metadata,domain,DimensionInfo.class,hasRange,hasResolution);
        if (mm.getObject() == null) {
          mm.setObject(new DimensionInfoImpl());
        }
        customDimensionModels.add(mm);
      }
    }
 catch (    IOException e) {
      LOGGER.log(Level.SEVERE,"Failed to access coverage reader custom dimensions",e);
    }
  }
  RefreshingView customDimensionsEditor=new RefreshingView("customDimensions"){
    @Override protected Iterator getItemModels(){
      return customDimensionModels.iterator();
    }
    @Override protected void populateItem(    Item item){
      RasterDimensionModel model=(RasterDimensionModel)item.getModel();
      ParamResourceModel customDimension=new ParamResourceModel("customDimension",ResourceDimensionsTabPanelInfo.this);
      item.add(new Label("dimensionName",customDimension.getString() + ": " + model.getExpression()));
      DimensionEditor editor=new DimensionEditor("dimension",model,resource,String.class);
      editor.disablePresentationMode(DimensionPresentation.CONTINUOUS_INTERVAL);
      if (!model.hasRange && !model.hasResolution) {
        editor.disablePresentationMode(DimensionPresentation.DISCRETE_INTERVAL);
      }
      item.add(editor);
    }
  }
;
  add(customDimensionsEditor);
  customDimensionsEditor.setVisible(customDimensionModels.size() > 0);
}
