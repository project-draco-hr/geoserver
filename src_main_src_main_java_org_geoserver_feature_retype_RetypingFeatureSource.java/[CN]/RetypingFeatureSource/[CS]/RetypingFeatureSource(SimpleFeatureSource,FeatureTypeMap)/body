{
  this.wrapped=wrapped;
  this.typeMap=typeMap;
  this.store=new RetypingDataStore((DataStore)wrapped.getDataStore()){
    @Override protected String transformFeatureTypeName(    String originalName){
      if (typeMap.getOriginalName().equals(originalName)) {
        return typeMap.getName();
      }
 else       if (typeMap.getName().equals(originalName)) {
        return null;
      }
 else {
        return originalName;
      }
    }
    @Override protected SimpleFeatureType transformFeatureType(    SimpleFeatureType original) throws IOException {
      if (typeMap.getOriginalName().equals(original)) {
        return typeMap.featureType;
      }
 else {
        return super.transformFeatureType(original);
      }
    }
    @Override public String[] getTypeNames() throws IOException {
      Map<String,FeatureTypeMap> forwardMapLocal=new ConcurrentHashMap<String,FeatureTypeMap>();
      Map<String,FeatureTypeMap> backwardsMapLocal=new ConcurrentHashMap<String,FeatureTypeMap>();
      forwardMapLocal.put(typeMap.getOriginalName(),typeMap);
      backwardsMapLocal.put(typeMap.getName(),typeMap);
      forwardMap=forwardMapLocal;
      backwardsMap=backwardsMapLocal;
      return new String[]{typeMap.getName()};
    }
  }
;
}
