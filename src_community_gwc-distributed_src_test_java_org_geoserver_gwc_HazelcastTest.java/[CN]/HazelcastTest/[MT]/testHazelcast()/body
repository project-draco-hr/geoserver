{
  Config config=new Config();
  MapConfig mapConfig=new MapConfig(HazelcastCacheProvider.HAZELCAST_MAP_DEFINITION);
  MaxSizeConfig maxSizeConf=new MaxSizeConfig(16,MaxSizePolicy.USED_HEAP_SIZE);
  mapConfig.setMaxSizeConfig(maxSizeConf);
  mapConfig.setEvictionPolicy(EvictionPolicy.LRU);
  config.addMapConfig(mapConfig);
  config.getNetworkConfig().getJoin().getMulticastConfig().setEnabled(false);
  config.getNetworkConfig().getJoin().getTcpIpConfig().setEnabled(true);
  config.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(new ArrayList<String>(){
{
      add("127.0.0.1");
    }
  }
);
  config.getNetworkConfig().getInterfaces().addInterface("127.0.0.1");
  HazelcastInstance instance1=Hazelcast.newHazelcastInstance(config);
  HazelcastLoader loader1=new HazelcastLoader();
  loader1.setInstance(instance1);
  loader1.afterPropertiesSet();
  HazelcastCacheProvider cacheProvider1=new HazelcastCacheProvider(loader1);
  HazelcastInstance instance2=Hazelcast.newHazelcastInstance(config);
  HazelcastLoader loader2=new HazelcastLoader();
  loader2.setInstance(instance2);
  loader2.afterPropertiesSet();
  HazelcastCacheProvider cacheProvider2=new HazelcastCacheProvider(loader2);
  GWCConfig gwcConfig=new GWCConfig();
  gwcConfig.setInnerCachingEnabled(true);
  gwcConfig.setEnabledPersistence(false);
  blobStore.setChanged(gwcConfig,false);
  blobStore.setCache(cacheProvider1);
  assertTrue(blobStore.getDelegate() instanceof MemoryBlobStore);
  assertTrue(((MemoryBlobStore)blobStore.getDelegate()).getStore() instanceof NullBlobStore);
  Resource bytes=new ByteArrayResource("1 2 3 4 5 6 test".getBytes());
  long[] xyz={1L,2L,3L};
  Map<String,String> parameters=new HashMap<String,String>();
  parameters.put("a","x");
  parameters.put("b","??");
  TileObject to=TileObject.createCompleteTileObject("test:123123 112",xyz,"EPSG:4326","image/jpeg",parameters,bytes);
  to.setId(11231231);
  blobStore.put(to);
  TileObject to2=TileObject.createQueryTileObject("test:123123 112",xyz,"EPSG:4326","image/jpeg",parameters);
  to2.setId(11231231);
  blobStore.get(to2);
  assertEquals(to.getBlobFormat(),to2.getBlobFormat());
  InputStream is=to.getBlob().getInputStream();
  InputStream is2=to2.getBlob().getInputStream();
  checkInputStreams(is,is2);
  TileObject to3=cacheProvider1.getTileObj(to);
  assertNotNull(to3);
  is=to.getBlob().getInputStream();
  InputStream is3=to3.getBlob().getInputStream();
  checkInputStreams(is,is3);
  TileObject to4=cacheProvider2.getTileObj(to);
  assertNotNull(to4);
  is=to.getBlob().getInputStream();
  InputStream is4=to4.getBlob().getInputStream();
  checkInputStreams(is,is4);
  TileObject to5=TileObject.createQueryTileObject("test:123123 112",xyz,"EPSG:4326","image/jpeg",parameters);
  blobStore.delete(to5);
  TileObject to6=TileObject.createQueryTileObject("test:123123 112",xyz,"EPSG:4326","image/jpeg",parameters);
  assertFalse(blobStore.get(to6));
  assertNull(cacheProvider1.getTileObj(to6));
  assertNull(cacheProvider2.getTileObj(to6));
  cacheProvider1.destroy();
  cacheProvider2.destroy();
}
