{
  ImportContext context=importer.getContext(id);
  ImportTask task=context.getTasks().get(0);
  assertEquals(ImportTask.State.READY,task.getState());
  JSONObjectBuilder builder=new JSONObjectBuilder();
  builder.object().key("task").object().key("target").object().key("dataStore").object().key("name").value("postgis").key("workspace").object().key("name").value(getCatalog().getDefaultWorkspace().getName()).endObject().endObject().endObject().endObject().endObject();
  String payload=builder.buildObject().toString();
  MockHttpServletResponse resp=putAsServletResponse("/rest/imports/" + id + "/tasks/0",payload,"application/json");
  assertEquals(204,resp.getStatusCode());
  if (addIndex) {
    context=importer.getContext(id);
    context.getTasks().get(0).getTransform().add(new CreateIndexTransform("CAT_ID"));
    importer.changed(context);
  }
  resp=postAsServletResponse("/rest/imports/" + id,"","application/text");
  assertEquals(204,resp.getStatusCode());
  JSONObject json=(JSONObject)getAsJSON("/rest/imports/" + id + "/tasks/0/items/0");
  json=json.getJSONObject("item");
  assertEquals("COMPLETE",json.get("state"));
  json=(JSONObject)getAsJSON("/rest/workspaces/" + getCatalog().getDefaultWorkspace().getName() + "/datastores/postgis/featuretypes.json");
  JSONObject featureTypes=(JSONObject)json.get("featureTypes");
  JSONArray featureType=(JSONArray)featureTypes.get("featureType");
  JSONObject type=(JSONObject)featureType.get(0);
  assertTrue(type.getString("name").startsWith(expectedTypeName));
  File archive=importer.getArchiveFile(context);
  assertTrue(archive.exists());
}
