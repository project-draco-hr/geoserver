{
  if ("SAFE".equals(name.toUpperCase())) {
    return safePalette;
  }
  final PaletteCacheEntry entry=(PaletteCacheEntry)paletteCache.get(name);
  if (entry != null) {
    if (entry.isStale()) {
      paletteCache.remove(name);
    }
 else {
      return entry.icm;
    }
  }
  GeoServerResourceLoader loader=GeoServerExtensions.bean(GeoServerResourceLoader.class);
  Resource palettes=loader.get("palettes");
  Set<String> names=new HashSet<String>();
  names.addAll(Arrays.asList(new String[]{name + ".gif",name + ".png",name + ".pal",name + ".tif"}));
  List<Resource> paletteFiles=new ArrayList<Resource>();
  for (  Resource item : palettes.list()) {
    if (names.contains(item.name().toLowerCase())) {
      paletteFiles.add(item);
    }
  }
  for (  Resource resource : paletteFiles) {
    final String fileName=resource.name();
    if (fileName.endsWith("pal")) {
      final IndexColorModel icm=new PALFileLoader(resource).getIndexColorModel();
      if (icm != null) {
        paletteCache.put(name,new PaletteCacheEntry(resource,icm));
        return icm;
      }
    }
 else {
      ImageInputStream iis=ImageIO.createImageInputStream(resource.in());
      final Iterator it=ImageIO.getImageReaders(iis);
      if (it.hasNext()) {
        final ImageReader reader=(ImageReader)it.next();
        reader.setInput(iis);
        final ColorModel cm=((ImageTypeSpecifier)reader.getImageTypes(0).next()).getColorModel();
        if (cm instanceof IndexColorModel) {
          final IndexColorModel icm=(IndexColorModel)cm;
          paletteCache.put(name,new PaletteCacheEntry(resource,icm));
          return icm;
        }
      }
    }
    LOG.warning("Skipping paletteInverter file " + fileName + " since color model is not indexed (no 256 colors paletteInverter)");
  }
  return null;
}
