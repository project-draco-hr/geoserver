{
  @SuppressWarnings("rawtypes") Form<?> form=new Form("form");
  add(form);
  String location=GeoServerExtensions.getProperty(LoggingUtils.GEOSERVER_LOG_LOCATION);
  if (location == null) {
    location=getGeoServerApplication().getGeoServer().getLogging().getLocation();
  }
  if (location == null) {
    GeoServerResourceLoader loader=getGeoServerApplication().getResourceLoader();
    logFile=loader.get("logs").get("geoserver.log").file();
    location=logFile.getAbsolutePath();
  }
 else {
    logFile=new File(location);
    if (!logFile.isAbsolute()) {
      GeoServerDataDirectory dd=getGeoServerApplication().getBeanOfType(GeoServerDataDirectory.class);
      logFile=dd.get(Paths.convert(logFile.getPath())).file();
    }
  }
  if (!logFile.exists()) {
    error("Could not find the GeoServer log file: " + logFile.getAbsolutePath());
  }
  try {
    if (params.getNamedKeys().contains(LINES)) {
      if (params.get(LINES).toInt() > 0) {
        lines=params.get(LINES).toInt();
      }
    }
  }
 catch (  Exception e) {
    LOGGER.log(Level.WARNING,"Error parsing the lines parameter: ",params.get(LINES).toString());
  }
  form.add(new SubmitLink("refresh"){
    @Override public void onSubmit(){
      setResponsePage(LogPage.class,new PageParameters().add(LINES,lines));
    }
  }
);
  TextField lines=new TextField("lines",new PropertyModel(this,"lines"));
  lines.add(RangeValidator.minimum(1));
  form.add(lines);
  TextArea logs=new TextArea("logs",new GSLogsModel());
  logs.setOutputMarkupId(true);
  logs.setMarkupId("logs");
  add(logs);
  add(new Link("download"){
    @Override public void onClick(){
      IResourceStream stream=new FileResourceStream(logFile){
        public String getContentType(){
          return "text/plain";
        }
      }
;
      IRequestHandler handler=new ResourceStreamRequestHandler(stream){
        @Override protected void configure(        ResourceStreamResource resource){
          resource.setFileName("geoserver.log");
          resource.setContentDisposition(ContentDisposition.ATTACHMENT);
          super.configure(resource);
        }
      }
;
      RequestCycle.get().scheduleRequestHandlerAfterCurrent(handler);
    }
  }
);
}
