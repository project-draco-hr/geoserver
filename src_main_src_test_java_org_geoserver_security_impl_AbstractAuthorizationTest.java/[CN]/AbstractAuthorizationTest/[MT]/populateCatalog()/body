{
  layers=Arrays.asList(statesLayer,roadsLayer,landmarksLayer,basesLayer,arcGridLayer);
  featureTypes=new ArrayList<FeatureTypeInfo>();
  coverages=new ArrayList<CoverageInfo>();
  for (  LayerInfo layer : layers) {
    if (layer.getResource() instanceof FeatureTypeInfo)     featureTypes.add((FeatureTypeInfo)layer.getResource());
 else     coverages.add((CoverageInfo)layer.getResource());
  }
  workspaces=Arrays.asList(toppWs,nurcWs);
  catalog=createNiceMock(Catalog.class);
  expect(catalog.getFeatureTypeByName("topp:states")).andReturn((FeatureTypeInfo)states).anyTimes();
  expect(catalog.getResourceByName("topp:states",FeatureTypeInfo.class)).andReturn((FeatureTypeInfo)states).anyTimes();
  expect(catalog.getLayerByName("topp:states")).andReturn(statesLayer).anyTimes();
  expect(catalog.getCoverageByName("nurc:arcgrid")).andReturn((CoverageInfo)arcGrid).anyTimes();
  expect(catalog.getResourceByName("nurc:arcgrid",CoverageInfo.class)).andReturn((CoverageInfo)arcGrid).anyTimes();
  expect(catalog.getFeatureTypeByName("topp:roads")).andReturn((FeatureTypeInfo)roads).anyTimes();
  expect(catalog.getLayerByName("topp:roads")).andReturn(roadsLayer).anyTimes();
  expect(catalog.getFeatureTypeByName("topp:landmarks")).andReturn((FeatureTypeInfo)landmarks).anyTimes();
  expect(catalog.getFeatureTypeByName("topp:bases")).andReturn((FeatureTypeInfo)bases).anyTimes();
  expect(catalog.getDataStoreByName("states")).andReturn((DataStoreInfo)statesStore).anyTimes();
  expect(catalog.getDataStoreByName("roads")).andReturn((DataStoreInfo)roadsStore).anyTimes();
  expect(catalog.getCoverageStoreByName("arcGrid")).andReturn((CoverageStoreInfo)arcGridStore).anyTimes();
  expect(catalog.getLayers()).andReturn(layers).anyTimes();
  expect(catalog.getFeatureTypes()).andReturn(featureTypes).anyTimes();
  expect(catalog.getCoverages()).andReturn(coverages).anyTimes();
  expect(catalog.getWorkspaces()).andReturn(workspaces).anyTimes();
  expect(catalog.getWorkspaceByName("topp")).andReturn(toppWs).anyTimes();
  expect(catalog.getWorkspaceByName("nurc")).andReturn(nurcWs).anyTimes();
  expect(catalog.getStyles()).andReturn(Arrays.asList(pointStyle,lineStyle)).anyTimes();
  expect(catalog.getStylesByWorkspace(toppWs)).andReturn(Arrays.asList(pointStyle,lineStyle)).anyTimes();
  expect(catalog.getStylesByWorkspace(nurcWs)).andReturn(Arrays.asList(pointStyle)).anyTimes();
  expect(catalog.getLayerGroups()).andReturn(Arrays.asList(layerGroupGlobal,layerGroupTopp,layerGroupWithSomeLockedLayer)).anyTimes();
  expect(catalog.getLayerGroupsByWorkspace("topp")).andReturn(Arrays.asList(new LayerGroupInfo[]{layerGroupTopp,layerGroupWithSomeLockedLayer})).anyTimes();
  expect(catalog.getLayerGroupsByWorkspace("nurc")).andReturn(Arrays.asList(layerGroupGlobal)).anyTimes();
  expect(catalog.getLayerGroupByName("topp",layerGroupWithSomeLockedLayer.getName())).andReturn(layerGroupWithSomeLockedLayer).anyTimes();
  replay(catalog);
}
