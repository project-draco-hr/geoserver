{
  SecurityManagerConfig config=new SecurityManagerConfig();
  config.setRoleServiceName(XMLRoleService.DEFAULT_NAME);
  config.setConfigPasswordEncrypterName(getPBEPasswordEncoder().getName());
  config.getAuthProviderNames().add(GeoServerAuthenticationProvider.DEFAULT_NAME);
  getSecurityManager().saveSecurityConfig(config);
  boolean failed=false;
  try {
    config.setConfigPasswordEncrypterName("abc");
    getSecurityManager().saveSecurityConfig(config);
  }
 catch (  SecurityConfigException ex) {
    assertEquals(INVALID_PASSWORD_ENCODER_$1,ex.getId());
    LOGGER.info(ex.getMessage());
    failed=true;
  }
  assertTrue(failed);
  failed=false;
  try {
    config.setConfigPasswordEncrypterName(null);
    getSecurityManager().saveSecurityConfig(config);
  }
 catch (  SecurityConfigException ex) {
    assertEquals(PASSWORD_ENCODER_REQUIRED,ex.getId());
    LOGGER.info(ex.getMessage());
    failed=true;
  }
  assertTrue(failed);
  if (getSecurityManager().isStrongEncryptionAvailable() == false) {
    config.setConfigPasswordEncrypterName(getStrongPBEPasswordEncoder().getName());
    failed=false;
    try {
      getSecurityManager().saveSecurityConfig(config);
    }
 catch (    SecurityConfigException ex) {
      assertEquals(INVALID_STRONG_CONFIG_PASSWORD_ENCODER,ex.getId());
      LOGGER.info(ex.getMessage());
      failed=true;
    }
    assertTrue(failed);
  }
  config.setConfigPasswordEncrypterName(getPBEPasswordEncoder().getName());
  config.setRoleServiceName("XX");
  failed=false;
  try {
    getSecurityManager().saveSecurityConfig(config);
  }
 catch (  SecurityConfigException ex) {
    assertEquals(ROLE_SERVICE_NOT_FOUND_$1,ex.getId());
    LOGGER.info(ex.getMessage());
    failed=true;
  }
  assertTrue(failed);
  config.setRoleServiceName(null);
  failed=false;
  try {
    getSecurityManager().saveSecurityConfig(config);
  }
 catch (  SecurityConfigException ex) {
    assertEquals(ROLE_SERVICE_NOT_FOUND_$1,ex.getId());
    LOGGER.info(ex.getMessage());
    failed=true;
  }
  assertTrue(failed);
  config.setRoleServiceName(XMLRoleService.DEFAULT_NAME);
  config.getAuthProviderNames().add("XX");
  failed=false;
  try {
    getSecurityManager().saveSecurityConfig(config);
  }
 catch (  SecurityConfigException ex) {
    assertEquals(AUTH_PROVIDER_NOT_FOUND_$1,ex.getId());
    LOGGER.info(ex.getMessage());
    failed=true;
  }
  assertTrue(failed);
  config.getAuthProviderNames().remove("XX");
}
