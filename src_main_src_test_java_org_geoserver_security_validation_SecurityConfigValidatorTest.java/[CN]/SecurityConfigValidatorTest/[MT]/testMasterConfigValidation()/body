{
  SecurityManagerConfig config=new SecurityManagerConfig();
  config.setRoleServiceName(XMLRoleService.DEFAULT_NAME);
  config.setConfigPasswordEncrypterName(getPBEPasswordEncoder().getName());
  config.getAuthProviderNames().add(GeoServerAuthenticationProvider.DEFAULT_NAME);
  SecurityConfigValidator validator=new SecurityConfigValidator(getSecurityManager());
  validator.validateManagerConfig(config);
  try {
    config.setConfigPasswordEncrypterName("abc");
    validator.validateManagerConfig(config);
    fail("invalid password encoder should fail");
  }
 catch (  SecurityConfigException ex) {
    assertEquals(INVALID_PASSWORD_ENCODER_$1,ex.getId());
  }
  try {
    config.setConfigPasswordEncrypterName(null);
    validator.validateManagerConfig(config);
    fail("no password encoder should fail");
  }
 catch (  SecurityConfigException ex) {
    assertEquals(PASSWORD_ENCODER_REQUIRED,ex.getId());
  }
  if (getSecurityManager().isStrongEncryptionAvailable() == false) {
    config.setConfigPasswordEncrypterName(getStrongPBEPasswordEncoder().getName());
    try {
      validator.validateManagerConfig(config);
      fail("invalid strong password encoder should fail");
    }
 catch (    SecurityConfigException ex) {
      assertEquals(INVALID_STRONG_CONFIG_PASSWORD_ENCODER,ex.getId());
    }
  }
  config.setConfigPasswordEncrypterName(getPBEPasswordEncoder().getName());
  config.setRoleServiceName("XX");
  try {
    validator.validateManagerConfig(config);
    fail("unknown role service should fail");
  }
 catch (  SecurityConfigException ex) {
    assertEquals(ROLE_SERVICE_NOT_FOUND_$1,ex.getId());
  }
  config.setRoleServiceName(null);
  try {
    validator.validateManagerConfig(config);
    fail("null role service should fail");
  }
 catch (  SecurityConfigException ex) {
    assertEquals(ROLE_SERVICE_NOT_FOUND_$1,ex.getId());
  }
  config.setRoleServiceName(XMLRoleService.DEFAULT_NAME);
  config.getAuthProviderNames().add("XX");
  try {
    validator.validateManagerConfig(config);
    fail("unknown auth provider should fail");
  }
 catch (  SecurityConfigException ex) {
    assertEquals(AUTH_PROVIDER_NOT_FOUND_$1,ex.getId());
  }
}
