{
  boolean fail;
  SecurityConfigValidator validator=new SecurityConfigValidator(getSecurityManager());
  Class<?>[] extensionPoints=new Class<?>[]{GeoServerUserGroupService.class,GeoServerRoleService.class,PasswordValidator.class,GeoServerAuthenticationProvider.class,GeoServerSecurityFilter.class};
  for (  Class<?> ep : extensionPoints) {
    fail=false;
    try {
      validator.checkExtensionPont(ep,"a.b.c");
    }
 catch (    SecurityConfigException ex) {
      assertEquals(ex.getErrorId(),SEC_ERR_20);
      assertEquals(ex.getArgs()[0],"a.b.c");
      LOGGER.info(ex.getMessage());
      fail=true;
    }
    assertTrue(fail);
    fail=false;
    try {
      validator.checkExtensionPont(ep,"java.lang.String");
    }
 catch (    SecurityConfigException ex) {
      assertEquals(ex.getErrorId(),SEC_ERR_21);
      assertEquals(ex.getArgs()[0],ep);
      assertEquals(ex.getArgs()[1],"java.lang.String");
      LOGGER.info(ex.getMessage());
      fail=true;
    }
    assertTrue(fail);
    fail=false;
    String className=ep == GeoServerUserGroupService.class ? null : "";
    try {
      validator.checkExtensionPont(ep,className);
    }
 catch (    SecurityConfigException ex) {
      assertEquals(ex.getErrorId(),SEC_ERR_25);
      assertEquals(0,ex.getArgs().length);
      LOGGER.info(ex.getMessage());
      fail=true;
    }
    assertTrue(fail);
    fail=false;
    String name=ep == GeoServerUserGroupService.class ? null : "";
    try {
      validator.checkServiceName(ep,name);
    }
 catch (    SecurityConfigException ex) {
      assertEquals(ex.getErrorId(),SEC_ERR_22);
      assertEquals(0,ex.getArgs().length);
      LOGGER.info(ex.getMessage());
      fail=true;
    }
    assertTrue(fail);
  }
  fail=false;
  try {
    validator.validateAddPasswordPolicy(getPolicyConfig(PasswordValidator.DEFAULT_NAME,PasswordValidatorImpl.class,1,10));
  }
 catch (  SecurityConfigException ex) {
    assertEquals(SEC_ERR_23b,ex.getErrorId());
    assertEquals(ex.getArgs()[0],PasswordValidator.DEFAULT_NAME);
    LOGGER.info(ex.getMessage());
    fail=true;
  }
  assertTrue(fail);
  PasswordPolicyConfig pwConfig=getPolicyConfig("default2",PasswordValidatorImpl.class,1,10);
  fail=false;
  try {
    validator.validateModifiedPasswordPolicy(pwConfig,pwConfig);
  }
 catch (  SecurityConfigException ex) {
    assertEquals(SEC_ERR_24b,ex.getErrorId());
    assertEquals(ex.getArgs()[0],"default2");
    LOGGER.info(ex.getMessage());
    fail=true;
  }
  assertTrue(fail);
  fail=false;
  try {
    validator.validateAddUserGroupService(getUGConfig(XMLUserGroupService.DEFAULT_NAME,GeoServerUserGroupService.class,getPlainTextPasswordEncoder().getName(),PasswordValidator.DEFAULT_NAME));
  }
 catch (  SecurityConfigException ex) {
    assertEquals(ex.getErrorId(),SEC_ERR_23d);
    assertEquals(ex.getArgs()[0],XMLUserGroupService.DEFAULT_NAME);
    LOGGER.info(ex.getMessage());
    fail=true;
  }
  assertTrue(fail);
  SecurityUserGroupServiceConfig ugConfig=getUGConfig("default2",GeoServerUserGroupService.class,getPlainTextPasswordEncoder().getName(),PasswordValidator.DEFAULT_NAME);
  fail=false;
  try {
    validator.validateModifiedUserGroupService(ugConfig,ugConfig);
  }
 catch (  SecurityConfigException ex) {
    assertEquals(ex.getErrorId(),SEC_ERR_24d);
    assertEquals(ex.getArgs()[0],"default2");
    LOGGER.info(ex.getMessage());
    fail=true;
  }
  assertTrue(fail);
  fail=false;
  try {
    validator.validateAddRoleService(getRoleConfig(XMLRoleService.DEFAULT_NAME,GeoServerRoleService.class,GeoServerRole.ADMIN_ROLE.getAuthority()));
  }
 catch (  SecurityConfigException ex) {
    assertEquals(ex.getErrorId(),SEC_ERR_23c);
    assertEquals(ex.getArgs()[0],XMLRoleService.DEFAULT_NAME);
    LOGGER.info(ex.getMessage());
    fail=true;
  }
  assertTrue(fail);
  fail=false;
  SecurityRoleServiceConfig config=getRoleConfig("default2",GeoServerRoleService.class,GeoServerRole.ADMIN_ROLE.getAuthority());
  try {
    validator.validateModifiedRoleService(config,config);
  }
 catch (  SecurityConfigException ex) {
    assertEquals(ex.getErrorId(),SEC_ERR_24c);
    assertEquals(ex.getArgs()[0],"default2");
    LOGGER.info(ex.getMessage());
    fail=true;
  }
  assertTrue(fail);
  fail=false;
  try {
    validator.validateAddAuthProvider(getAuthConfig(GeoServerAuthenticationProvider.DEFAULT_NAME,UsernamePasswordAuthenticationProvider.class,XMLUserGroupService.DEFAULT_NAME));
  }
 catch (  SecurityConfigException ex) {
    assertEquals(ex.getErrorId(),SEC_ERR_23a);
    assertEquals(ex.getArgs()[0],GeoServerAuthenticationProvider.DEFAULT_NAME);
    LOGGER.info(ex.getMessage());
    fail=true;
  }
  assertTrue(fail);
  fail=false;
  SecurityAuthProviderConfig aConfig=getAuthConfig("default2",UsernamePasswordAuthenticationProvider.class,XMLUserGroupService.DEFAULT_NAME);
  try {
    validator.validateModifiedAuthProvider(aConfig,aConfig);
  }
 catch (  SecurityConfigException ex) {
    assertEquals(ex.getErrorId(),SEC_ERR_24a);
    assertEquals(ex.getArgs()[0],"default2");
    LOGGER.info(ex.getMessage());
    fail=true;
  }
  assertTrue(fail);
}
