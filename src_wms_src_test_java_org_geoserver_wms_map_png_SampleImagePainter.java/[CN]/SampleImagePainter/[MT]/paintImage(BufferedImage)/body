{
  Graphics2D g=image.createGraphics();
  final Map<RenderingHints.Key,Object> hintsMap=new HashMap<RenderingHints.Key,Object>();
  hintsMap.put(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  hintsMap.put(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
  hintsMap.put(RenderingHints.KEY_FRACTIONALMETRICS,RenderingHints.VALUE_FRACTIONALMETRICS_ON);
  hintsMap.put(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_PURE);
  g.setRenderingHints(hintsMap);
  Random random=new Random(0);
  for (int i=0; i < lines; i++) {
    int x1=(int)(random.nextDouble() * image.getWidth());
    int y1=(int)(random.nextDouble() * image.getHeight());
    int x2=(int)(random.nextDouble() * image.getWidth());
    int y2=(int)(random.nextDouble() * image.getHeight());
    int w=(int)(random.nextDouble() * (strokeWidth - 1) + 1);
    g.setStroke(new BasicStroke(w));
    g.setColor(new Color((int)(random.nextDouble() * Integer.MAX_VALUE)));
    g.drawLine(x1,y1,x2,y2);
  }
  g.setColor(Color.BLACK);
  g.setFont(new Font("Arial",Font.BOLD,32));
  for (int i=0; i < labels; i++) {
    int x1=(int)(random.nextDouble() * image.getWidth());
    int y1=(int)(random.nextDouble() * image.getHeight());
    g.drawString("TestLabel",x1,y1);
  }
  g.dispose();
}
