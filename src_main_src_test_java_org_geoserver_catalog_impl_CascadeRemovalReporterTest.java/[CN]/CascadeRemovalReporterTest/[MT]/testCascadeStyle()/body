{
  setMockCreator(new MockCreator(){
    @Override public Catalog createCatalog(    MockTestData testData) throws Exception {
      Catalog catalog=createNiceMock(Catalog.class);
      StyleInfo s=createNiceMock(StyleInfo.class);
      expect(catalog.getStyleByName((String)anyObject())).andReturn(s).anyTimes();
      LayerInfo l1=createNiceMock(LayerInfo.class);
      expect(l1.getDefaultStyle()).andReturn(s).anyTimes();
      expect(catalog.getLayerByName(getLayerId(MockData.LAKES))).andReturn(l1);
      LayerInfo l2=createNiceMock(LayerInfo.class);
      Set<StyleInfo> styles=createNiceMock(Set.class);
      expect(styles.contains(s)).andReturn(true).anyTimes();
      replay(styles);
      expect(l2.getStyles()).andReturn(styles).anyTimes();
      expect(catalog.getLayerByName(getLayerId(MockData.BUILDINGS))).andReturn(l2);
      expect(catalog.getLayers()).andReturn(Arrays.asList(l1,l2)).anyTimes();
      expect(catalog.getLayerGroups()).andReturn((List)Collections.emptyList()).anyTimes();
      replay(s,l1,l2,catalog);
      return catalog;
    }
  }
);
  Catalog catalog=getCatalog();
  CascadeRemovalReporter visitor=new CascadeRemovalReporter(catalog);
  StyleInfo style=catalog.getStyleByName("foo");
  LayerInfo buildings=catalog.getLayerByName(getLayerId(MockData.BUILDINGS));
  LayerInfo lakes=catalog.getLayerByName(getLayerId(MockData.LAKES));
  visitor.visit(style);
  assertEquals(style,visitor.getObjects(StyleInfo.class,ModificationType.DELETE).get(0));
  assertEquals(lakes,visitor.getObjects(LayerInfo.class,ModificationType.STYLE_RESET).get(0));
  assertEquals(buildings,visitor.getObjects(LayerInfo.class,ModificationType.EXTRA_STYLE_REMOVED).get(0));
}
