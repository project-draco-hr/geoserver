{
  this.pfi=pfi;
  Class<? extends ProcessFactory> factoryClass=pfi.getFactoryClass();
  ProcessFactory pf=GeoServerProcessors.getProcessFactory(factoryClass,false);
  if (pf == null) {
    throw new IllegalArgumentException("Failed to locate the process factory " + factoryClass);
  }
  this.title=pf.getTitle().toString(getLocale());
  Form form=new Form("form");
  add(form);
  GeoServerRoleService roleService=getSecurityManager().getActiveRoleService();
  try {
    for (    GeoServerRole r : roleService.getRoles()) {
      availableRoles.add(r.getAuthority());
    }
  }
 catch (  IOException e1) {
    LOGGER.log(Level.FINER,e1.getMessage(),e1);
  }
  final FilteredProcessesProvider provider=new FilteredProcessesProvider(pfi,getLocale());
  final AutoCompleteSettings settings=new AutoCompleteSettings();
  settings.setShowCompleteListOnFocusGain(false);
  settings.setShowListOnEmptyInput(true);
  settings.setShowListOnFocusGain(true);
  settings.setMaxHeightInPx(100);
  processSelector=new GeoServerTablePanel<FilteredProcess>("selectionTable",provider){
    @Override protected Component getComponentForProperty(    String id,    final IModel itemModel,    Property<FilteredProcess> property){
      if (property.getName().equals("enabled")) {
        Fragment fragment=new Fragment(id,"enabledFragment",ProcessSelectionPage.this);
        CheckBox enabled=new CheckBox("enabled",property.getModel(itemModel));
        enabled.setOutputMarkupId(true);
        fragment.add(enabled);
        return fragment;
      }
 else       if (property.getName().equals("title")) {
        return new Label(id,property.getModel(itemModel));
      }
 else       if (property.getName().equals("description")) {
        return new Label(id,property.getModel(itemModel));
      }
 else       if (property.getName().equals("roles")) {
        Fragment fragment=new Fragment(id,"rolesFragment",ProcessSelectionPage.this);
        TextArea<String> roles=new TextArea<String>("roles",property.getModel(itemModel)){
          public org.apache.wicket.util.convert.IConverter getConverter(          java.lang.Class<?> type){
            return new RolesConverter(availableRoles);
          }
        }
;
        StringBuilder selectedRoles=new StringBuilder();
        IAutoCompleteRenderer<String> roleRenderer=new RolesRenderer(selectedRoles);
        AutoCompleteBehavior<String> b=new RolesAutoCompleteBehavior(roleRenderer,settings,selectedRoles,availableRoles);
        roles.setOutputMarkupId(true);
        roles.add(b);
        fragment.add(roles);
        return fragment;
      }
      return null;
    }
  }
;
  processSelector.setFilterable(false);
  processSelector.setPageable(false);
  processSelector.setOutputMarkupId(true);
  form.add(processSelector);
  SubmitLink apply=new SubmitLink("apply"){
    @Override public void onSubmit(){
      pfi.getFilteredProcesses().clear();
      for (      FilteredProcess process : provider.getItems()) {
        if (!process.getRoles().isEmpty() || !process.getEnabled()) {
          ProcessInfo pai=new ProcessInfoImpl();
          pai.setName(process.getName());
          pai.setEnabled(process.getEnabled());
          pai.getRoles().addAll(process.getRoles());
          pfi.getFilteredProcesses().add(pai);
        }
      }
      setResponsePage(wpsAccessRulePage);
    }
  }
;
  form.add(apply);
  Link cancel=new Link("cancel"){
    @Override public void onClick(){
      setResponsePage(wpsAccessRulePage);
    }
  }
;
  form.add(cancel);
}
