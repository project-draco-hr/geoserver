{
  Catalog catalog=getCatalog();
  RepositoryManager.get().setCatalog(catalog);
  geogigData.init().config("user.name","gabriel").config("user.email","gabriel@test.com").createTypeTree("lines","geom:LineString:srid=4326").createTypeTree("points","geom:Point:srid=4326").add().commit("created type trees").get();
  geogigData.insert("points","p1=geom:POINT(0 0)","p2=geom:POINT(1 1)","p3=geom:POINT(2 2)");
  geogigData.insert("lines","l1=geom:LINESTRING(-10 0, 10 0)","l2=geom:LINESTRING(0 0, 180 0)");
  geogigData.add().commit("Added test features");
  CatalogBuilder catalogBuilder=geogigData.newCatalogBuilder(catalog);
  int i=rnd.nextInt();
  catalogBuilder.namespace("geogig.org/" + i).workspace("geogigws" + i).store("geogigstore" + i);
  catalogBuilder.addAllRepoLayers().build();
  String workspaceName=catalogBuilder.workspaceName();
  String storeName=catalogBuilder.storeName();
  String layerName=workspaceName + ":points";
  LayerInfo pointLayerInfo=catalog.getLayerByName(layerName);
  assertNotNull(pointLayerInfo);
  layerName=workspaceName + ":lines";
  LayerInfo lineLayerInfo=catalog.getLayerByName(layerName);
  assertNotNull(lineLayerInfo);
  DataStoreInfo dsInfo=catalog.getDataStoreByName(workspaceName,storeName);
  assertNotNull(dsInfo);
  assertEquals(GeoGigDataStoreFactory.DISPLAY_NAME,dsInfo.getType());
  DataAccess<? extends FeatureType,? extends Feature> dataStore=dsInfo.getDataStore(null);
  assertNotNull(dataStore);
  assertTrue(dataStore instanceof GeoGigDataStore);
  String repoId=(String)dsInfo.getConnectionParameters().get(GeoGigDataStoreFactory.REPOSITORY.key);
  RepositoryInfo repositoryInfo=RepositoryManager.get().get(repoId);
  assertNotNull(repositoryInfo);
  BASE_URL="/geogig/repos/testrepo";
}
