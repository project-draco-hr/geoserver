{
  Preconditions.checkNotNull(location,"Cannot parse NULL URI location");
  Preconditions.checkNotNull(location.getScheme(),"Cannot parse NULL URI scheme");
  if (!"postgresql".equals(location.getScheme())) {
    return newInstance();
  }
  UriComponents uri=UriComponentsBuilder.fromUri(location).build();
  String host=uri.getHost();
  int port=uri.getPort();
  String uriPath=uri.getPath();
  int startIndex=uriPath.startsWith(SLASH) ? 1 : 0;
  String[] paths=uriPath.substring(startIndex).split(SLASH);
  String database=paths[0];
  String schema=null;
  if (paths.length > 2) {
    schema=paths[1];
  }
  MultiValueMap<String,String> queryParams=uri.getQueryParams();
  String username=queryParams.getFirst(USER);
  String password=queryParams.getFirst(PASSWORD);
  try {
    username=URLDecoder.decode(username,UTF8);
  }
 catch (  UnsupportedEncodingException uee) {
    LOGGER.warn(String.format("Error decoding PostgreSQL username value, attempting to use undecoded value: %s",username),uee);
  }
  try {
    password=URLDecoder.decode(password,UTF8);
  }
 catch (  UnsupportedEncodingException uee) {
    LOGGER.warn("Error decoding PostgreSQL password value, attempting to use undecoded value",uee);
  }
  PostgresConfigBean bean=new PostgresConfigBean();
  bean.setHost(host);
  bean.setPort(port);
  bean.setDatabase(database);
  bean.setSchema(schema);
  bean.setUsername(username);
  bean.setPassword(password);
  return bean;
}
