{
  if (operation == null || operation.getParameters().length <= 0) {
    return super.operationDispatched(request,operation);
  }
  final Object o=operation.getParameters()[0];
  if (!(o instanceof GetFeatureInfoRequest)) {
    return super.operationDispatched(request,operation);
  }
  org.geoserver.wms.GetFeatureInfoRequest featureinfoReq=(GetFeatureInfoRequest)o;
  if (!featureinfoReq.getVersion().equalsIgnoreCase("1.3.0")) {
    return super.operationDispatched(request,operation);
  }
  final Map<String,String> rawKvpMap=request.getRawKvp();
  Map<String,List> customDomains=new HashMap<String,List>();
  if (rawKvpMap != null) {
    for (    Map.Entry<String,String> kvp : rawKvpMap.entrySet()) {
      String name=kvp.getKey();
      if (name.startsWith("DIM_")) {
        name=name.substring(4);
        if (name.length() > 0 && name != null) {
          final ArrayList<String> val=new ArrayList<String>(1);
          if (kvp.getValue().indexOf(",") > 0) {
            String[] elements=kvp.getValue().split(",");
            val.addAll(Arrays.asList(elements));
          }
 else {
            val.add(kvp.getValue());
          }
          customDomains.put(name,val);
        }
      }
    }
  }
  final List<MapLayerInfo> queryLayers=featureinfoReq.getQueryLayers();
  for (  MapLayerInfo queryLayerInfo : queryLayers) {
    final CoverageInfo cInfo=queryLayerInfo.getCoverage();
    final LayerInfo layerInfo=queryLayerInfo.getLayerInfo();
    final MetadataMap metadata=layerInfo.getMetadata();
    if (metadata.containsKey(EoLayerType.KEY) && metadata.get(EoLayerType.KEY).equals(EoLayerType.BAND_COVERAGE.toString())) {
      Map<String,Serializable> params=cInfo.getParameters();
      for (      Entry<String,Serializable> entry : params.entrySet()) {
        if (entry.getKey().equalsIgnoreCase(ImageMosaicFormat.MERGE_BEHAVIOR.getName().getCode())) {
          entry.setValue(MergeBehavior.STACK.toString());
          break;
        }
      }
      try {
        final GridCoverageReader gridCoverageReader=cInfo.getGridCoverageReader(new NullProgressListener(),GeoTools.getDefaultHints());
        final Set<ParameterDescriptor<List>> dynamicParameters=((AbstractGridCoverage2DReader)gridCoverageReader).getDynamicParameters();
        if (dynamicParameters.isEmpty()) {
          throw new IllegalStateException("Layer " + cInfo.getTitle() + " has no additional dimensions which are required for an EO BANDS layer");
        }
        final Set<ReferenceIdentifier> dynamicParametersNames=new HashSet<ReferenceIdentifier>();
        for (        ParameterDescriptor<List> param : dynamicParameters) {
          dynamicParametersNames.add(param.getName());
        }
        for (        ParameterDescriptor<List> readParam : dynamicParameters) {
          final String name=readParam.getName().getCode();
          if (customDomains.containsKey(name)) {
            final List values=customDomains.get(name);
            if (values.size() != 0 && values.size() != 1 && values.size() != 3) {
              throw new ServiceException("Dimension DIM_" + name + " has been request with wrong number of values: "+ values.size(),"InvalidDimensionValue");
            }
          }
        }
      }
 catch (      IOException e) {
        throw new IllegalStateException("Unable to acquire a reader for CoverageInfo: " + cInfo,e);
      }
    }
  }
  return super.operationDispatched(request,operation);
}
