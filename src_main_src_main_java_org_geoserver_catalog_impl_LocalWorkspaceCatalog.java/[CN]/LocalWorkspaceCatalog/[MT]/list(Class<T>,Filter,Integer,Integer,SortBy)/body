{
  CloseableIterator<T> iterator=delegate.list(of,filter,offset,count,sortBy);
  Function<T,T> wrappingFunction=new Function<T,T>(){
    final Class<T> type=of;
    @Override public T apply(    T catalogObject){
      return wrap(catalogObject,type);
    }
  }
;
  return CloseableIteratorAdapter.transform(iterator,wrappingFunction);
}
