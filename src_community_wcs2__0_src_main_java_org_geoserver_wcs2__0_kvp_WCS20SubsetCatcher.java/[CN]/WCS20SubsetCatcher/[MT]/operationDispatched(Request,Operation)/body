{
  final String operationID=operation.getId();
  if (operationID != null && operationID.equals("GetCoverage")) {
    final Service service=operation.getService();
    final Version version=service.getVersion();
    if (version != null && version.toString().equalsIgnoreCase(WCS20Const.V201)) {
      if (LOGGER.isLoggable(Level.FINE)) {
        LOGGER.fine("MultipleKeyKVPCatcher in action");
      }
      Object[] params=operation.getParameters();
      if (params != null) {
        for (        Object p : params) {
          if (p instanceof GetCoverageType) {
            HttpServletRequest httpRequest=request.getHttpRequest();
            if (httpRequest != null) {
              final String queryString=httpRequest.getQueryString();
              if (queryString != null && queryString.length() > 0) {
                final String[] elements=queryString.split("&");
                if (elements != null && elements.length > 0) {
                  GetCoverageType originalGetCoverageType=(GetCoverageType)p;
                  if (originalGetCoverageType.getDimensionSubset().size() > 0) {
                    originalGetCoverageType.getDimensionSubset().clear();
                  }
                  for (                  String element : elements) {
                    if (element == null) {
                      continue;
                    }
                    final String kvp[]=element.split("=");
                    if (kvp != null && kvp.length == 2) {
                      if (kvp[0] != null && kvp[0].equalsIgnoreCase("subset") && kvp[1] != null) {
                        try {
                          final Object parsedElement=subsetKVPParser.parse(kvp[1]);
                          if (parsedElement instanceof DimensionSubsetType) {
                            originalGetCoverageType.getDimensionSubset().add((DimensionSubsetType)parsedElement);
                          }
 else {
                            throw new RuntimeException("Unable to parse the subset element: " + kvp[1]);
                          }
                        }
 catch (                        Exception e) {
                          throw new RuntimeException("Unable to parse the subset element: " + kvp[1],e);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return super.operationDispatched(request,operation);
}
