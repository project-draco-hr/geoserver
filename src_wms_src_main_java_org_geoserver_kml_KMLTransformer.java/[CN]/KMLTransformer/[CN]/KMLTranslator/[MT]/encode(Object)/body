{
  final WMSMapContent mapContent=(WMSMapContent)o;
  final GetMapRequest request=mapContent.getRequest();
  final List<Layer> layers=mapContent.layers();
  final KMLLookAt lookAtOpts=new KMLLookAt(request.getFormatOptions());
  start("kml",KMLUtils.attributes(new String[]{"xmlns","http://www.opengis.net/kml/2.2","xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance","xsi:schemaLocation","http://www.opengis.net/kml/2.2 http://schemas.opengis.net/kml/2.2.0/ogckml22.xsd"}));
  scaleDenominator=1;
  try {
    scaleDenominator=RendererUtilities.calculateOGCScale(mapContent.getRenderingArea(),mapContent.getMapWidth(),null);
  }
 catch (  Exception e) {
    LOGGER.log(Level.WARNING,"Error calculating scale denominator",e);
  }
  LOGGER.log(Level.FINE,"scale denominator = " + scaleDenominator);
  boolean group;
  Boolean legend=(Boolean)request.getFormatOptions().get("legend");
  if (legend != null) {
    group=(layers.size() > 1) || legend.booleanValue();
  }
 else {
    group=(layers.size() > 1);
  }
  if (group) {
    StringBuffer sb=new StringBuffer();
    for (int i=0; i < layers.size(); i++) {
      sb.append(layers.get(i).getTitle() + ",");
    }
    sb.setLength(sb.length() - 1);
    start("Document");
    String kmltitle=(String)mapContent.getRequest().getFormatOptions().get("kmltitle");
    element("name",(kmltitle != null ? kmltitle : sb.toString()));
  }
  for (int i=0; i < layers.size(); i++) {
    Layer layer=layers.get(i);
    MapLayerInfo layerInfo=mapContent.getRequest().getLayers().get(i);
    Boolean superoverlay=(Boolean)mapContent.getRequest().getFormatOptions().get("superoverlay");
    superoverlay=(superoverlay == null ? Boolean.FALSE : superoverlay);
    if (superoverlay) {
      encodeSuperOverlayLayer(mapContent,layer);
    }
 else {
      if (layerInfo.getType() != MapLayerInfo.TYPE_RASTER) {
        encodeVectorLayer(mapContent,layer,lookAtOpts);
      }
 else {
        encodeRasterLayer(mapContent,layer,lookAtOpts);
      }
    }
  }
  if (legend != null && legend.booleanValue()) {
    for (int i=0; i < layers.size(); i++) {
      Layer layer=layers.get(i);
      encodeLegend(mapContent,layer);
    }
  }
  if (group) {
    end("Document");
  }
  end("kml");
}
