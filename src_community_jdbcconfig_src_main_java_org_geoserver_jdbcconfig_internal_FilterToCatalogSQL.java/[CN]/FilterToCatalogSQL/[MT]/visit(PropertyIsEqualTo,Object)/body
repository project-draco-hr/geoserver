{
  MatchAction matchAction=filter.getMatchAction();
  boolean matchingCase=filter.isMatchingCase();
  if (!(filter.getExpression1() instanceof Literal) && !(filter.getExpression2() instanceof Literal)) {
    PropertyName expression1=(PropertyName)filter.getExpression1();
    PropertyName expression2=(PropertyName)filter.getExpression2();
    final String propertyTypesParam1=propertyTypesParam(expression1);
    final String propertyTypesParam2=propertyTypesParam(expression2);
    String valueCol1=matchingCase ? "o1.value" : "UPPER(o1.value)";
    String valueCol2=matchingCase ? "o2.value" : "UPPER(o2.value)";
    StringBuilder builder;
switch (matchAction) {
case ALL:
      builder=append(extraData,"oid NOT IN (SELECT o1.oid FROM object_property o1, object_property o2 WHERE(o1.oid=o2.oid)  ","AND o1.property_type IN (:",propertyTypesParam1,") ","AND o2.property_type IN (:",propertyTypesParam2,") ","AND ",valueCol1," != ",valueCol2," ) /* ",filter.toString()," */ \n");
    break;
case ANY:
  builder=append(extraData,"oid IN (SELECT o1.oid FROM object_property o1, object_property o2 WHERE(o1.oid=o2.oid)  ","AND o1.property_type IN (:",propertyTypesParam1,") ","AND o2.property_type IN (:",propertyTypesParam2,") ","AND ",valueCol1," = ",valueCol2," ) /* ",filter.toString()," */ \n");
break;
case ONE:
builder=append(extraData,"oid IN (SELECT o1.oid FROM object_property o1, object_property o2 WHERE(o1.oid=o2.oid) ","AND o1.property_type IN (:",propertyTypesParam1,") ","AND o2.property_type IN (:",propertyTypesParam2,") ","AND ",valueCol1," = ",valueCol2," GROUP BY (oid) HAVING COUNT(oid)=1) /* ",filter.toString(),"/* ",filter.toString()," */ \n");
break;
default :
throw new IllegalArgumentException("MatchAction: " + matchAction);
}
return builder;
}
 else {
if (filter.getExpression1() instanceof IsInstanceOf) {
StringBuilder builder=append(extraData,handleInstanceOf((IsInstanceOf)filter.getExpression1()));
return builder;
}
PropertyName expression1;
Literal expression2;
if (filter.getExpression1() instanceof Literal) {
expression1=(PropertyName)filter.getExpression2();
expression2=(Literal)filter.getExpression1();
}
 else {
expression1=(PropertyName)filter.getExpression1();
expression2=(Literal)filter.getExpression2();
}
final String propertyTypesParam=propertyTypesParam(expression1);
String expectedValue=expression2.evaluate(null,String.class);
if (!matchingCase) {
expectedValue=expectedValue.toUpperCase();
}
String valueParam=newParam("value",expectedValue);
StringBuilder builder;
String valueCol=matchingCase ? "value" : "UPPER(value)";
switch (matchAction) {
case ALL:
builder=append(extraData,"oid NOT IN (SELECT oid FROM object_property WHERE property_type IN (:",propertyTypesParam,") AND ",valueCol," != :",valueParam,") /* ",filter.toString()," */ \n");
break;
case ANY:
builder=append(extraData,"oid IN (SELECT oid FROM object_property WHERE property_type IN (:",propertyTypesParam,") AND ",valueCol," = :",valueParam,") /* ",filter.toString()," */ \n");
break;
case ONE:
builder=append(extraData,"oid IN (SELECT oid FROM object_property WHERE property_type IN (:",propertyTypesParam,") AND ",valueCol," = :",valueParam," GROUP BY (oid) HAVING COUNT(oid)=1) /* ",filter.toString()," */ \n");
break;
default :
throw new IllegalArgumentException("MatchAction: " + matchAction);
}
return builder;
}
}
