{
  final PropertyName expression1=(PropertyName)filter.getExpression();
  final String propertyTypesParam=propertyTypesParam(expression1);
  final String literal=filter.getLiteral();
  final MatchAction matchAction=filter.getMatchAction();
  final char esc=filter.getEscape().charAt(0);
  final char multi=filter.getWildCard().charAt(0);
  final char single=filter.getSingleChar().charAt(0);
  final boolean matchCase=filter.isMatchingCase();
  final String pattern=LikeFilterImpl.convertToSQL92(esc,multi,single,matchCase,literal);
  String valueCol=matchCase ? "value" : "UPPER(value)";
  StringBuilder builder;
switch (matchAction) {
case ALL:
    builder=append(extraData,"oid NOT IN (SELECT oid FROM object_property WHERE property_type IN (:",propertyTypesParam,") AND NOT(",valueCol," LIKE '",pattern,"')) /* ",filter.toString()," */ \n");
  break;
case ANY:
builder=append(extraData,"oid IN (SELECT oid FROM object_property WHERE property_type IN (:",propertyTypesParam,") AND ",valueCol," LIKE '",pattern,"') /* ",filter.toString()," */ \n");
break;
case ONE:
builder=append(extraData,"oid IN (SELECT oid FROM object_property WHERE property_type IN (:",propertyTypesParam,") AND ",valueCol," LIKE '",pattern,"' ","GROUP BY (oid) HAVING COUNT(oid)=1 ) /* ",filter.toString()," */ \n");
break;
default :
throw new IllegalArgumentException("MatchAction: " + matchAction);
}
return builder;
}
