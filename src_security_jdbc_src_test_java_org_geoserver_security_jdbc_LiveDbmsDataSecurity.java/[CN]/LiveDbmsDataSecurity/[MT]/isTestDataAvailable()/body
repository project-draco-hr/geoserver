{
  if (available != null)   return available;
  available=super.isTestDataAvailable();
  if (!available)   return available;
  Properties props=null;
  try {
    props=Util.loadUniversal(new FileInputStream(fixture));
  }
 catch (  IOException e1) {
    throw new RuntimeException(e1);
  }
  String msgPrefix="Disabling test based on fixture " + fixtureId + " since ";
  String driverClassName=props.getProperty("driver");
  if (driverClassName == null) {
    LOGGER.warning(msgPrefix + "property \"driver\" not found in " + fixture.getAbsolutePath());
    available=false;
    return available;
  }
  String url=props.getProperty("url");
  if (url == null) {
    LOGGER.warning(msgPrefix + "property \"url\" not found in " + fixture.getAbsolutePath());
    available=false;
    return available;
  }
  String user=props.getProperty("user");
  if (user == null)   user=props.getProperty("username");
  String password=props.getProperty("password");
  try {
    Class.forName(driverClassName);
  }
 catch (  ClassNotFoundException e) {
    LOGGER.warning(msgPrefix + " driver class not found: " + driverClassName);
    available=false;
    return available;
  }
  Connection con=null;
  try {
    if (user == null)     con=DriverManager.getConnection(url);
 else     con=DriverManager.getConnection(url,user,password);
    con.close();
  }
 catch (  SQLException ex) {
    LOGGER.warning(msgPrefix + " an sql error:\n " + ex.getMessage());
    available=false;
    return available;
  }
  available=true;
  return available;
}
