{
  if (REQUEST_CONTROLLERS.get() != null) {
    if (LOGGER.isLoggable(Level.FINE)) {
      LOGGER.fine("Nested request found, not locking on it");
    }
    REQUEST_CONTROLLERS.get().nestingLevel++;
    return operation;
  }
  blockedRequests.incrementAndGet();
  long start=System.currentTimeMillis();
  try {
    Request requestWithOperation=null;
    if (request != null) {
      requestWithOperation=new Request(request);
      requestWithOperation.setOperation(operation);
    }
    List<FlowController> controllers=null;
    try {
      controllers=provider.getFlowControllers(requestWithOperation);
    }
 catch (    Exception e) {
      LOGGER.log(Level.SEVERE,"An error occurred setting up the flow controllers to this request",e);
      return operation;
    }
    if (controllers.size() == 0) {
      LOGGER.info("Control-flow inactive, there are no configured rules");
    }
 else {
      if (LOGGER.isLoggable(Level.INFO)) {
        LOGGER.info("Request [" + requestWithOperation + "] starting, processing through flow controllers");
      }
      long timeout=provider.getTimeout(requestWithOperation);
      CallbackContext context=new CallbackContext(requestWithOperation,controllers,timeout);
      REQUEST_CONTROLLERS.set(context);
      long maxTime=timeout > 0 ? System.currentTimeMillis() + timeout : -1;
      for (      FlowController flowController : controllers) {
        if (timeout > 0) {
          long maxWait=maxTime - System.currentTimeMillis();
          if (LOGGER.isLoggable(Level.FINE)) {
            LOGGER.fine("Request [" + requestWithOperation + "] checking flow controller "+ flowController);
          }
          if (!flowController.requestIncoming(requestWithOperation,maxWait)) {
            throw new HttpErrorCodeException(503,"Requested timeout out while waiting to be executed, please lower your request rate");
          }
          if (LOGGER.isLoggable(Level.FINE)) {
            LOGGER.fine("Request [" + requestWithOperation + "] passed flow controller "+ flowController);
          }
        }
 else {
          flowController.requestIncoming(requestWithOperation,-1);
        }
      }
    }
  }
  finally {
    blockedRequests.decrementAndGet();
    runningRequests.incrementAndGet();
    if (REQUEST_CONTROLLERS.get() != null) {
      if (LOGGER.isLoggable(Level.INFO)) {
        LOGGER.info("Request started, running requests: " + getRunningRequests() + ", blocked requests: "+ getBlockedRequests());
      }
    }
    if (request != null && request.getHttpResponse() != null) {
      long end=System.currentTimeMillis();
      request.getHttpResponse().addHeader(X_RATELIMIT_DELAY,String.valueOf(end - start));
    }
  }
  return operation;
}
