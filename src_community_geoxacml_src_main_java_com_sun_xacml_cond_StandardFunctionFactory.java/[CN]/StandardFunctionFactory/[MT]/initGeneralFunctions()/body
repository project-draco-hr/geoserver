{
  logger.config("Initializing standard General functions");
  if (conditionFunctions == null)   initConditionFunctions();
  generalFunctions=new HashSet<Function>(conditionFunctions);
  generalFunctions.addAll((new AddFunctionCluster()).getSupportedFunctions());
  generalFunctions.addAll((new SubtractFunctionCluster()).getSupportedFunctions());
  generalFunctions.addAll((new MultiplyFunctionCluster()).getSupportedFunctions());
  generalFunctions.addAll((new DivideFunctionCluster()).getSupportedFunctions());
  generalFunctions.addAll((new ModFunctionCluster()).getSupportedFunctions());
  generalFunctions.addAll((new AbsFunctionCluster()).getSupportedFunctions());
  generalFunctions.addAll((new RoundFunctionCluster()).getSupportedFunctions());
  generalFunctions.addAll((new FloorFunctionCluster()).getSupportedFunctions());
  generalFunctions.addAll((new DateMathFunctionCluster()).getSupportedFunctions());
  generalFunctions.addAll((new GeneralBagFunctionCluster()).getSupportedFunctions());
  generalFunctions.addAll((new NumericConvertFunctionCluster()).getSupportedFunctions());
  generalFunctions.addAll((new StringNormalizeFunctionCluster()).getSupportedFunctions());
  generalFunctions.addAll((new GeneralSetFunctionCluster()).getSupportedFunctions());
  generalFunctions.addAll((new StringFunctionCluster()).getSupportedFunctions());
  generalAbstractFunctions=new HashMap<URI,MapFunctionProxy>(conditionAbstractFunctions);
  try {
    generalAbstractFunctions.put(new URI(MapFunction.NAME_MAP),new MapFunctionProxy());
  }
 catch (  URISyntaxException e) {
    throw new IllegalArgumentException("invalid function name");
  }
}
