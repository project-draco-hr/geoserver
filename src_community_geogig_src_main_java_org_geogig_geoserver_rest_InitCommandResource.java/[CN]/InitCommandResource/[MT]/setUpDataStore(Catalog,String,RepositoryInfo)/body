{
  NamespaceInfo ns=catalog.getDefaultNamespace();
  WorkspaceInfo ws=catalog.getDefaultWorkspace();
  DataStoreInfo ds=catalog.getFactory().createDataStore();
  ds.setEnabled(true);
  ds.setDescription("GeoGIG repository");
  ds.setName(storeName);
  ds.setType(GeoGigDataStoreFactory.DISPLAY_NAME);
  ds.setWorkspace(ws);
  Map<String,Serializable> connParams=ds.getConnectionParameters();
  connParams.put(GeoGigDataStoreFactory.REPOSITORY.key,repoInfo.getId());
  connParams.put(GeoGigDataStoreFactory.DEFAULT_NAMESPACE.key,ns.getURI());
  connParams.put(GeoGigDataStoreFactory.RESOLVER_CLASS_NAME.key,GeoGigInitializer.REPO_RESOLVER_CLASSNAME);
  catalog.add(ds);
  try {
    DataStoreInfo dsInfo=catalog.getDataStoreByName(ws,storeName);
    String repoId=(String)dsInfo.getConnectionParameters().get(GeoGigDataStoreFactory.REPOSITORY.key);
    RepositoryInfo info=RepositoryManager.get().get(repoId);
  }
 catch (  IOException e) {
    Throwables.propagate(e);
  }
  return ds;
}
