{
  Request request=getRequest();
  Response response=getResponse();
  String workspace=getAttribute("workspace");
  String coveragestore=getAttribute("coveragestore");
  String format=getAttribute("format");
  String method=getUploadMethod(request);
  final File uploadedFile=doFileUpload(method,workspace,coveragestore,format);
  Form form=request.getResourceRef().getQueryAsForm();
  if ("yes".equalsIgnoreCase(form.getFirstValue("overviews"))) {
    ;
  }
  CatalogBuilder builder=new CatalogBuilder(catalog);
  builder.setWorkspace(catalog.getWorkspaceByName(workspace));
  CoverageStoreInfo info=catalog.getCoverageStoreByName(workspace,coveragestore);
  boolean add=false;
  if (info == null) {
    LOGGER.info("Auto-configuring coverage store: " + coveragestore);
    info=builder.buildCoverageStore(coveragestore);
    add=true;
  }
 else {
    LOGGER.info("Using existing coverage store: " + coveragestore);
  }
  info.setType(coverageFormat.getName());
  URL uploadedFileURL=DataUtilities.fileToURL(uploadedFile);
  if (isInlineUpload(method)) {
    String url;
    if (uploadedFile.isDirectory() && uploadedFile.getName().equals(coveragestore)) {
      url="file:data/" + workspace + "/"+ coveragestore;
    }
 else {
      url="file:data/" + workspace + "/"+ coveragestore+ "/"+ uploadedFile.getName();
    }
    if (url.contains("+")) {
      url=url.replace("+","%2B");
    }
    if (url.contains(" ")) {
      url=url.replace(" ","%20");
    }
    info.setURL(url);
  }
 else {
    info.setURL(uploadedFileURL.toExternalForm());
  }
  if (add) {
    catalog.add(info);
  }
 else {
    catalog.save(info);
  }
  builder.setStore(info);
  String configure=form.getFirstValue("configure");
  if ("none".equalsIgnoreCase(configure)) {
    getResponse().setStatus(Status.SUCCESS_CREATED);
    return;
  }
  GridCoverage2DReader reader=null;
  try {
    reader=(GridCoverage2DReader)((AbstractGridFormat)coverageFormat).getReader(DataUtilities.fileToURL(uploadedFile));
    if (reader == null) {
      throw new RestletException("Could not aquire reader for coverage.",Status.SERVER_ERROR_INTERNAL);
    }
    final Map customParameters=new HashMap();
    String useJAIImageReadParam=form.getFirstValue("USE_JAI_IMAGEREAD");
    if (useJAIImageReadParam != null) {
      customParameters.put(AbstractGridFormat.USE_JAI_IMAGEREAD.getName().toString(),Boolean.valueOf(useJAIImageReadParam));
    }
    String coverageName=form.getFirstValue("coverageName");
    String[] names=reader.getGridCoverageNames();
    if (names.length > 1 && coverageName != null) {
      throw new RestletException("The reader found more than one coverage, " + "coverageName cannot be used in this case (it would generate " + "the same name for all coverages found",Status.CLIENT_ERROR_BAD_REQUEST);
    }
    if (names.length > 1) {
      for (      String name : names) {
        SingleGridCoverage2DReader singleReader=new SingleGridCoverage2DReader(reader,name);
        configureCoverageInfo(builder,info,add,name,name,singleReader,customParameters);
      }
    }
 else {
      configureCoverageInfo(builder,info,add,names[0],coverageName,reader,customParameters);
    }
    DataFormat df=new CoverageStoreResource(getContext(),request,response,catalog).createXMLFormat(request,response);
    response.setEntity(df.toRepresentation(info));
    response.setStatus(Status.SUCCESS_CREATED);
  }
 catch (  Exception e) {
    if (e instanceof RestletException) {
      throw (RestletException)e;
    }
    throw new RestletException("Error auto-configuring coverage",Status.SERVER_ERROR_INTERNAL,e);
  }
 finally {
    if (reader != null) {
      try {
        reader.dispose();
      }
 catch (      IOException e) {
      }
    }
  }
}
