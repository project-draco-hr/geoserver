{
  X509CertificateAuthenticationFilterConfig config=new X509CertificateAuthenticationFilterConfig();
  config.setClassName(GeoServerX509CertificateAuthenticationFilter.class.getName());
  config.setName(testFilterName8);
  config.setRoleServiceName("rs1");
  config.setRoleSource(org.geoserver.security.config.X509CertificateAuthenticationFilterConfig.J2EERoleSource.RoleService);
  config.setUserGroupServiceName("ug1");
  config.setRolesHeaderAttribute("roles");
  getSecurityManager().saveFilter(config);
  prepareFilterChain(pattern,testFilterName8);
  modifyChain(pattern,false,true,null);
  SecurityContextHolder.getContext().setAuthentication(null);
  MockHttpServletRequest request=createRequest("/foo/bar");
  MockHttpServletResponse response=new MockHttpServletResponse();
  MockFilterChain chain=new MockFilterChain();
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_FORBIDDEN,response.getStatus());
  SecurityContext ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNull(ctx);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  for (  org.geoserver.security.config.X509CertificateAuthenticationFilterConfig.J2EERoleSource rs : org.geoserver.security.config.X509CertificateAuthenticationFilterConfig.J2EERoleSource.values()) {
    config.setRoleSource(rs);
    getSecurityManager().saveFilter(config);
    request=createRequest("/foo/bar");
    response=new MockHttpServletResponse();
    chain=new MockFilterChain();
    if (rs == J2EERoleSource.Header) {
      request.addHeader("roles",derivedRole + ";" + rootRole);
    }
    if (rs == J2EERoleSource.J2EE) {
      if (true) {
        request.addUserRole(derivedRole);
      }
      if (false) {
        request.addUserRole(rootRole);
      }
    }
    setCertifacteForUser(testUserName,request);
    getProxy().doFilter(request,response,chain);
    assertEquals(HttpServletResponse.SC_OK,response.getStatus());
    ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
    assertNotNull(ctx);
    Authentication auth=ctx.getAuthentication();
    assertNotNull(auth);
    assertNull(SecurityContextHolder.getContext().getAuthentication());
    checkForAuthenticatedRole(auth);
    assertEquals(testUserName,auth.getPrincipal());
    assertTrue(auth.getAuthorities().contains(new GeoServerRole(rootRole)));
    assertTrue(auth.getAuthorities().contains(new GeoServerRole(derivedRole)));
  }
  for (  org.geoserver.security.config.X509CertificateAuthenticationFilterConfig.J2EERoleSource rs : org.geoserver.security.config.X509CertificateAuthenticationFilterConfig.J2EERoleSource.values()) {
    config.setRoleSource(rs);
    getSecurityManager().saveFilter(config);
    config.setRoleSource(rs);
    request=createRequest("/foo/bar");
    response=new MockHttpServletResponse();
    chain=new MockFilterChain();
    if (rs == J2EERoleSource.J2EE) {
      if (false) {
        request.addUserRole(derivedRole);
      }
      if (false) {
        request.addUserRole(rootRole);
      }
    }
    setCertifacteForUser("unknown",request);
    getProxy().doFilter(request,response,chain);
    assertEquals(HttpServletResponse.SC_OK,response.getStatus());
    ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
    assertNotNull(ctx);
    Authentication auth=ctx.getAuthentication();
    assertNotNull(auth);
    assertNull(SecurityContextHolder.getContext().getAuthentication());
    checkForAuthenticatedRole(auth);
    assertEquals("unknown",auth.getPrincipal());
  }
  updateUser("ug1",testUserName,false);
  config.setRoleSource(org.geoserver.security.config.X509CertificateAuthenticationFilterConfig.J2EERoleSource.UserGroupService);
  getSecurityManager().saveFilter(config);
  request=createRequest("/foo/bar");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  setCertifacteForUser(testUserName,request);
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_FORBIDDEN,response.getStatus());
  ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNull(ctx);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  updateUser("ug1",testUserName,true);
  insertAnonymousFilter();
  request=createRequest("/foo/bar");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getStatus());
  removeAnonymousFilter();
}
