{
  UsernamePasswordAuthenticationFilterConfig config=new UsernamePasswordAuthenticationFilterConfig();
  config.setClassName(GeoServerUserNamePasswordAuthenticationFilter.class.getName());
  config.setUsernameParameterName("username");
  config.setPasswordParameterName("password");
  config.setName(testFilterName6);
  getSecurityManager().saveFilter(config);
  prepareFilterChain(pattern,GeoServerSecurityFilterChain.FORM_LOGIN_FILTER);
  modifyChain(pattern,false,true,null);
  prepareFilterChain(ConstantFilterChain.class,"/j_spring_security_check_foo/",testFilterName6);
  modifyChain("/j_spring_security_check_foo/",false,true,null);
  SecurityContextHolder.getContext().setAuthentication(null);
  MockHttpServletRequest request=createRequest("/foo/bar");
  MockHttpServletResponse response=new MockHttpServletResponse();
  MockFilterChain chain=new MockFilterChain();
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
  assertTrue(response.wasRedirectSent());
  String tmp=response.getHeader("Location");
  assertTrue(tmp.endsWith(GeoServerUserNamePasswordAuthenticationFilter.URL_LOGIN_FORM));
  SecurityContext ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNull(ctx);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  request=createRequest("/j_spring_security_check_foo");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.setMethod("POST");
  request.setupAddParameter(config.getUsernameParameterName(),testUserName);
  request.setupAddParameter(config.getPasswordParameterName(),testPassword);
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
  assertTrue(response.wasRedirectSent());
  assertTrue(response.getHeader("Location").endsWith(GeoServerUserNamePasswordAuthenticationFilter.URL_LOGIN_SUCCCESS));
  ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNotNull(ctx);
  Authentication auth=ctx.getAuthentication();
  assertNotNull(auth);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  checkForAuthenticatedRole(auth);
  assertEquals(testUserName,((UserDetails)auth.getPrincipal()).getUsername());
  assertTrue(auth.getAuthorities().contains(new GeoServerRole(rootRole)));
  assertTrue(auth.getAuthorities().contains(new GeoServerRole(derivedRole)));
  GeoServerLogoutFilter logoutFilter=(GeoServerLogoutFilter)getSecurityManager().loadFilter(GeoServerSecurityFilterChain.FORM_LOGOUT_FILTER);
  request=createRequest("/j_spring_security_logout_foo");
  HttpSession session=request.getSession(true);
  session.setAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY,ctx);
  SecurityContextHolder.getContext().setAuthentication(auth);
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  logoutFilter.doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
  assertTrue(response.wasRedirectSent());
  tmp=response.getHeader("Location");
  assertNotNull(tmp);
  assertTrue(tmp.endsWith(GeoServerLogoutFilter.URL_AFTER_LOGOUT));
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  request=createRequest("/j_spring_security_check_foo");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.setMethod("POST");
  request.setupAddParameter(config.getUsernameParameterName(),testUserName);
  request.setupAddParameter(config.getPasswordParameterName(),"wrongpass");
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
  assertTrue(response.wasRedirectSent());
  assertTrue(response.getHeader("Location").endsWith(GeoServerUserNamePasswordAuthenticationFilter.URL_LOGIN_FAILURE));
  ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNull(ctx);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  request=createRequest("/j_spring_security_check_foo");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.setMethod("POST");
  request.setupAddParameter(config.getUsernameParameterName(),"unknwon");
  request.setupAddParameter(config.getPasswordParameterName(),testPassword);
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
  assertTrue(response.wasRedirectSent());
  assertTrue(response.getHeader("Location").endsWith(GeoServerUserNamePasswordAuthenticationFilter.URL_LOGIN_FAILURE));
  ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNull(ctx);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  request=createRequest("/j_spring_security_check_foo");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.setMethod("POST");
  request.setupAddParameter(config.getUsernameParameterName(),GeoServerUser.ROOT_USERNAME);
  request.setupAddParameter(config.getPasswordParameterName(),getMasterPassword());
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
  assertTrue(response.wasRedirectSent());
  assertTrue(response.getHeader("Location").endsWith(GeoServerUserNamePasswordAuthenticationFilter.URL_LOGIN_SUCCCESS));
  ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  auth=ctx.getAuthentication();
  assertNotNull(auth);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  assertEquals(GeoServerUser.ROOT_USERNAME,auth.getPrincipal());
  assertTrue(auth.getAuthorities().size() == 1);
  assertTrue(auth.getAuthorities().contains(GeoServerRole.ADMIN_ROLE));
  request=createRequest("/j_spring_security_check_foo");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.setMethod("POST");
  request.setupAddParameter(config.getUsernameParameterName(),GeoServerUser.ROOT_USERNAME);
  request.setupAddParameter(config.getPasswordParameterName(),"geoserver1");
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
  assertTrue(response.wasRedirectSent());
  assertTrue(response.getHeader("Location").endsWith(GeoServerUserNamePasswordAuthenticationFilter.URL_LOGIN_FAILURE));
  ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNull(ctx);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  updateUser("ug1",testUserName,false);
  request=createRequest("/j_spring_security_check_foo");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.setMethod("POST");
  request.setupAddParameter(config.getUsernameParameterName(),testUserName);
  request.setupAddParameter(config.getPasswordParameterName(),testPassword);
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
  assertTrue(response.wasRedirectSent());
  assertTrue(response.getHeader("Location").endsWith(GeoServerUserNamePasswordAuthenticationFilter.URL_LOGIN_FAILURE));
  ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNull(ctx);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  updateUser("ug1",testUserName,true);
  insertAnonymousFilter();
  request=createRequest("foo/bar");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
  removeAnonymousFilter();
}
