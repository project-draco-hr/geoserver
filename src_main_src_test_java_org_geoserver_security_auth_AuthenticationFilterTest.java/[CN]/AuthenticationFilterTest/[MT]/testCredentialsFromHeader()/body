{
  CredentialsFromRequestHeaderFilterConfig config=new CredentialsFromRequestHeaderFilterConfig();
  config.setClassName(GeoServerCredentialsFromRequestHeaderFilter.class.getName());
  config.setUserNameHeaderName("X-Credentials");
  config.setPasswordHeaderName("X-Credentials");
  config.setUserNameRegex("private-user=([^&]*)");
  config.setPasswordRegex("private-pw=([^&]*)");
  config.setParseAsUriComponents(true);
  config.setName(testFilterName10);
  getSecurityManager().saveFilter(config);
  prepareFilterChain(pattern,testFilterName10);
  modifyChain(pattern,false,true,null);
  MockHttpServletRequest request=createRequest("/foo/bar");
  MockHttpServletResponse response=new MockHttpServletResponse();
  MockFilterChain chain=new MockFilterChain();
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_FORBIDDEN,response.getErrorCode());
  SecurityContext ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNull(ctx);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  request=createRequest("/foo/bar");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.addHeader("X-Credentials","private-user=" + testUserName + "&private-pw="+ testPassword);
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
  ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNotNull(ctx);
  Authentication auth=ctx.getAuthentication();
  assertNotNull(auth);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  checkForAuthenticatedRole(auth);
  assertEquals(testUserName,((UserDetails)auth.getPrincipal()).getUsername());
  assertTrue(auth.getAuthorities().contains(new GeoServerRole(rootRole)));
  assertTrue(auth.getAuthorities().contains(new GeoServerRole(derivedRole)));
  request=createRequest("/foo/bar");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.addHeader("X-Credentials","private-user=" + testUserName + "&private-pw=wrongpass");
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_FORBIDDEN,response.getErrorCode());
  ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNull(ctx);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  request=createRequest("/foo/bar");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.addHeader("X-Credentials","private-user=wronguser&private-pw=" + testPassword);
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_FORBIDDEN,response.getErrorCode());
  ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNull(ctx);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  request=createRequest("/foo/bar");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  String masterPassword=URLEncoder.encode(getMasterPassword(),"UTF-8");
  request.addHeader("X-Credentials","private-user=" + GeoServerUser.ROOT_USERNAME + "&private-pw="+ masterPassword);
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
  ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  auth=ctx.getAuthentication();
  assertNotNull(auth);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  assertEquals(GeoServerUser.ROOT_USERNAME,auth.getPrincipal());
  assertTrue(auth.getAuthorities().size() == 2);
  assertTrue(auth.getAuthorities().contains(GeoServerRole.ADMIN_ROLE));
  request=createRequest("/foo/bar");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.addHeader("X-Credentials","private-user=" + GeoServerUser.ROOT_USERNAME + "&private-pw=geoserver1");
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_FORBIDDEN,response.getErrorCode());
  ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNull(ctx);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  getSecurityManager().getAuthenticationCache().removeAll();
  updateUser("ug1",testUserName,false);
  request=createRequest("/foo/bar");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.addHeader("X-Credentials","private-user=" + testUserName + "&private-pw="+ testPassword);
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_FORBIDDEN,response.getErrorCode());
  ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNull(ctx);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  updateUser("ug1",testUserName,true);
  insertAnonymousFilter();
  request=createRequest("/foo/bar");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
  removeAnonymousFilter();
}
