{
  DigestAuthenticationFilterConfig config=new DigestAuthenticationFilterConfig();
  config.setClassName(GeoServerDigestAuthenticationFilter.class.getName());
  config.setName(testFilterName2);
  config.setUserGroupServiceName("ug1");
  getSecurityManager().saveFilter(config);
  prepareFilterChain(pattern,testFilterName,testFilterName2);
  modifyChain(pattern,false,true,null);
  SecurityContextHolder.getContext().setAuthentication(null);
  MockHttpServletRequest request=createRequest("/foo/bar");
  MockHttpServletResponse response=new MockHttpServletResponse();
  MockFilterChain chain=new MockFilterChain();
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_UNAUTHORIZED,response.getStatus());
  String tmp=response.getHeader("WWW-Authenticate");
  assertNotNull(tmp);
  assert(tmp.indexOf(GeoServerSecurityManager.REALM) != -1);
  assert(tmp.indexOf("Digest") != -1);
  SecurityContext ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNull(ctx);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  request=createRequest("/foo/bar");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  String headerValue=clientDigestString(tmp,testUserName,testPassword,request.getMethod());
  request.addHeader("Authorization",headerValue);
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getStatus());
  ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNotNull(ctx);
  Authentication auth=ctx.getAuthentication();
  assertNotNull(auth);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  checkForAuthenticatedRole(auth);
  assertEquals(testUserName,((UserDetails)auth.getPrincipal()).getUsername());
  assertTrue(auth.getAuthorities().contains(new GeoServerRole(rootRole)));
  assertTrue(auth.getAuthorities().contains(new GeoServerRole(derivedRole)));
  request=createRequest("/foo/bar");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.addHeader("Authorization","Basic " + new String(Base64.encodeBytes((testUserName + ":" + testPassword).getBytes())));
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getStatus());
  ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNotNull(ctx);
  auth=ctx.getAuthentication();
  assertNotNull(auth);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  checkForAuthenticatedRole(auth);
  assertEquals(testUserName,((UserDetails)auth.getPrincipal()).getUsername());
  assertTrue(auth.getAuthorities().contains(new GeoServerRole(rootRole)));
  assertTrue(auth.getAuthorities().contains(new GeoServerRole(derivedRole)));
}
