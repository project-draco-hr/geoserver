{
  BasicAuthenticationFilterConfig config=new BasicAuthenticationFilterConfig();
  config.setClassName(GeoServerBasicAuthenticationFilter.class.getName());
  config.setUseRememberMe(false);
  config.setName(testFilterName);
  getSecurityManager().saveFilter(config);
  prepareFilterChain(pattern,GeoServerSecurityFilterChain.SECURITY_CONTEXT_ASC_FILTER,testFilterName,GeoServerSecurityFilterChain.DYNAMIC_EXCEPTION_TRANSLATION_FILTER,GeoServerSecurityFilterChain.FILTER_SECURITY_INTERCEPTOR);
  SecurityContextHolder.getContext().setAuthentication(null);
  MockHttpServletRequest request=createRequest("/foo/bar");
  MockHttpServletResponse response=new MockHttpServletResponse();
  MockFilterChain chain=new MockFilterChain();
  getProxy().doFilter(request,response,chain);
  String tmp=response.getHeader("WWW-Authenticate");
  assertNotNull(tmp);
  assert(tmp.indexOf(GeoServerSecurityManager.REALM) != -1);
  assert(tmp.indexOf("Basic") != -1);
  assertEquals(HttpServletResponse.SC_UNAUTHORIZED,response.getErrorCode());
  SecurityContext ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNull(ctx);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  request=createRequest("/foo/bar");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.addHeader("Authorization","Basic " + new String(Base64.encodeBytes((testUserName + ":" + testPassword).getBytes())));
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
  ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNotNull(ctx);
  Authentication auth=ctx.getAuthentication();
  assertNotNull(auth);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  checkForAuthenticatedRole(auth);
  assertEquals(testUserName,((UserDetails)auth.getPrincipal()).getUsername());
  assertTrue(auth.getAuthorities().contains(new GeoServerRole(rootRole)));
  assertTrue(auth.getAuthorities().contains(new GeoServerRole(derivedRole)));
  request=createRequest("/foo/bar");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.addHeader("Authorization","Basic " + new String(Base64.encodeBytes((testUserName + ":wrongpass").getBytes())));
  getProxy().doFilter(request,response,chain);
  tmp=response.getHeader("WWW-Authenticate");
  assertNotNull(tmp);
  assert(tmp.indexOf(GeoServerSecurityManager.REALM) != -1);
  assert(tmp.indexOf("Basic") != -1);
  assertEquals(HttpServletResponse.SC_UNAUTHORIZED,response.getErrorCode());
  ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNull(ctx);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  request=createRequest("/foo/bar");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.addHeader("Authorization","Basic " + new String(Base64.encodeBytes(("unknwon:" + testPassword).getBytes())));
  getProxy().doFilter(request,response,chain);
  tmp=response.getHeader("WWW-Authenticate");
  assertNotNull(tmp);
  assert(tmp.indexOf(GeoServerSecurityManager.REALM) != -1);
  assert(tmp.indexOf("Basic") != -1);
  assertEquals(HttpServletResponse.SC_UNAUTHORIZED,response.getErrorCode());
  ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNull(ctx);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  request=createRequest("/foo/bar");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.addHeader("Authorization","Basic " + new String(Base64.encodeBytes((GeoServerUser.ROOT_USERNAME + ":" + getMasterPassword()).getBytes())));
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
  ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  auth=ctx.getAuthentication();
  assertNotNull(auth);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  assertEquals(GeoServerUser.ROOT_USERNAME,auth.getPrincipal());
  assertTrue(auth.getAuthorities().size() == 1);
  assertTrue(auth.getAuthorities().contains(GeoServerRole.ADMIN_ROLE));
  request=createRequest("/foo/bar");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.addHeader("Authorization","Basic " + new String(Base64.encodeBytes((GeoServerUser.ROOT_USERNAME + ":geoserver1").getBytes())));
  getProxy().doFilter(request,response,chain);
  tmp=response.getHeader("WWW-Authenticate");
  assertNotNull(tmp);
  assert(tmp.indexOf(GeoServerSecurityManager.REALM) != -1);
  assert(tmp.indexOf("Basic") != -1);
  assertEquals(HttpServletResponse.SC_UNAUTHORIZED,response.getErrorCode());
  ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNull(ctx);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  getSecurityManager().getAuthenticationCache().removeAll();
  updateUser("ug1",testUserName,false);
  request=createRequest("/foo/bar");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.addHeader("Authorization","Basic " + new String(Base64.encodeBytes((testUserName + ":" + testPassword).getBytes())));
  getProxy().doFilter(request,response,chain);
  tmp=response.getHeader("WWW-Authenticate");
  assertNotNull(tmp);
  assert(tmp.indexOf(GeoServerSecurityManager.REALM) != -1);
  assert(tmp.indexOf("Basic") != -1);
  assertEquals(HttpServletResponse.SC_UNAUTHORIZED,response.getErrorCode());
  ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNull(ctx);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  updateUser("ug1",testUserName,true);
  insertAnonymousFilter(GeoServerSecurityFilterChain.DYNAMIC_EXCEPTION_TRANSLATION_FILTER);
  request=createRequest("/foo/bar");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
  removeAnonymousFilter();
}
