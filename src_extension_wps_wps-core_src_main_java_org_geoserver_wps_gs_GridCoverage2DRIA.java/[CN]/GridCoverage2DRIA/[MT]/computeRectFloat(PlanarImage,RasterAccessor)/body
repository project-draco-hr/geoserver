{
  int dstWidth=dst.getWidth();
  int dstHeight=dst.getHeight();
  int dstBands=dst.getNumBands();
  int dstLineStride=dst.getScanlineStride();
  int dstPixelStride=dst.getPixelStride();
  int[] dstBandOffsets=dst.getBandOffsets();
  float[][] dstData=dst.getFloatDataArrays();
  float[][] samples=new float[kheight][kwidth];
  int lineOffset=0;
  int minx=dst.getX(), x=0;
  int miny=dst.getY(), y=0;
  final double coords[]=new double[2];
  for (int h=0; h < dstHeight; h++) {
    int pixelOffset=lineOffset;
    lineOffset+=dstLineStride;
    y=miny + h;
    for (int w=0; w < dstWidth; w++) {
      x=minx + w;
      try {
        coords[0]=x;
        coords[1]=y;
        mapDestPoint(coords);
      }
 catch (      TransformException e) {
        LOGGER.log(Level.FINER,e.getMessage(),e);
        throw new RuntimeException(e);
      }
      int xint=floor(coords[0]);
      int yint=floor(coords[1]);
      float xfrac=(float)(coords[0] - xint);
      float yfrac=(float)(coords[1] - yint);
      if (xint < minX || xint > maxX || yint < minY || yint > maxY) {
        if (setBackground) {
          for (int b=0; b < dstBands; b++) {
            dstData[b][pixelOffset + dstBandOffsets[b]]=(float)backgroundValues[b];
          }
        }
      }
 else {
        if (interp instanceof InterpolationNearest) {
          for (int b=0; b < dstBands; b++) {
            dstData[b][pixelOffset + dstBandOffsets[b]]=iter.getSampleFloat(xint,yint,b);
          }
        }
 else {
          xint-=lpad;
          yint-=tpad;
          for (int b=0; b < dstBands; b++) {
            for (int j=0; j < kheight; j++) {
              for (int i=0; i < kwidth; i++) {
                samples[j][i]=iter.getSampleFloat(xint + i,yint + j,b);
              }
            }
            dstData[b][pixelOffset + dstBandOffsets[b]]=interp.interpolate(samples,xfrac,yfrac);
          }
        }
      }
      pixelOffset+=dstPixelStride;
    }
  }
}
