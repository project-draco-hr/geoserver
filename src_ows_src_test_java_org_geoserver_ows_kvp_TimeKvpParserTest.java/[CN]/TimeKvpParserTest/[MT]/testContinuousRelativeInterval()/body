{
  final int millisInDay=(int)TimeKvpParser.MILLIS_IN_DAY;
  TimeKvpParser timeKvpParser=new TimeKvpParser("TIME");
  Calendar back=Calendar.getInstance();
  Calendar now=(Calendar)back.clone();
  List l=new ArrayList((Collection)timeKvpParser.parse(CONTINUOUS_RELATIVE_PERIOD_H));
  now.set(Calendar.MILLISECOND,0);
  back.set(Calendar.MILLISECOND,0);
  back.add(Calendar.HOUR,-2);
  assertFalse(l.isEmpty());
  assertTrue(l.get(0) instanceof DateRange);
  DateRange range=(DateRange)l.get(0);
  assertEquals(back.getTime(),range.getMinValue());
  assertEquals(now.getTime(),range.getMaxValue());
  back=Calendar.getInstance();
  now=(Calendar)back.clone();
  l=new ArrayList((Collection)timeKvpParser.parse(CONTINUOUS_RELATIVE_PERIOD_D));
  now.set(Calendar.MILLISECOND,0);
  back.set(Calendar.MILLISECOND,0);
  back.add(Calendar.MILLISECOND,millisInDay * -10);
  assertFalse(l.isEmpty());
  assertTrue(l.get(0) instanceof DateRange);
  range=(DateRange)l.get(0);
  assertEquals(back.getTime(),range.getMinValue());
  assertEquals(now.getTime(),range.getMaxValue());
  back=Calendar.getInstance();
  now=(Calendar)back.clone();
  l=new ArrayList((Collection)timeKvpParser.parse(CONTINUOUS_RELATIVE_PERIOD_W));
  now.set(Calendar.MILLISECOND,0);
  back.set(Calendar.MILLISECOND,0);
  back.add(Calendar.MILLISECOND,millisInDay * -2 * 7);
  assertFalse(l.isEmpty());
  assertTrue(l.get(0) instanceof DateRange);
  range=(DateRange)l.get(0);
  assertEquals(back.getTime(),range.getMinValue());
  assertEquals(now.getTime(),range.getMaxValue());
}
