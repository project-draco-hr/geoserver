{
  Map<String,TopoGeom.GeometryColleciton> layers=new HashMap<>();
  for (  String layer : this.layers.keySet()) {
    Collection<TopoGeom> collection=this.layers.get(layer);
    GeometryColleciton layerCollection=new TopoGeom.GeometryColleciton(collection);
    layers.put(layer,layerCollection);
  }
  List<LineString> arcs=this.arcs;
  this.arcs=null;
  this.layers=null;
  Topology topology=new Topology(screenToWorld,arcs,layers);
  final int threshold=8096;
  DeferredFileOutputStream out=new DeferredFileOutputStream(threshold,"topology",".topojson",null);
  TopoJSONEncoder encoder=new TopoJSONEncoder();
  Writer writer=new OutputStreamWriter(out,Charsets.UTF_8);
  encoder.encode(topology,writer);
  writer.flush();
  writer.close();
  out.close();
  long length;
  RawMap map;
  if (out.isInMemory()) {
    byte[] data=out.getData();
    length=data.length;
    map=new RawMap(mapContent,data,MIME_TYPE);
  }
 else {
    File f=out.getFile();
    length=f.length();
    map=new DeferredFileOutputStreamWebMap(mapContent,out,MIME_TYPE);
  }
  map.setResponseHeader("Content-Length",String.valueOf(length));
  return map;
}
