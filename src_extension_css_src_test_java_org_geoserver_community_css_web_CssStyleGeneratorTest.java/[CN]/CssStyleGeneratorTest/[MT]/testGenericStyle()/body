{
  final CssHandler handler=new CssHandler(new SLDHandler());
  ResourcePool rp=createNiceMock(ResourcePool.class);
  rp.writeStyle((StyleInfo)anyObject(),(InputStream)anyObject());
  expectLastCall().andAnswer(new IAnswer<Void>(){
    @Override public Void answer() throws Throwable {
      Object[] args=getCurrentArguments();
      InputStream is=(InputStream)args[1];
      StyledLayerDescriptor sld=handler.parse(is,null,null,null);
      NamedLayer nl=(NamedLayer)sld.getStyledLayers()[0];
      Style style=nl.getStyles()[0];
      assertEquals(1,style.featureTypeStyles().size());
      FeatureTypeStyle fts=style.featureTypeStyles().get(0);
      assertEquals("first",fts.getOptions().get("ruleEvaluation"));
      assertEquals(7,fts.rules().size());
      assertEquals("raster",fts.rules().get(3).getDescription().getTitle().toString());
      assertEquals("orange polygon",fts.rules().get(4).getDescription().getTitle().toString());
      assertEquals("orange line",fts.rules().get(5).getDescription().getTitle().toString());
      assertEquals("orange point",fts.rules().get(6).getDescription().getTitle().toString());
      return null;
    }
  }
);
  Catalog cat=createNiceMock(Catalog.class);
  expect(cat.getFactory()).andReturn(new CatalogFactoryImpl(null)).anyTimes();
  expect(cat.getResourcePool()).andReturn(rp).anyTimes();
  WorkspaceInfo ws=createNiceMock(WorkspaceInfo.class);
  FeatureTypeInfo ft=createNiceMock(FeatureTypeInfo.class);
  expect(ft.getName()).andReturn("foo").anyTimes();
  replay(rp,ft,ws,cat);
  StyleGenerator gen=new StyleGenerator(cat){
    protected void randomizeRamp(){
    }
  }
;
  gen.setWorkspace(ws);
  SimpleFeatureType schema=DataUtilities.createType("foo","geom:Geometry");
  StyleInfo style=gen.createStyle(handler,ft,schema);
  assertNotNull(style);
  assertNotNull(style.getWorkspace());
}
