{
  try {
    Document doc=null;
    InputStream is=null;
    try {
      is=roleResource.in();
      doc=builder.parse(is);
    }
 catch (    SAXException e) {
      throw new IOException(e);
    }
 finally {
      try {
        is.close();
      }
 catch (      IOException e) {
      }
    }
    if (isValidatingXMLSchema()) {
      XMLValidator.Singleton.validateRoleRegistry(doc);
    }
    XPathExpression expr=XMLXpathFactory.Singleton.getVersionExpressionRR();
    String versioNummer=expr.evaluate(doc);
    RoleXMLXpath xmlXPath=XMLXpathFactory.Singleton.getRoleXMLXpath(versioNummer);
    clearMaps();
    NodeList roleNodes=(NodeList)xmlXPath.getRoleListExpression().evaluate(doc,XPathConstants.NODESET);
    for (int i=0; i < roleNodes.getLength(); i++) {
      Node roleNode=roleNodes.item(i);
      String roleName=xmlXPath.getRoleNameExpression().evaluate(roleNode);
      NodeList propertyNodes=(NodeList)xmlXPath.getRolePropertiesExpression().evaluate(roleNode,XPathConstants.NODESET);
      Properties roleProps=new Properties();
      for (int j=0; j < propertyNodes.getLength(); j++) {
        Node propertyNode=propertyNodes.item(j);
        String propertyName=xmlXPath.getPropertyNameExpression().evaluate(propertyNode);
        String propertyValue=xmlXPath.getPropertyValueExpression().evaluate(propertyNode);
        roleProps.put(propertyName,propertyValue);
      }
      GeoServerRole role=createRoleObject(roleName);
      role.getProperties().clear();
      for (      Object key : roleProps.keySet()) {
        role.getProperties().put(key,roleProps.get(key));
      }
      helper.roleMap.put(roleName,role);
    }
    for (int i=0; i < roleNodes.getLength(); i++) {
      Node roleNode=roleNodes.item(i);
      String roleName=xmlXPath.getRoleNameExpression().evaluate(roleNode);
      String parentName=xmlXPath.getParentExpression().evaluate(roleNode);
      if (parentName != null && parentName.length() > 0) {
        helper.role_parentMap.put(helper.roleMap.get(roleName),helper.roleMap.get(parentName));
      }
    }
    NodeList userRolesNodes=(NodeList)xmlXPath.getUserRolesExpression().evaluate(doc,XPathConstants.NODESET);
    for (int i=0; i < userRolesNodes.getLength(); i++) {
      Node userRolesNode=userRolesNodes.item(i);
      String userName=xmlXPath.getUserNameExpression().evaluate(userRolesNode);
      SortedSet<GeoServerRole> roleSet=new TreeSet<GeoServerRole>();
      helper.user_roleMap.put(userName,roleSet);
      NodeList userRolesRefNodes=(NodeList)xmlXPath.getUserRolRefsExpression().evaluate(userRolesNode,XPathConstants.NODESET);
      for (int j=0; j < userRolesRefNodes.getLength(); j++) {
        Node userRolesRefNode=userRolesRefNodes.item(j);
        String roleRef=xmlXPath.getUserRolRefNameExpression().evaluate(userRolesRefNode);
        roleSet.add(helper.roleMap.get(roleRef));
      }
    }
    NodeList groupRolesNodes=(NodeList)xmlXPath.getGroupRolesExpression().evaluate(doc,XPathConstants.NODESET);
    for (int i=0; i < groupRolesNodes.getLength(); i++) {
      Node groupRolesNode=groupRolesNodes.item(i);
      String groupName=xmlXPath.getGroupNameExpression().evaluate(groupRolesNode);
      SortedSet<GeoServerRole> roleSet=new TreeSet<GeoServerRole>();
      helper.group_roleMap.put(groupName,roleSet);
      NodeList groupRolesRefNodes=(NodeList)xmlXPath.getGroupRolRefsExpression().evaluate(groupRolesNode,XPathConstants.NODESET);
      for (int j=0; j < groupRolesRefNodes.getLength(); j++) {
        Node groupRolesRefNode=groupRolesRefNodes.item(j);
        String roleRef=xmlXPath.getGroupRolRefNameExpression().evaluate(groupRolesRefNode);
        roleSet.add(helper.roleMap.get(roleRef));
      }
    }
  }
 catch (  XPathExpressionException ex) {
    throw new IOException(ex);
  }
}
