{
  super(id,new Model());
  this.setOutputMarkupId(true);
  add(urlPathField=new TextField<String>("urlPath",new PropertyModel<String>(this,"urlPath")));
  urlPathField.setOutputMarkupId(true);
  urlPathField.add(new OnChangeAjaxBehavior(){
    @Override protected void onUpdate(    AjaxRequestTarget target){
    }
  }
);
  add(chainTestResultField=new TextField<String>("chainTestResult",new PropertyModel<String>(this,"chainTestResult")));
  chainTestResultField.setEnabled(false);
  chainTestResultField.setOutputMarkupId(true);
  add(httpMethodChoice=new DropDownChoice<HTTPMethod>("httpMethod",new PropertyModel<HTTPMethod>(this,"httpMethod"),Arrays.asList(HTTPMethod.values())));
  httpMethodChoice.setOutputMarkupId(true);
  httpMethodChoice.setNullValid(false);
  httpMethodChoice.add(new OnChangeAjaxBehavior(){
    @Override protected void onUpdate(    AjaxRequestTarget target){
    }
  }
);
  add(new AjaxSubmitLink("chainTest"){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      try {
        String result="NONE";
        HttpServletRequest request=getHttpRequest();
        for (        RequestFilterChain chain : config.getFilterChain().getRequestChains()) {
          if (httpMethod != null && urlPath != null) {
            if (getProxy().matcherForChain(chain).matches(request)) {
              result=chain.getName();
              break;
            }
          }
        }
        chainTestResultField.getModel().setObject(result);
        target.addComponent(chainTestResultField);
      }
 catch (      Exception e) {
        error(e);
        LOGGER.log(Level.WARNING,"Connection error",e);
        target.addComponent(feedbackPanel);
      }
    }
    protected GeoServerSecurityFilterChainProxy getProxy(){
      return GeoServerExtensions.bean(GeoServerSecurityFilterChainProxy.class);
    }
    HttpServletRequest getHttpRequest(){
      return new HttpServletRequest(){
        public void setCharacterEncoding(        String env) throws UnsupportedEncodingException {
        }
        public void setAttribute(        String name,        Object o){
        }
        public void removeAttribute(        String name){
        }
        public boolean isSecure(){
          return false;
        }
        public int getServerPort(){
          return 0;
        }
        public String getServerName(){
          return null;
        }
        public String getScheme(){
          return null;
        }
        public RequestDispatcher getRequestDispatcher(        String path){
          return null;
        }
        public int getRemotePort(){
          return 0;
        }
        public String getRemoteHost(){
          return null;
        }
        public String getRemoteAddr(){
          return null;
        }
        public String getRealPath(        String path){
          return null;
        }
        public BufferedReader getReader() throws IOException {
          return null;
        }
        public String getProtocol(){
          return null;
        }
        public String[] getParameterValues(        String name){
          return null;
        }
        public Enumeration getParameterNames(){
          return null;
        }
        public Map getParameterMap(){
          return null;
        }
        public String getParameter(        String name){
          return null;
        }
        public Enumeration getLocales(){
          return null;
        }
        public Locale getLocale(){
          return null;
        }
        public int getLocalPort(){
          return 0;
        }
        public String getLocalName(){
          return null;
        }
        public String getLocalAddr(){
          return null;
        }
        public ServletInputStream getInputStream() throws IOException {
          return null;
        }
        public String getContentType(){
          return null;
        }
        public int getContentLength(){
          return 0;
        }
        public String getCharacterEncoding(){
          return null;
        }
        public Enumeration getAttributeNames(){
          return null;
        }
        public Object getAttribute(        String name){
          return null;
        }
        public boolean isUserInRole(        String role){
          return false;
        }
        public boolean isRequestedSessionIdValid(){
          return false;
        }
        public boolean isRequestedSessionIdFromUrl(){
          return false;
        }
        public boolean isRequestedSessionIdFromURL(){
          return false;
        }
        public boolean isRequestedSessionIdFromCookie(){
          return false;
        }
        public Principal getUserPrincipal(){
          return null;
        }
        public HttpSession getSession(        boolean create){
          return null;
        }
        public HttpSession getSession(){
          return null;
        }
        public String getServletPath(){
          return "";
        }
        public String getRequestedSessionId(){
          return null;
        }
        public StringBuffer getRequestURL(){
          return null;
        }
        public String getRequestURI(){
          return null;
        }
        public String getRemoteUser(){
          return null;
        }
        public String getQueryString(){
          return null;
        }
        public String getPathTranslated(){
          return null;
        }
        public String getPathInfo(){
          return urlPath;
        }
        public String getMethod(){
          return httpMethod.toString();
        }
        public int getIntHeader(        String name){
          return 0;
        }
        public Enumeration getHeaders(        String name){
          return null;
        }
        public Enumeration getHeaderNames(){
          return null;
        }
        public String getHeader(        String name){
          return null;
        }
        public long getDateHeader(        String name){
          return 0;
        }
        public Cookie[] getCookies(){
          return null;
        }
        public String getContextPath(){
          return null;
        }
        public String getAuthType(){
          return null;
        }
      }
;
    }
  }
.setDefaultFormProcessing(false));
}
