{
  SecurityManagerConfig config=getSecurityManager().getSecurityConfig();
  List<RequestFilterChain> clones=new ArrayList<RequestFilterChain>();
  for (  RequestFilterChain chain : config.getFilterChain().getRequestChains()) {
    try {
      clones.add((RequestFilterChain)chain.clone());
    }
 catch (    CloneNotSupportedException e) {
      throw new RuntimeException(e);
    }
  }
  config.setFilterChain(new GeoServerSecurityFilterChain(clones));
  form=new Form("form",new CompoundPropertyModel<SecurityManagerConfig>(config));
  add(form);
  try {
    logoutFilterConfig=(LogoutFilterConfig)getSecurityManager().loadFilterConfig(GeoServerSecurityFilterChain.FORM_LOGOUT_FILTER);
  }
 catch (  IOException e1) {
    throw new RuntimeException(e1);
  }
  form.add(new TextField<String>("redirectURL",new PropertyModel<String>(this,"logoutFilterConfig.redirectURL")));
  form.add(new AuthenticationFiltersPanel("authFilters"));
  form.add(new HelpLink("authFiltersHelp").setDialog(dialog));
  form.add(new AuthenticationProvidersPanel("authProviders"));
  form.add(new HelpLink("authProvidersHelp").setDialog(dialog));
  form.add(new AuthFilterChainPanel("filterChain",new PropertyModel<GeoServerSecurityFilterChain>(form.getModel(),"filterChain")));
  form.add(new HelpLink("filterChainHelp").setDialog(dialog));
  form.add(new AuthenticationChainPanel("providerChain",form));
  form.add(new HelpLink("providerChainHelp").setDialog(dialog));
  form.add(new SubmitLink("save",form){
    @Override public void onSubmit(){
      try {
        getSecurityManager().saveSecurityConfig((SecurityManagerConfig)getForm().getModelObject());
        getSecurityManager().saveFilter(logoutFilterConfig);
        doReturn();
      }
 catch (      Exception e) {
        LOGGER.log(Level.WARNING,"Error saving authentication config",e);
        error(e);
      }
    }
  }
);
  form.add(new Link("cancel"){
    @Override public void onClick(){
      doReturn();
    }
  }
);
}
