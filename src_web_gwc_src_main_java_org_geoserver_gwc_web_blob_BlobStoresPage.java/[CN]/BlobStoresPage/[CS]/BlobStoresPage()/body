{
  add(dialog=new GeoServerDialog("confirmDeleteDialog"));
  dialog.setTitle(new ParamResourceModel("confirmDeleteDialog.title",getPage()));
  dialog.setInitialHeight(200);
  Fragment header=new Fragment(HEADER_PANEL,"header",this);
  header.add(new AjaxLink<Object>("addNew"){
    private static final long serialVersionUID=1L;
    @Override public void onClick(    AjaxRequestTarget target){
      setResponsePage(new BlobStorePage());
    }
  }
);
  header.add(remove=new AjaxLink<Object>("removeSelected"){
    private static final long serialVersionUID=1L;
    @Override public void onClick(    AjaxRequestTarget target){
      final Set<String> ids=new HashSet<String>();
      final List<String> assignedLayers=new ArrayList<String>();
      for (      BlobStoreConfig config : blobStoresPanel.getSelection()) {
        if (config.isDefault()) {
          error(new ParamResourceModel("deleteError",getPage()).getString());
          target.addComponent(feedbackPanel);
          return;
        }
        ids.add(config.getId());
      }
      for (      TileLayer layer : GWC.get().getTileLayers()) {
        if (layer.getBlobStoreId() != null) {
          if (ids.contains(layer.getBlobStoreId())) {
            assignedLayers.add(layer.getName());
          }
        }
      }
      if (assignedLayers.size() > 0) {
        dialog.showOkCancel(target,new GeoServerDialog.DialogDelegate(){
          private static final long serialVersionUID=5257987095800108993L;
          private String error=null;
          @Override protected Component getContents(          String id){
            StringBuilder sb=new StringBuilder();
            sb.append(new ParamResourceModel("confirmDeleteDialog.content",getPage()).getString());
            for (            String layerName : assignedLayers) {
              sb.append("\n&nbsp;&nbsp;");
              sb.append(escapeHtml(layerName));
            }
            return new MultiLineLabel("userPanel",sb.toString()).setEscapeModelStrings(false);
          }
          @Override protected boolean onSubmit(          AjaxRequestTarget target,          Component contents){
            try {
              GWC.get().removeBlobStores(ids);
              for (              String layerName : assignedLayers) {
                TileLayer layer=GWC.get().getTileLayerByName(layerName);
                layer.setBlobStoreId(null);
                GWC.get().save(layer);
              }
            }
 catch (            ConfigurationException e) {
              error=e.getMessage();
            }
            return true;
          }
          @Override public void onClose(          AjaxRequestTarget target){
            if (error != null) {
              error(error);
              target.addComponent(feedbackPanel);
            }
 else {
              target.addComponent(blobStoresPanel);
            }
          }
        }
);
      }
 else {
        try {
          GWC.get().removeBlobStores(ids);
        }
 catch (        ConfigurationException e) {
          error(e.toString());
          target.addComponent(feedbackPanel);
        }
        target.addComponent(blobStoresPanel);
      }
    }
  }
);
  remove.setOutputMarkupId(true);
  remove.setEnabled(false);
  setHeaderPanel(header);
  add(blobStoresPanel=new GeoServerTablePanel<BlobStoreConfig>("storesPanel",new BlobStoresProvider(),true){
    private static final long serialVersionUID=-5380703588873422601L;
    @Override protected Component getComponentForProperty(    String id,    IModel itemModel,    Property<BlobStoreConfig> property){
      final BlobStoreConfig blobStore=(BlobStoreConfig)itemModel.getObject();
      if (property == BlobStoresProvider.ID) {
        return new SimpleAjaxLink(id,itemModel,property.getModel(itemModel)){
          private static final long serialVersionUID=1L;
          @Override protected void onClick(          AjaxRequestTarget target){
            setResponsePage(new BlobStorePage(blobStore));
          }
        }
;
      }
 else       if (property == BlobStoresProvider.DEFAULT) {
        if (blobStore.isDefault()) {
          return new Icon(id,CatalogIconFactory.ENABLED_ICON);
        }
 else {
          return new Label(id,"");
        }
      }
 else       if (property == BlobStoresProvider.ENABLED) {
        if (blobStore.isEnabled()) {
          return new Icon(id,CatalogIconFactory.ENABLED_ICON);
        }
 else {
          return new Label(id,"");
        }
      }
 else       if (property == BlobStoresProvider.TYPE) {
        return new Label(id,BlobStoreTypeStore.getInstance().getFromClass(blobStore.getClass()).toString());
      }
      return null;
    }
    @Override protected void onSelectionUpdate(    AjaxRequestTarget target){
      remove.setEnabled(blobStoresPanel.getSelection().size() > 0);
      target.addComponent(remove);
    }
  }
);
  blobStoresPanel.setOutputMarkupId(true);
}
