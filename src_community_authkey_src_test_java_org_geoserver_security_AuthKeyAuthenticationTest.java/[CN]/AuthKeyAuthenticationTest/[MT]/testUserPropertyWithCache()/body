{
  String authKeyUrlParam="myAuthKey";
  String filterName="testAuthKeyFilter2";
  AuthenticationKeyFilterConfig config=new AuthenticationKeyFilterConfig();
  config.setClassName(GeoServerAuthenticationKeyFilter.class.getName());
  config.setName(filterName);
  config.setUserGroupServiceName("ug1");
  config.setAuthKeyParamName(authKeyUrlParam);
  config.setAuthKeyMapperName("userPropertyMapper");
  getSecurityManager().saveFilter(config);
  GeoServerAuthenticationKeyFilter filter=(GeoServerAuthenticationKeyFilter)getSecurityManager().loadFilter(filterName);
  UserPropertyAuthenticationKeyMapper mapper=(UserPropertyAuthenticationKeyMapper)filter.getMapper();
  mapper.synchronize();
  prepareFilterChain(pattern,filterName);
  modifyChain(pattern,false,false,null);
  SecurityContextHolder.getContext().setAuthentication(null);
  MockHttpServletRequest request=createRequest("/foo/bar");
  MockHttpServletResponse response=new MockHttpServletResponse();
  MockFilterChain chain=new MockFilterChain();
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_FORBIDDEN,response.getStatus());
  GeoServerUser user=(GeoServerUser)getSecurityManager().loadUserGroupService("ug1").loadUserByUsername(testUserName);
  String authKey=user.getProperties().getProperty(mapper.getUserPropertyName());
  assertNotNull(authKey);
  request=createRequest("/foo/bar");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.setQueryString(authKeyUrlParam + "=" + authKey);
  request.addParameter(authKeyUrlParam,authKey);
  getProxy().doFilter(request,response,chain);
  assertFalse(response.getStatus() == MockHttpServletResponse.SC_MOVED_TEMPORARILY);
  Authentication auth=(Authentication)getCache().get(filterName,authKey);
  assertNotNull(auth);
  assertNull(request.getSession(false));
  checkForAuthenticatedRole(auth);
  assertEquals(testUserName,auth.getPrincipal());
  username="unknown";
  password=username;
  request=createRequest("/foo/bar");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.setQueryString(authKeyUrlParam + "=abc");
  request.addParameter(authKeyUrlParam,"abc");
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_FORBIDDEN,response.getStatus());
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  getCache().removeAll();
  username=testUserName;
  password=username;
  updateUser("ug1",username,false);
  request=createRequest("/foo/bar");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.setQueryString(authKeyUrlParam + "=" + authKey);
  request.addParameter(authKeyUrlParam,authKey);
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_FORBIDDEN,response.getStatus());
  assertNull(getCache().get(filterName,authKey));
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  updateUser("ug1",username,true);
  insertAnonymousFilter();
  request=createRequest("foo/bar");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getStatus());
  removeAnonymousFilter();
}
