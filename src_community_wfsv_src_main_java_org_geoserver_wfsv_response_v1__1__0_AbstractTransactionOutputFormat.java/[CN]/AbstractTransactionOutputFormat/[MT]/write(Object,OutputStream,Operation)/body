{
  final FeatureDiffReader[] diffReaders=(FeatureDiffReader[])value;
  VersioningTransactionConverter converter=new VersioningTransactionConverter();
  final TransactionType transaction=converter.convert(diffReaders,TransactionType.class);
  BaseRequestType gft=(BaseRequestType)operation.getParameters()[0];
  Encoder encoder=new Encoder(configuration,configuration.schema());
  encodeWfsSchemaLocation(encoder,gft.getBaseUrl());
  encoder.setIndenting(true);
  encoder.setEncoding(Charset.forName(geoServer.getSettings().getCharset()));
  HashMap ns2metas=new HashMap();
  for (int i=0; i < diffReaders.length; i++) {
    final FeatureDiffReader diffReader=diffReaders[i];
    final SimpleFeatureType featureType=diffReader.getSchema();
    String namespaceURI=featureType.getName().getNamespaceURI();
    FeatureTypeInfo meta=geoServer.getCatalog().getFeatureTypeByName(namespaceURI,featureType.getName().getLocalPart());
    Set metas=(Set)ns2metas.get(namespaceURI);
    if (metas == null) {
      metas=new HashSet();
      ns2metas.put(namespaceURI,metas);
    }
    metas.add(meta);
  }
  for (Iterator i=ns2metas.entrySet().iterator(); i.hasNext(); ) {
    Map.Entry entry=(Map.Entry)i.next();
    String namespaceURI=(String)entry.getKey();
    Set metas=(Set)entry.getValue();
    StringBuffer typeNames=new StringBuffer();
    for (Iterator m=metas.iterator(); m.hasNext(); ) {
      FeatureTypeInfo meta=(FeatureTypeInfo)m.next();
      typeNames.append(meta.getName());
      if (m.hasNext()) {
        typeNames.append(",");
      }
    }
    encodeTypeSchemaLocation(encoder,gft.getBaseUrl(),namespaceURI,typeNames);
  }
  try {
    encoder.encode(transaction,element,output);
  }
  finally {
    for (int i=0; i < diffReaders.length; i++) {
      diffReaders[i].close();
    }
  }
}
