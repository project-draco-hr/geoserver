{
  String timeMetadata=null;
  final StringBuilder buff=new StringBuilder();
  final SimpleDateFormat df=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
  df.setTimeZone(TimeZone.getTimeZone("UTC"));
  if (DimensionPresentation.LIST == dimension.getPresentation()) {
    for (    Date date : values) {
      buff.append(df.format(date)).append("Z");
      buff.append(",");
    }
    timeMetadata=buff.substring(0,buff.length() - 1).toString().replaceAll("\\[","").replaceAll("\\]","").replaceAll(" ","");
  }
 else   if (DimensionPresentation.CONTINUOUS_INTERVAL == dimension.getPresentation()) {
    buff.append(df.format(((TreeSet<Date>)values).first())).append("Z");
    buff.append("/");
    buff.append(df.format(((TreeSet<Date>)values).last())).append("Z");
    buff.append("/");
    long durationInMilliSeconds=((TreeSet<Date>)values).last().getTime() - ((TreeSet<Date>)values).first().getTime();
    buff.append(new DefaultPeriodDuration(durationInMilliSeconds).toString());
    timeMetadata=buff.toString();
  }
 else   if (DimensionPresentation.DISCRETE_INTERVAL == dimension.getPresentation()) {
    buff.append(df.format(((TreeSet<Date>)values).first())).append("Z");
    buff.append("/");
    buff.append(df.format(((TreeSet<Date>)values).last())).append("Z");
    buff.append("/");
    final BigDecimal resolution=dimension.getResolution();
    if (resolution != null) {
      buff.append(new DefaultPeriodDuration(resolution.longValue()).toString());
    }
 else {
      if (values.size() >= 2) {
        int count=2, i=2;
        Date[] timePositions=new Date[count];
        for (        Date date : values) {
          timePositions[count - i--]=date;
          if (i == 0)           break;
        }
        long durationInMilliSeconds=timePositions[count - 1].getTime() - timePositions[count - 2].getTime();
        buff.append(new DefaultPeriodDuration(durationInMilliSeconds).toString());
      }
 else {
        buff.append(new DefaultPeriodDuration(0).toString());
      }
    }
    timeMetadata=buff.toString();
  }
  return timeMetadata;
}
