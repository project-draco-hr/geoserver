{
  ColorMap cm;
  LinearColorMap lcm=toLinearColorMap(sourceCM);
  IndexColorModel icm=lcm.getColorModel();
  cm=SF.createColorMap();
  cm.addColorMapEntry(entryForValue(min - Math.ulp(min),quantityMapper.apply(min),lcm,icm));
  double step=(max - min) / (numColors);
  for (int i=0; i < (numColors - 1); i++) {
    double v=min + step * i;
    double mapValue=v;
    if (useIntervals) {
      mapValue=v + step;
    }
    cm.addColorMapEntry(entryForValue(v,quantityMapper.apply(mapValue),lcm,icm));
  }
  cm.addColorMapEntry(entryForValue(max - Math.ulp(max),quantityMapper.apply(max),lcm,icm));
  if (useIntervals) {
    cm.setType(ColorMap.TYPE_INTERVALS);
    cm.addColorMapEntry(entryForValue(max,Double.POSITIVE_INFINITY,lcm,icm));
  }
 else {
    cm.addColorMapEntry(entryForValue(max,quantityMapper.apply(max),lcm,icm));
  }
  return cm;
}
