{
  byte[] colors=new byte[ncolors];
  for (int i=0; i < ncolors; i++) {
    colors[i]=(byte)i;
  }
  int nbits;
  if (ncolors <= 2) {
    nbits=1;
  }
 else {
    nbits=(int)Math.ceil(Math.log(ncolors) / Math.log(2));
    if ((nbits & (nbits - 1)) != 0) {
      int nextPower=(int)(Math.floor(Math.log(nbits) / Math.log(2)) + 1);
      nbits=(int)Math.pow(2,nextPower);
    }
  }
  IndexColorModel icm=new IndexColorModel(nbits,ncolors,colors,colors,colors);
  SampleModel sm=new MultiPixelPackedSampleModel(DataBuffer.TYPE_BYTE,size,size,nbits);
  int pixelsPerByte=8 / nbits;
  int bytesPerRow=(int)Math.max(1,Math.ceil(1d * size / pixelsPerByte));
  int bytes=bytesPerRow * size;
  DataBufferByte dataBuffer=new DataBufferByte(bytes);
  WritableRaster wr=(WritableRaster)Raster.createWritableRaster(sm,dataBuffer,new Point(0,0));
  BufferedImage bi=new BufferedImage(icm,wr,false,null);
  Graphics2D graphics=bi.createGraphics();
  graphics.setColor(Color.BLACK);
  graphics.fillRect(0,0,16,32);
  graphics.setColor(Color.WHITE);
  graphics.fillRect(16,0,16,32);
  graphics.dispose();
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  new PNGJWriter().writePNG(bi,bos,5,FilterType.FILTER_NONE);
  BufferedImage read=ImageIO.read(new ByteArrayInputStream(bos.toByteArray()));
  ImageAssert.assertImagesEqual(bi,read);
}
