{
  super(id,model);
  final WebMarkupContainer configsContainer=new WebMarkupContainer("configContainer");
  configsContainer.setOutputMarkupId(true);
  add(configsContainer);
  final WebMarkupContainer configs=new WebMarkupContainer("configs");
  configs.setOutputMarkupId(true);
  configs.setVisible(getModelObject().isEnabled());
  configsContainer.add(configs);
  final PropertyModel<Boolean> enabledModel=new PropertyModel<Boolean>(model,"enabled");
  enabled=new CheckBox("enabled",enabledModel);
  add(enabled);
  enabled.add(new AjaxFormComponentUpdatingBehavior("onclick"){
    @Override protected void onUpdate(    AjaxRequestTarget target){
      Boolean visile=enabled.getModelObject();
      configs.setVisible(visile);
      target.addComponent(configsContainer);
    }
  }
);
  Label noAttributeMessage=new Label("noAttributeMsg","");
  add(noAttributeMessage);
  WebMarkupContainer attContainer=new WebMarkupContainer("attributeContainer");
  configs.add(attContainer);
  List<String> attributes=getAttributesOfType(resource,type);
  attribute=new DropDownChoice<String>("attribute",new PropertyModel<String>(model,"attribute"),attributes);
  attribute.setOutputMarkupId(true);
  attribute.setRequired(true);
  attContainer.add(attribute);
  List<String> endAttributes=new ArrayList<String>(attributes);
  endAttributes.add(0,"-");
  endAttribute=new DropDownChoice<String>("endAttribute",new PropertyModel<String>(model,"endAttribute"),endAttributes);
  endAttribute.setOutputMarkupId(true);
  endAttribute.setRequired(false);
  attContainer.add(endAttribute);
  if (resource instanceof FeatureTypeInfo) {
    if (attributes.isEmpty()) {
      disableDimension(type,configs,noAttributeMessage);
    }
 else {
      noAttributeMessage.setVisible(false);
    }
  }
 else   if (resource instanceof CoverageInfo) {
    attContainer.setVisible(false);
    attribute.setRequired(false);
    try {
      GridCoverageReader reader=((CoverageInfo)resource).getGridCoverageReader(null,null);
      if (Number.class.isAssignableFrom(type)) {
        String elev=reader.getMetadataValue(GridCoverage2DReader.HAS_ELEVATION_DOMAIN);
        if (!Boolean.parseBoolean(elev)) {
          disableDimension(type,configs,noAttributeMessage);
        }
      }
 else       if (Date.class.isAssignableFrom(type)) {
        String time=reader.getMetadataValue(GridCoverage2DReader.HAS_TIME_DOMAIN);
        if (!Boolean.parseBoolean(time)) {
          disableDimension(type,configs,noAttributeMessage);
        }
      }
    }
 catch (    IOException e) {
      throw new WicketRuntimeException(e);
    }
  }
  final WebMarkupContainer unitsContainer=new WebMarkupContainer("unitsContainer");
  configs.add(unitsContainer);
  IModel<String> uModel=new PropertyModel<String>(model,"units");
  units=new TextField<String>("units",uModel);
  unitsContainer.add(units);
  IModel<String> usModel=new PropertyModel<String>(model,"unitSymbol");
  unitSymbol=new TextField<String>("unitSymbol",usModel);
  unitsContainer.add(unitSymbol);
  if ("elevation".equals(id) && uModel.getObject() == null) {
    uModel.setObject(DimensionInfo.ELEVATION_UNITS);
    usModel.setObject(DimensionInfo.ELEVATION_UNIT_SYMBOL);
  }
  final WebMarkupContainer resContainer=new WebMarkupContainer("resolutionContainer");
  resContainer.setOutputMarkupId(true);
  configs.add(resContainer);
  final WebMarkupContainer resolutions=new WebMarkupContainer("resolutions");
  resolutions.setVisible(model.getObject().getPresentation() == DimensionPresentation.DISCRETE_INTERVAL);
  resolutions.setOutputMarkupId(true);
  resContainer.add(resolutions);
  presentationModes=new ArrayList<DimensionPresentation>(Arrays.asList(DimensionPresentation.values()));
  presentation=new DropDownChoice<DimensionPresentation>("presentation",new PropertyModel<DimensionPresentation>(model,"presentation"),presentationModes,new PresentationModeRenderer());
  configs.add(presentation);
  presentation.setRequired(true);
  presentation.add(new AjaxFormComponentUpdatingBehavior("onchange"){
    @Override protected void onUpdate(    AjaxRequestTarget target){
      boolean visible=presentation.getModelObject() == DimensionPresentation.DISCRETE_INTERVAL;
      resolutions.setVisible(visible);
      target.addComponent(resContainer);
    }
  }
);
  IModel<BigDecimal> rmodel=new PropertyModel<BigDecimal>(model,"resolution");
  resTime=new PeriodEditor("resTime",rmodel);
  resolutions.add(resTime);
  resElevation=new TextField<BigDecimal>("resElevation",rmodel);
  resolutions.add(resElevation);
  time=Date.class.isAssignableFrom(type);
  if (time) {
    resElevation.setVisible(false);
    resTime.setRequired(true);
    unitsContainer.setVisible(false);
  }
 else {
    resTime.setVisible(false);
    resElevation.setRequired(true);
  }
  DimensionDefaultValueSetting defValueSetting=model.getObject().getDefaultValue();
  if (defValueSetting == null) {
    defValueSetting=new DimensionDefaultValueSetting();
    model.getObject().setDefaultValue(defValueSetting);
  }
  final WebMarkupContainer defValueContainer=new WebMarkupContainer("defaultValueContainer");
  defValueContainer.setOutputMarkupId(true);
  configs.add(defValueContainer);
  final WebMarkupContainer referenceValueContainer=new WebMarkupContainer("referenceValueContainer");
  referenceValueContainer.setOutputMarkupId(true);
  referenceValueContainer.setVisible((defValueSetting.getStrategyType() == Strategy.FIXED) || (defValueSetting.getStrategyType() == Strategy.NEAREST));
  defValueContainer.add(referenceValueContainer);
  defaultValueStrategies=new ArrayList<DimensionDefaultValueSetting.Strategy>(Arrays.asList(DimensionDefaultValueSetting.Strategy.values()));
  IModel<DimensionDefaultValueSetting.Strategy> strategyModel=new PropertyModel<DimensionDefaultValueSetting.Strategy>(model.getObject().getDefaultValue(),"strategy");
  defaultValueStrategy=new DropDownChoice<DimensionDefaultValueSetting.Strategy>("strategy",strategyModel,defaultValueStrategies,new DefaultValueStrategyRenderer());
  configs.add(defaultValueStrategy);
  defaultValueStrategy.add(new AjaxFormComponentUpdatingBehavior("onchange"){
    @Override protected void onUpdate(    AjaxRequestTarget target){
      boolean visible=(defaultValueStrategy.getModelObject() == Strategy.FIXED) || (defaultValueStrategy.getModelObject() == Strategy.NEAREST);
      referenceValueContainer.setVisible(visible);
      target.addComponent(defValueContainer);
    }
  }
);
  defValueContainer.add(defaultValueStrategy);
  final Label refValueValidationMessage=new Label("refValueValidationMsg","");
  refValueValidationMessage.setVisible(false);
  IModel<String> refValueModel=new PropertyModel<String>(model.getObject().getDefaultValue(),"referenceValue");
  referenceValue=new TextField<String>("referenceValue",refValueModel);
  referenceValue.add(new AjaxFormComponentUpdatingBehavior("onchange"){
    protected void onUpdate(    AjaxRequestTarget target){
      refValueValidationMessage.setDefaultModelObject(null);
      refValueValidationMessage.setVisible(false);
      target.addComponent(referenceValueContainer);
    }
    @Override protected void onError(    AjaxRequestTarget target,    RuntimeException e){
      super.onError(target,e);
      if (referenceValue.hasErrorMessage()) {
        refValueValidationMessage.setDefaultModelObject(referenceValue.getFeedbackMessage().getMessage());
        refValueValidationMessage.setVisible(true);
      }
      target.addComponent(referenceValueContainer);
    }
  }
);
  referenceValue.add(new ReferenceValueValidator(id,strategyModel));
  referenceValueContainer.add(referenceValue);
  referenceValueContainer.add(refValueValidationMessage);
  if ("time".equals(id) && refValueModel.getObject() == null && strategyModel.getObject() == Strategy.NEAREST) {
    refValueModel.setObject(DimensionDefaultValueSetting.TIME_CURRENT);
  }
}
