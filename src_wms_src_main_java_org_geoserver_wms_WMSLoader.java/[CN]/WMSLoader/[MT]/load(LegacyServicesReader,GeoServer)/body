{
  WMSInfoImpl wms=new WMSInfoImpl();
  wms.setId("wms");
  Map<String,Object> props=reader.wms();
  readCommon(wms,props,geoServer);
  WatermarkInfo wm=new WatermarkInfoImpl();
  wm.setEnabled((Boolean)props.get("globalWatermarking"));
  wm.setURL((String)props.get("globalWatermarkingURL"));
  wm.setTransparency((Integer)props.get("globalWatermarkingTransparency"));
  wm.setPosition(Position.get((Integer)props.get("globalWatermarkingPosition")));
  wms.setWatermark(wm);
  try {
    wms.setInterpolation(WMSInterpolation.valueOf((String)props.get("allowInterpolation")));
  }
 catch (  Exception e) {
    wms.setInterpolation(WMSInterpolation.Nearest);
  }
  wms.getMetadata().put("svgRenderer",(Serializable)props.get("svgRenderer"));
  wms.getMetadata().put("svgAntiAlias",(Serializable)props.get("svgAntiAlias"));
  wms.setMaxBuffer((Integer)props.get("maxBuffer"));
  wms.setMaxRequestMemory((Integer)props.get("maxRequestMemory"));
  wms.setMaxRenderingTime((Integer)props.get("maxRenderingTime"));
  wms.setMaxRenderingErrors((Integer)props.get("maxRenderingErrors"));
  Catalog catalog=geoServer.getCatalog();
  if (catalog instanceof Wrapper)   catalog=((Wrapper)catalog).unwrap(Catalog.class);
  CatalogFactory factory=catalog.getFactory();
  List<Map> baseMaps=(List<Map>)props.get("BaseMapGroups");
  if (baseMaps != null) {
    O:     for (    Map baseMap : baseMaps) {
      LayerGroupInfo bm=factory.createLayerGroup();
      bm.setName((String)baseMap.get("baseMapTitle"));
      List<String> layerNames=(List)baseMap.get("baseMapLayers");
      for (      String layerName : layerNames) {
        ResourceInfo resource=null;
        if (layerName.contains(":")) {
          String[] qname=layerName.split(":");
          resource=catalog.getResourceByName(qname[0],qname[1],ResourceInfo.class);
        }
 else {
          resource=catalog.getResourceByName(layerName,ResourceInfo.class);
        }
        if (resource == null) {
          LOGGER.warning("Ignoring layer group '" + bm.getName() + "', resource '"+ layerName+ "' does not exist");
          continue O;
        }
        List<LayerInfo> layers=catalog.getLayers(resource);
        if (layers.isEmpty()) {
          LOGGER.warning("Ignoring layer group '" + bm.getName() + "', no layer found for resource '"+ layerName+ "'");
          continue O;
        }
        bm.getLayers().add(layers.get(0));
      }
      List<String> styleNames=(List)baseMap.get("baseMapStyles");
      if (styleNames.isEmpty()) {
        for (        LayerInfo l : bm.getLayers()) {
          bm.getStyles().add(null);
        }
      }
 else {
        for (int i=0; i < styleNames.size(); i++) {
          String styleName=styleNames.get(i);
          styleName=styleName.trim();
          StyleInfo style=null;
          if ("".equals(styleName)) {
            style=null;
          }
 else {
            style=catalog.getStyleByName(styleName);
          }
          bm.getStyles().add(style);
        }
      }
      bm.getMetadata().put("rawStyleList",(String)baseMap.get("rawBaseMapStyles"));
      ReferencedEnvelope e=(ReferencedEnvelope)baseMap.get("baseMapEnvelope");
      if (e == null) {
        e=new ReferencedEnvelope();
        e.setToNull();
      }
      bm.setBounds(e);
      LOGGER.info("Processed layer group '" + bm.getName() + "'");
      catalog.add(bm);
    }
  }
  wms.getVersions().add(WMS.VERSION_1_1_1);
  wms.getVersions().add(WMS.VERSION_1_3_0);
  return wms;
}
