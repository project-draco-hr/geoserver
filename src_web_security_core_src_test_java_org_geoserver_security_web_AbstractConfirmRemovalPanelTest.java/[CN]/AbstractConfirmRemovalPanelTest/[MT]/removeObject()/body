{
  insertValues();
  T removeableObject=getRemoveableObject();
  assertNotNull(removeableObject);
  setupPanel(Collections.singletonList(removeableObject));
  tester.assertRenderedPage(FormTestPage.class);
  tester.assertNoErrorMessage();
  assertTrue(labelTextForRemovedObjects().matches(getRemoveableObjectRegExp()));
  tester.assertVisible("form:panel:removedObjects");
  tester.assertInvisible("form:panel:problematicObjects");
  T problematicObject=getProblematicObject();
  if (problematicObject != null) {
    setupPanel(Collections.singletonList(problematicObject));
    tester.assertRenderedPage(FormTestPage.class);
    tester.assertNoErrorMessage();
    assertTrue(labelTextForProblematicObjects().matches(getProblematicObjectRegExp()));
    tester.assertInvisible("form:panel:removedObjects");
    tester.assertVisible("form:panel:problematicObjects");
  }
  if (removeableObject != null && problematicObject != null) {
    List<T> objects=new ArrayList<T>();
    objects.add(removeableObject);
    objects.add(problematicObject);
    setupPanel(objects);
    tester.assertRenderedPage(FormTestPage.class);
    tester.assertNoErrorMessage();
    assertTrue(labelTextForRemovedObjects().matches(getRemoveableObjectRegExp()));
    assertTrue(labelTextForProblematicObjects().matches(getProblematicObjectRegExp()));
    tester.assertVisible("form:panel:removedObjects");
    tester.assertVisible("form:panel:problematicObjects");
  }
}
