{
  List<Dimension> netCDFDimensions=new LinkedList<Dimension>();
  for (  NetCDFDimensionMapping dimension : dimensionsManager.getDimensions()) {
    netCDFDimensions.add(dimension.getNetCDFDimension());
  }
  String coverageName=sampleGranule.getName().toString();
  int dataType=sampleGranule.getRenderedImage().getSampleModel().getDataType();
  DataType varDataType=getDataType(dataType);
  if (variableName != null && !variableName.isEmpty()) {
    coverageName=variableName;
  }
  Variable var=writer.addVariable(null,coverageName,varDataType,netCDFDimensions);
  GridSampleDimension[] sampleDimensions=sampleGranule.getSampleDimensions();
  boolean noDataSet=false;
  noDataValue=Double.NaN;
  Unit<?> inputUoM=null;
  if (sampleDimensions != null && sampleDimensions.length > 0) {
    GridSampleDimension sampleDimension=sampleDimensions[0];
    inputUoM=sampleDimension.getUnits();
    double[] noData=sampleDimension.getNoDataValues();
    if (noData != null && noData.length > 0) {
      noDataValue=noData[0];
      noDataSet=true;
    }
  }
  if (!noDataSet) {
    NoDataContainer noDataProperty=CoverageUtilities.getNoDataProperty(sampleGranule);
    if (noDataProperty != null) {
      noDataValue=noDataProperty.getAsSingleValue();
      noDataSet=true;
    }
  }
  if (variableName != null && !variableName.isEmpty()) {
    writer.addVariableAttribute(var,new Attribute(NetCDFUtilities.LONG_NAME,variableName));
  }
  if (var.findAttribute(NetCDFUtilities.UNITS) == null) {
    String unit=null;
    boolean hasDefinedUoM=(variableUoM != null && !variableUoM.isEmpty());
    if (hasDefinedUoM) {
      unit=variableUoM;
    }
 else     if (inputUoM != null) {
      unit=inputUoM.toString();
    }
    if (unit != null) {
      writer.addVariableAttribute(var,new Attribute(NetCDFUtilities.UNITS,unit));
    }
    if (inputUoM != null && hasDefinedUoM) {
      String unitString=variableUoM.replace(" ","*").replace("-","^-").replace(".","*").replace("m2","m^2").replace("m3","m^3").replace("s2","s^2");
      try {
        Unit outputUoM=Unit.valueOf(unitString);
        if (outputUoM != null && !inputUoM.equals(outputUoM)) {
          if (!inputUoM.isCompatible(outputUoM)) {
            if (LOGGER.isLoggable(Level.WARNING)) {
              LOGGER.warning("input unit " + inputUoM.toString() + " and output unit "+ outputUoM.toString()+ " are incompatible.\nNo unit conversion will be performed");
            }
          }
 else {
            unitConverter=inputUoM.getConverterTo(outputUoM);
          }
        }
      }
 catch (      ConversionException ce) {
        if (LOGGER.isLoggable(Level.SEVERE)) {
          LOGGER.severe("Unable to create a converter for the specified unit: " + unitString + "\nNo unit conversion will be performed");
        }
      }
catch (      IllegalArgumentException e) {
        if (LOGGER.isLoggable(Level.SEVERE)) {
          LOGGER.severe("Unable to parse the specified unit: " + unitString + "\nNo unit conversion will be performed");
        }
      }
    }
  }
  if (checkCompliant(var)) {
    writer.addVariableAttribute(var,new Attribute(NetCDFUtilities.STANDARD_NAME,variableName));
  }
  if (dataPacking != DataPacking.NONE) {
    DataStats updatedStats=stats;
    if (unitConverter != null) {
      updatedStats.setMax(unitConverter.convert(updatedStats.getMax()));
      updatedStats.setMin(unitConverter.convert(updatedStats.getMin()));
    }
    dataPacker=dataPacking.getDataPacker(updatedStats);
    writer.addVariableAttribute(var,new Attribute(DataPacking.ADD_OFFSET,dataPacker.getOffset()));
    writer.addVariableAttribute(var,new Attribute(DataPacking.SCALE_FACTOR,dataPacker.getScale()));
  }
  if (noDataSet) {
    Number noData=dataPacker != null ? dataPacker.getReservedValue() : noDataValue;
    writer.addVariableAttribute(var,new Attribute(NetCDFUtilities.FILL_VALUE,NetCDFUtilities.transcodeNumber(varDataType,noData)));
  }
  crsWriter.initializeGridMapping(var);
}
