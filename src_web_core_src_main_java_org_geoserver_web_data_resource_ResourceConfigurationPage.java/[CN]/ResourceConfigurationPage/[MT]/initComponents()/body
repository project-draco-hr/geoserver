{
  this.returnPage=LayerPage.class;
  this.tabPanelCustomModels=new LinkedHashMap<Class<? extends LayerEditTabPanel>,IModel<?>>();
  add(new Label("resourcename",getResourceInfo().getPrefixedName()));
  Form theForm=new Form("resource",myResourceModel);
  add(theForm);
  List<ITab> tabs=new ArrayList<ITab>();
  tabs.add(new AbstractTab(new org.apache.wicket.model.ResourceModel("ResourceConfigurationPage.Data")){
    public Panel getPanel(    String panelID){
      return new DataLayerEditTabPanel(panelID,myLayerModel);
    }
  }
);
  tabPanelCustomModels.put(DataLayerEditTabPanel.class,null);
  tabs.add(new AbstractTab(new org.apache.wicket.model.ResourceModel("ResourceConfigurationPage.Publishing")){
    public Panel getPanel(    String panelID){
      return new PublishingLayerEditTabPanel(panelID,myLayerModel);
    }
  }
);
  tabPanelCustomModels.put(PublishingLayerEditTabPanel.class,null);
  List<LayerEditTabPanelInfo> tabPanels=getGeoServerApplication().getBeansOfType(LayerEditTabPanelInfo.class);
  Collections.sort(tabPanels,new Comparator<LayerEditTabPanelInfo>(){
    public int compare(    LayerEditTabPanelInfo o1,    LayerEditTabPanelInfo o2){
      Integer order1=o1.getOrder() >= 0 ? o1.getOrder() : Integer.MAX_VALUE;
      Integer order2=o2.getOrder() >= 0 ? o2.getOrder() : Integer.MAX_VALUE;
      return order1.compareTo(order2);
    }
  }
);
  for (  LayerEditTabPanelInfo tabPanelInfo : tabPanels) {
    String titleKey=tabPanelInfo.getTitleKey();
    IModel titleModel=null;
    if (titleKey != null) {
      titleModel=new org.apache.wicket.model.ResourceModel(titleKey);
    }
 else {
      titleModel=new Model(tabPanelInfo.getComponentClass().getSimpleName());
    }
    final Class<LayerEditTabPanel> panelClass=tabPanelInfo.getComponentClass();
    IModel<?> panelCustomModel=tabPanelInfo.createOwnModel(myResourceModel,myLayerModel,isNew);
    tabPanelCustomModels.put(panelClass,panelCustomModel);
    tabs.add(new AbstractTab(titleModel){
      private final Class<LayerEditTabPanel> panelType=panelClass;
      @Override public Panel getPanel(      String panelId){
        LayerEditTabPanel tabPanel;
        final IModel<?> panelCustomModel=tabPanelCustomModels.get(panelType);
        try {
          if (panelCustomModel == null) {
            tabPanel=panelClass.getConstructor(String.class,IModel.class).newInstance(panelId,myLayerModel);
          }
 else {
            tabPanel=panelClass.getConstructor(String.class,IModel.class,IModel.class).newInstance(panelId,myLayerModel,panelCustomModel);
          }
        }
 catch (        Exception e) {
          throw new WicketRuntimeException(e);
        }
        return tabPanel;
      }
    }
);
  }
  tabbedPanel=new TabbedPanel("tabs",tabs){
    @Override protected WebMarkupContainer newLink(    String linkId,    final int index){
      return new SubmitLink(linkId){
        @Override public void onSubmit(){
          setSelectedTab(index);
        }
      }
;
    }
  }
;
  theForm.add(tabbedPanel);
  theForm.add(saveLink());
  theForm.add(cancelLink());
}
