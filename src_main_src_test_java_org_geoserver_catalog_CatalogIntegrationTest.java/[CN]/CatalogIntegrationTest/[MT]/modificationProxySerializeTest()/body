{
  Catalog catalog=getCatalog();
  WorkspaceInfo ws=catalog.getWorkspaceByName(MockData.CITE_PREFIX);
  WorkspaceInfo ws2=serialize(ws);
  assertSame(ModificationProxy.unwrap(ws),ModificationProxy.unwrap(ws2));
  NamespaceInfo ns=catalog.getNamespaceByPrefix(MockData.CITE_PREFIX);
  NamespaceInfo ns2=serialize(ns);
  assertSame(ModificationProxy.unwrap(ns),ModificationProxy.unwrap(ns2));
  DataStoreInfo ds=catalog.getDataStoreByName(MockData.CITE_PREFIX);
  DataStoreInfo ds2=serialize(ds);
  assertSame(ModificationProxy.unwrap(ds),ModificationProxy.unwrap(ds2));
  assertSame(ModificationProxy.unwrap(ds.getWorkspace()),ModificationProxy.unwrap(ds2.getWorkspace()));
  CoverageStoreInfo cs=catalog.getCoverageStoreByName(MockData.TASMANIA_DEM.getLocalPart());
  CoverageStoreInfo cs2=serialize(cs);
  assertSame(ModificationProxy.unwrap(cs),ModificationProxy.unwrap(cs2));
  assertSame(ModificationProxy.unwrap(cs.getWorkspace()),ModificationProxy.unwrap(cs2.getWorkspace()));
  FeatureTypeInfo ft=catalog.getFeatureTypeByName(getLayerId(MockData.BRIDGES));
  FeatureTypeInfo ft2=serialize(ft);
  assertSame(ModificationProxy.unwrap(ft),ModificationProxy.unwrap(ft2));
  assertSame(ModificationProxy.unwrap(ft.getStore()),ModificationProxy.unwrap(ft2.getStore()));
  CoverageInfo ci=catalog.getCoverageByName(getLayerId(MockData.TASMANIA_DEM));
  CoverageInfo ci2=serialize(ci);
  assertSame(ModificationProxy.unwrap(ci),ModificationProxy.unwrap(ci2));
  assertSame(ModificationProxy.unwrap(ci.getStore()),ModificationProxy.unwrap(ci.getStore()));
  StyleInfo si=catalog.getStyleByName("default");
  StyleInfo si2=serialize(si);
  assertSame(ModificationProxy.unwrap(si),ModificationProxy.unwrap(si2));
  LayerInfo li=catalog.getLayerByName(getLayerId(MockData.BRIDGES));
  li.getStyles().add(catalog.getStyleByName("default"));
  catalog.save(li);
  LayerInfo li2=serialize(li);
  assertSame(ModificationProxy.unwrap(li),ModificationProxy.unwrap(li2));
  assertSame(ModificationProxy.unwrap(li.getResource()),ModificationProxy.unwrap(li2.getResource()));
  assertSame(ModificationProxy.unwrap(li.getDefaultStyle()),ModificationProxy.unwrap(li2.getDefaultStyle()));
  assertSame(ModificationProxy.unwrap(li.getStyles().iterator().next()),ModificationProxy.unwrap(li2.getStyles().iterator().next()));
  CatalogBuilder cb=new CatalogBuilder(catalog);
  LayerGroupInfo lg=catalog.getFactory().createLayerGroup();
  lg.getLayers().add(catalog.getLayerByName(getLayerId(MockData.ROAD_SEGMENTS)));
  lg.getLayers().add(catalog.getLayerByName(getLayerId(MockData.PONDS)));
  cb.calculateLayerGroupBounds(lg);
  lg.setName("test-lg");
  catalog.add(lg);
  lg=catalog.getLayerGroupByName("test-lg");
  LayerGroupInfo lg2=serialize(lg);
  assertSame(ModificationProxy.unwrap(lg),ModificationProxy.unwrap(lg2));
  assertSame(ModificationProxy.unwrap(lg.getLayers().get(0)),ModificationProxy.unwrap(lg2.getLayers().get(0)));
  assertSame(ModificationProxy.unwrap(lg.getLayers().get(1)),ModificationProxy.unwrap(lg2.getLayers().get(1)));
  LayerInfo lim=catalog.getLayerByName(getLayerId(MockData.BRIDGES));
  lim.setDefaultStyle(catalog.getStyleByName("default"));
  lim.getStyles().add(catalog.getStyleByName("default"));
  LayerInfo lim2=serialize(lim);
  assertSame(ModificationProxy.unwrap(lim.getDefaultStyle()),ModificationProxy.unwrap(lim2.getDefaultStyle()));
  assertSame(ModificationProxy.unwrap(lim.getStyles().iterator().next()),ModificationProxy.unwrap(lim2.getStyles().iterator().next()));
  String key="workspaceKey";
  lim.getMetadata().put(key,ws);
  LayerInfo lim3=serialize(lim);
  assertSame(ModificationProxy.unwrap(lim),ModificationProxy.unwrap(lim3));
  assertSame(ModificationProxy.unwrap(lim.getMetadata().get(key)),ModificationProxy.unwrap(lim3.getMetadata().get(key)));
}
