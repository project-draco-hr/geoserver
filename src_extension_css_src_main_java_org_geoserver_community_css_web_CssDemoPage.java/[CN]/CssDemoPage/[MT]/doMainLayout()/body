{
  final Fragment mainContent=new Fragment("main-content","normal",this);
  final ModalWindow popup=new ModalWindow("popup");
  mainContent.add(popup);
  final StyleNameModel styleNameModel=new StyleNameModel(style);
  final PropertyModel layerNameModel=new PropertyModel(layer,"prefixedName");
  mainContent.add(new AjaxLink("create.style",new ParamResourceModel("CssDemoPage.createStyle",this)){
    public void onClick(    AjaxRequestTarget target){
      target.appendJavascript("Wicket.Window.unloadConfirmation = false;");
      popup.setInitialHeight(200);
      popup.setInitialWidth(300);
      popup.setTitle(new Model("Choose name for new style"));
      popup.setContent(new StyleNameInput(popup.getContentId(),CssDemoPage.this));
      popup.show(target);
    }
  }
);
  mainContent.add(new SimpleAjaxLink("change.style",styleNameModel){
    public void onClick(    AjaxRequestTarget target){
      target.appendJavascript("Wicket.Window.unloadConfirmation = false;");
      popup.setInitialHeight(400);
      popup.setInitialWidth(600);
      popup.setTitle(new Model("Choose style to edit"));
      popup.setContent(new StyleChooser(popup.getContentId(),CssDemoPage.this));
      popup.show(target);
    }
  }
);
  mainContent.add(new SimpleAjaxLink("change.layer",layerNameModel){
    public void onClick(    AjaxRequestTarget target){
      target.appendJavascript("Wicket.Window.unloadConfirmation = false;");
      popup.setInitialHeight(400);
      popup.setInitialWidth(600);
      popup.setTitle(new Model("Choose layer to edit"));
      popup.setContent(new LayerChooser(popup.getContentId(),CssDemoPage.this));
      popup.show(target);
    }
  }
);
  mainContent.add(new AjaxLink("associate.styles",new ParamResourceModel("CssDemoPage.associateStyles",this)){
    public void onClick(    AjaxRequestTarget target){
      target.appendJavascript("Wicket.Window.unloadConfirmation = false;");
      popup.setInitialHeight(400);
      popup.setInitialWidth(600);
      popup.setTitle(new Model("Choose layers to associate"));
      popup.setContent(new MultipleLayerChooser(popup.getContentId(),CssDemoPage.this));
      popup.show(target);
    }
  }
);
  ParamResourceModel associateToLayer=new ParamResourceModel("CssDemoPage.associateDefaultStyle",this,styleNameModel,layerNameModel);
  final SimpleAjaxLink associateDefaultStyle=new SimpleAjaxLink("associate.default.style",new Model(),associateToLayer){
    public void onClick(    final AjaxRequestTarget linkTarget){
      final Component theComponent=this;
      dialog.setResizable(false);
      dialog.setHeightUnit("em");
      dialog.setWidthUnit("em");
      dialog.setInitialHeight(7);
      dialog.setInitialWidth(50);
      dialog.showOkCancel(linkTarget,new DialogDelegate(){
        boolean success=false;
        @Override protected boolean onSubmit(        AjaxRequestTarget target,        Component contents){
          layer.setDefaultStyle(style);
          getCatalog().save(layer);
          theComponent.setEnabled(false);
          success=true;
          return true;
        }
        @Override public void onClose(        AjaxRequestTarget target){
          super.onClose(target);
          target.addComponent(theComponent);
          if (success) {
            CssDemoPage.this.info(new ParamResourceModel("CssDemoPage.styleAssociated",CssDemoPage.this,styleNameModel,layerNameModel).getString());
            target.addComponent(getFeedbackPanel());
          }
        }
        @Override protected Component getContents(        String id){
          ParamResourceModel confirm=new ParamResourceModel("CssDemoPage.confirmAssocation",CssDemoPage.this,styleNameModel.getObject(),layerNameModel.getObject(),layer.getDefaultStyle().getName());
          return new Label(id,confirm);
        }
      }
);
    }
  }
;
  associateDefaultStyle.setOutputMarkupId(true);
  if (layer.getDefaultStyle().equals(style)) {
    associateDefaultStyle.setEnabled(false);
  }
  mainContent.add(associateDefaultStyle);
  final IModel<String> sldModel=new AbstractReadOnlyModel<String>(){
    public String getObject(){
      try {
        if (CssHandler.FORMAT.equals(style.getFormat())) {
          StyledLayerDescriptor sld=Styles.sld(style.getStyle());
          return Styles.string(sld,new SLDHandler(),SLDHandler.VERSION_10,true);
        }
 else {
          Resource file=findStyleFile(style);
          if (file != null && file.getType() == Type.RESOURCE) {
            BufferedReader reader=null;
            try {
              reader=new BufferedReader(new InputStreamReader(file.in()));
              StringBuilder builder=new StringBuilder();
              char[] line=new char[4096];
              int len=0;
              while ((len=reader.read(line,0,4096)) >= 0)               builder.append(line,0,len);
              return builder.toString();
            }
  finally {
              if (reader != null)               reader.close();
            }
          }
 else {
            return "No SLD file found for this style. One will be generated automatically if you save the CSS.";
          }
        }
      }
 catch (      IOException e) {
        throw new WicketRuntimeException(e);
      }
    }
  }
;
  final CompoundPropertyModel model=new CompoundPropertyModel<CssDemoPage>(CssDemoPage.this);
  List<ITab> tabs=new ArrayList<ITab>();
  tabs.add(new PanelCachingTab(new AbstractTab(new Model("Generated SLD")){
    public Panel getPanel(    String id){
      SLDPreviewPanel panel=new SLDPreviewPanel(id,sldModel);
      sldPreview=panel.getLabel();
      return panel;
    }
  }
));
  tabs.add(new PanelCachingTab(new AbstractTab(new Model("Map")){
    public Panel getPanel(    String id){
      return map=new OpenLayersMapPanel(id,layer,style);
    }
  }
));
  if (layer.getResource() instanceof FeatureTypeInfo) {
    tabs.add(new PanelCachingTab(new AbstractTab(new Model("Data")){
      public Panel getPanel(      String id){
        try {
          return new DataPanel(id,model,(FeatureTypeInfo)layer.getResource());
        }
 catch (        IOException e) {
          throw new WicketRuntimeException(e);
        }
      }
    }
));
  }
 else   if (layer.getResource() instanceof CoverageInfo) {
    tabs.add(new PanelCachingTab(new AbstractTab(new Model("Data")){
      public Panel getPanel(      String id){
        return new BandsPanel(id,(CoverageInfo)layer.getResource());
      }
    }
));
  }
  tabs.add(new AbstractTab(new Model("CSS Reference")){
    public Panel getPanel(    String id){
      return new DocsPanel(id);
    }
  }
);
  Resource sldFile=findStyleFile(style);
  Resource cssFile=sldFile.parent().get(style.getName() + ".css");
  mainContent.add(new StylePanel("style.editing",model,CssDemoPage.this,cssFile));
  mainContent.add(new AjaxTabbedPanel("context",tabs));
  add(mainContent);
  add(dialog=new GeoServerDialog("dialog"));
}
