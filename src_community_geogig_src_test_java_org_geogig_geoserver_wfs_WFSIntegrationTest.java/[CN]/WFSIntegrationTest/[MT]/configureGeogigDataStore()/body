{
  helper.insertAndAdd(helper.lines1);
  helper.getGeogig().command(CommitOp.class).call();
  Catalog catalog=getCatalog();
  CatalogFactory factory=catalog.getFactory();
  NamespaceInfo ns=factory.createNamespace();
  ns.setPrefix(WORKSPACE);
  ns.setURI(NAMESPACE);
  catalog.add(ns);
  WorkspaceInfo ws=factory.createWorkspace();
  ws.setName(ns.getName());
  catalog.add(ws);
  DataStoreInfo ds=factory.createDataStore();
  ds.setEnabled(true);
  ds.setDescription("Test Geogig DataStore");
  ds.setName(STORE);
  ds.setType(GeoGigDataStoreFactory.DISPLAY_NAME);
  ds.setWorkspace(ws);
  Map<String,Serializable> connParams=ds.getConnectionParameters();
  Optional<URI> geogigDir=helper.getGeogig().command(ResolveGeogigURI.class).call();
  File repositoryUrl=new File(geogigDir.get()).getParentFile();
  assertTrue(repositoryUrl.exists() && repositoryUrl.isDirectory());
  connParams.put(GeoGigDataStoreFactory.REPOSITORY.key,repositoryUrl);
  connParams.put(GeoGigDataStoreFactory.DEFAULT_NAMESPACE.key,ns.getURI());
  catalog.add(ds);
  DataStoreInfo dsInfo=catalog.getDataStoreByName(WORKSPACE,STORE);
  assertNotNull(dsInfo);
  assertEquals(GeoGigDataStoreFactory.DISPLAY_NAME,dsInfo.getType());
  DataAccess<? extends FeatureType,? extends Feature> dataStore=dsInfo.getDataStore(null);
  assertNotNull(dataStore);
  assertTrue(dataStore instanceof GeoGigDataStore);
  FeatureTypeInfo fti=factory.createFeatureType();
  fti.setNamespace(ns);
  fti.setCatalog(catalog);
  fti.setStore(dsInfo);
  fti.setSRS("EPSG:4326");
  fti.setName("Lines");
  fti.setAdvertised(true);
  fti.setEnabled(true);
  fti.setCqlFilter("INCLUDE");
  fti.setProjectionPolicy(ProjectionPolicy.FORCE_DECLARED);
  ReferencedEnvelope bounds=new ReferencedEnvelope(-180,180,-90,90,CRS.decode("EPSG:4326"));
  fti.setNativeBoundingBox(bounds);
  fti.setLatLonBoundingBox(bounds);
  catalog.add(fti);
  fti=catalog.getFeatureType(fti.getId());
  FeatureSource<? extends FeatureType,? extends Feature> featureSource;
  featureSource=fti.getFeatureSource(null,null);
  assertNotNull(featureSource);
}
