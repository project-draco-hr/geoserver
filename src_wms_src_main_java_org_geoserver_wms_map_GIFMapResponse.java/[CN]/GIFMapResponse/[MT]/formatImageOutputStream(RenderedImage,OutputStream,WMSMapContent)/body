{
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.fine("Writing gif image ...");
  }
  final String format=mapContent.getRequest().getFormat();
  boolean animatedGIF=false;
  if (format.equalsIgnoreCase(IMAGE_GIF_SUBTYPE_ANIMATED)) {
    animatedGIF=true;
  }
  int numfiles=1;
  final RenderedImageList ril;
  if (originalImage instanceof RenderedImageList) {
    ril=(RenderedImageList)originalImage;
    numfiles=ril.size();
  }
 else {
    ril=new RenderedImageList(Arrays.asList(originalImage));
  }
  if (numfiles == 1 || !animatedGIF) {
    if (LOGGER.isLoggable(Level.FINE))     LOGGER.fine("Preparing to write a gif...");
    try {
      originalImage=applyPalette(originalImage,mapContent,MIME_TYPE,false);
      ImageWorker iw=new ImageWorker(originalImage);
      iw.writeGIF(outStream,"LZW",0.75f);
      RasterCleaner.addImage(iw.getRenderedImage());
    }
 catch (    IOException e) {
      throw new ServiceException(e);
    }
    return;
  }
  if (numfiles <= 0) {
    throw new ServiceException("The number of frames for this GIF is less than 1");
  }
  final GIFImageWriter gifWriter=new GIFImageWriter(ORIGINATING_PROVIDER);
  final ImageWriteParam param=gifWriter.getDefaultWriteParam();
  param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
  param.setCompressionType("LZW");
  param.setCompressionQuality(0.75f);
  ImageOutputStream otStream=null;
  List<RenderedImage> images=new ArrayList<RenderedImage>();
  try {
    otStream=ImageIO.createImageOutputStream(outStream);
    gifWriter.setOutput(otStream);
    gifWriter.prepareWriteSequence(null);
    final GetMapRequest request=mapContent.getRequest();
    Object loopContinuouslyString=request.getFormatOptions().get(GIF_LOOP_CONTINUOUSLY);
    if (loopContinuouslyString == null) {
      loopContinuouslyString=request.getFormatOptions().get(GIF_LOOP_CONTINUOSLY);
    }
    final Boolean loopContinuosly=(loopContinuouslyString != null ? Boolean.valueOf((String)loopContinuouslyString) : wms.getLoopContinuously());
    Object frameDelayString=request.getFormatOptions().get(GIF_FRAMES_DELAY);
    final Integer delay=(frameDelayString != null ? Integer.valueOf((String)frameDelayString) : wms.getFramesDelay());
    if (delay <= 0)     throw new ServiceException("Animate GIF delay invalid: " + delay);
    for (int i=0; i < numfiles; i++) {
      if (LOGGER.isLoggable(Level.FINE))       LOGGER.fine("Writing image " + i);
      RenderedImage ri=(RenderedImage)ril.get(i);
      ri=applyPalette(ri,mapContent,MIME_TYPE,false);
      if (ri != null) {
        final IIOMetadata imageMetadata=gifWriter.getDefaultImageMetadata(new ImageTypeSpecifier(ri),param);
        prepareMetadata(ri,imageMetadata,loopContinuosly,delay);
        gifWriter.writeToSequence(new IIOImage(ri,null,imageMetadata),param);
        images.add(ri);
      }
    }
    gifWriter.endWriteSequence();
  }
 catch (  IOException e) {
    throw new ServiceException(e);
  }
 finally {
    try {
      otStream.flush();
    }
 catch (    Exception e) {
    }
    try {
      otStream.close();
    }
 catch (    Exception e) {
    }
    try {
      gifWriter.dispose();
    }
 catch (    Exception e) {
    }
    for (    RenderedImage image : images) {
      if (image instanceof PlanarImage) {
        ImageUtilities.disposePlanarImageChain((PlanarImage)image);
      }
 else       if (image instanceof BufferedImage) {
        ((BufferedImage)image).flush();
      }
    }
  }
  if (LOGGER.isLoggable(Level.FINE))   LOGGER.fine("Done writing animated gif");
}
