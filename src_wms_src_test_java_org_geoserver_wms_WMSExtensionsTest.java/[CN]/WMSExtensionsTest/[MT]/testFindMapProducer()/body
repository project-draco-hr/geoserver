{
  GetMapOutputFormat mockProducer=createMock(GetMapOutputFormat.class);
  ApplicationContext mockContext=EasyMock.createMock(ApplicationContext.class);
  expect(mockContext.isSingleton((String)anyObject())).andReturn(false).anyTimes();
  expect(mockContext.getBeanNamesForType(ExtensionFilter.class)).andReturn(new String[0]);
  expect(mockContext.getBeanNamesForType(GetMapOutputFormat.class)).andReturn(new String[]{"producer1"});
  expect(mockContext.getBeanNamesForType(ExtensionProvider.class)).andReturn(new String[0]);
  expect(mockContext.getBeanNamesForType(ExtensionFilter.class)).andReturn(new String[0]);
  expect(mockContext.getBean("producer1")).andReturn(mockProducer);
  expect(mockContext.getBeanNamesForType(ExtensionFilter.class)).andReturn(new String[0]);
  expect(mockContext.getBeanNamesForType(GetMapOutputFormat.class)).andReturn(new String[]{"producer1"});
  expect(mockContext.getBeanNamesForType(ExtensionProvider.class)).andReturn(new String[0]);
  expect(mockContext.getBeanNamesForType(ExtensionFilter.class)).andReturn(new String[0]);
  expect(mockContext.getBean("producer1")).andReturn(mockProducer);
  Set<String> testFormatNames=new HashSet<String>();
  testFormatNames.add("image/fakeformat");
  testFormatNames.add("image/dummy");
  expect(mockProducer.getOutputFormatNames()).andReturn(testFormatNames).anyTimes();
  replay(mockContext);
  replay(mockProducer);
  GetMapOutputFormat producer;
  producer=WMSExtensions.findMapProducer("ImaGe/FaKeForMat",mockContext);
  assertSame(mockProducer,producer);
  producer=WMSExtensions.findMapProducer("notARegisteredFormat",mockContext);
  assertNull(producer);
  verify(mockProducer);
  verify(mockContext);
}
