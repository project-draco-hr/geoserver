{
  if (!task.getStore().isEnabled()) {
    task.getStore().setEnabled(true);
  }
  if (task.progress().isCanceled()) {
    return;
  }
  task.setState(ImportTask.State.RUNNING);
  TransformChain tx=task.getTransform();
  if (!doPreTransform(task,task.getData(),tx)) {
    return;
  }
  boolean canceled=false;
  DataFormat format=task.getData().getFormat();
  if (format instanceof VectorFormat) {
    try {
      currentlyProcessing.put(task.getContext().getId(),task);
      loadIntoDataStore(task,(DataStoreInfo)task.getStore(),(VectorFormat)format,(VectorTransformChain)tx);
      canceled=task.progress().isCanceled();
      FeatureTypeInfo featureType=(FeatureTypeInfo)task.getLayer().getResource();
      featureType.getAttributes().clear();
      if (!canceled) {
        if (task.getUpdateMode() == UpdateMode.CREATE) {
          addToCatalog(task);
        }
        FeatureTypeInfo resource=getCatalog().getResourceByName(featureType.getQualifiedName(),FeatureTypeInfo.class);
        calculateBounds(resource);
      }
    }
 catch (    Exception e) {
      LOGGER.log(Level.SEVERE,"Error occured during import",e);
      task.setError(e);
      task.setState(ImportTask.State.ERROR);
      return;
    }
 finally {
      currentlyProcessing.remove(task.getContext().getId());
    }
  }
 else {
    StoreInfo store=task.getStore();
    final String errorMessage="Indirect raster import can only work against a structured grid coverage store (e.g., mosaic), this one is not: ";
    if (!(store instanceof CoverageStoreInfo)) {
      throw new IllegalArgumentException(errorMessage + store);
    }
    CoverageStoreInfo cs=(CoverageStoreInfo)store;
    GridCoverageReader reader=cs.getGridCoverageReader(null,null);
    if (!(reader instanceof StructuredGridCoverage2DReader)) {
      throw new IllegalArgumentException(errorMessage + store);
    }
    StructuredGridCoverage2DReader sr=(StructuredGridCoverage2DReader)reader;
    ImportData data=task.getData();
    harvestImportData(sr,data);
    if (task.getUpdateMode() == UpdateMode.CREATE) {
      if (task.getLayer().getId() == null) {
        addToCatalog(task);
      }
    }
  }
  if (!canceled && !doPostTransform(task,task.getData(),tx)) {
    return;
  }
  task.setState(canceled ? ImportTask.State.CANCELED : ImportTask.State.COMPLETE);
}
