{
  xp.setCatalog(catalog);
  XStream xs=xp.getXStream();
  xs.alias("import",ImportContext.class);
  xs.alias("task",ImportTask.class);
  xs.omitField(ImportTask.class,"context");
  xs.alias("dataStoreFormat",DataStoreFormat.class);
  xs.alias("spatialFile",SpatialFile.class);
  xs.alias("database",org.geoserver.importer.Database.class);
  xs.alias("table",Table.class);
  xs.omitField(Table.class,"db");
  xs.alias("vectorTransformChain",VectorTransformChain.class);
  xs.registerLocalConverter(ReprojectTransform.class,"source",new CRSConverter());
  xs.registerLocalConverter(ReprojectTransform.class,"target",new CRSConverter());
  xs.registerLocalConverter(ReferencedEnvelope.class,"crs",new CRSConverter());
  xs.registerLocalConverter(GeneralEnvelope.class,"crs",new CRSConverter());
  GeoServerSecurityManager securityManager=GeoServerExtensions.bean(GeoServerSecurityManager.class);
  xs.registerLocalConverter(RemoteData.class,"password",new EncryptedFieldConverter(securityManager));
  xs.allowTypes(new Class[]{ImportContext.class,ImportTask.class});
  xs.allowTypeHierarchy(TransformChain.class);
  xs.allowTypeHierarchy(DataFormat.class);
  xs.allowTypeHierarchy(ImportData.class);
  xs.allowTypeHierarchy(ImportTransform.class);
  xs.allowTypeHierarchy(Resource.class);
  return xp;
}
