{
  super(id);
  checkArgument(tileLayerModel instanceof GeoServerTileLayerInfoModel);
  this.layerModel=layerModel;
  setModel(tileLayerModel);
  final GWC mediator=GWC.get();
  final IModel<String> createTileLayerLabelModel;
  final PublishedInfo info=layerModel.getObject();
  final GeoServerTileLayerInfo tileLayerInfo=tileLayerModel.getObject();
  if (info instanceof LayerInfo) {
    createTileLayerLabelModel=new ResourceModel("createTileLayerForLayer");
    ResourceInfo resource=((LayerInfo)info).getResource();
    resource=ModificationProxy.unwrap(resource);
    originalLayerName=resource.getPrefixedName();
  }
 else   if (info instanceof LayerGroupInfo) {
    createTileLayerLabelModel=new ResourceModel("createTileLayerForLayerGroup");
    LayerGroupInfo lgi=ModificationProxy.unwrap((LayerGroupInfo)info);
    originalLayerName=tileLayerName(lgi);
  }
 else {
    throw new IllegalArgumentException("Provided model does not target a LayerInfo nor a LayerGroupInfo: " + info);
  }
  TileLayer tileLayer=null;
  if (originalLayerName != null) {
    try {
      tileLayer=mediator.getTileLayerByName(originalLayerName);
    }
 catch (    IllegalArgumentException notFound) {
    }
  }
  cachedLayerExistedInitially=tileLayer != null;
  add(confirmRemovalDialog=new GeoServerDialog("confirmRemovalDialog"));
  confirmRemovalDialog.setInitialWidth(360);
  confirmRemovalDialog.setInitialHeight(180);
  add(new Label("createTileLayerLabel",createTileLayerLabelModel));
  GeoServerTileLayerInfoModel model=((GeoServerTileLayerInfoModel)tileLayerModel);
  boolean undefined=model.getEnabled() == null;
  boolean doCreateTileLayer;
  if (tileLayerInfo.getId() != null) {
    doCreateTileLayer=true;
  }
 else   if (isNew() && mediator.getConfig().isCacheLayersByDefault()) {
    doCreateTileLayer=true;
  }
 else {
    doCreateTileLayer=false;
  }
  if (undefined) {
    model.setEnabled(doCreateTileLayer);
  }
  add(createLayer=new CheckBox("createTileLayer",new Model<Boolean>(doCreateTileLayer)));
  createLayer.add(new AttributeModifier("title",true,new ResourceModel("createTileLayer.title")));
  container=new WebMarkupContainer("container");
  container.setOutputMarkupId(true);
  add(container);
  configs=new WebMarkupContainer("configs");
  configs.setOutputMarkupId(true);
  container.add(configs);
  add(enabled=new CheckBox("enabled",new PropertyModel<Boolean>(getModel(),"enabled")));
  enabled.add(new AttributeModifier("title",true,new ResourceModel("enabled.title")));
  configs.add(enabled);
  IChoiceRenderer<String> blobStoreRenderer=new IChoiceRenderer<String>(){
    private static final long serialVersionUID=1L;
    final String defaultStore=getDefaultBlobStoreId();
    @Override public String getIdValue(    String object,    int index){
      return object;
    }
    @Override public Object getDisplayValue(    String object){
      String value=object;
      if (object.equals(defaultStore)) {
        value+=" (*)";
      }
      return value;
    }
  }
;
  PropertyModel<String> blobStoreModel=new PropertyModel<String>(getModel(),"blobStoreId");
  List<String> blobStoreChoices=getBlobStoreIds();
  configs.add(blobStoreId=new DropDownChoice<String>("blobStoreId",blobStoreModel,blobStoreChoices,blobStoreRenderer));
  blobStoreId.setNullValid(true);
  blobStoreId.add(new AttributeModifier("title",true,new ResourceModel("blobStoreId.title")));
  add(new IValidator<GeoServerTileLayerInfo>(){
    private static final long serialVersionUID=5240602030478856537L;
    @Override public void validate(    IValidatable<GeoServerTileLayerInfo> validatable){
      if (enabled.getConvertedInput() && !isBlobStoreEnabled(blobStoreId.getConvertedInput())) {
        error(new ParamResourceModel("enabledError",GeoServerTileLayerEditor.this).getString());
      }
    }
  }
);
  enableInMemoryCaching=new CheckBox("inMemoryCached",new PropertyModel<Boolean>(getModel(),"inMemoryCached"));
  ConfigurableBlobStore store=GeoServerExtensions.bean(ConfigurableBlobStore.class);
  if (store != null && store.getCache() != null) {
    enableInMemoryCaching.setEnabled(mediator.getConfig().isInnerCachingEnabled() && !store.getCache().isImmutable());
  }
  configs.add(enableInMemoryCaching);
  List<Integer> metaTilingChoices=Arrays.asList(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20);
  IModel<Integer> metaTilingXModel=new PropertyModel<Integer>(getModel(),"metaTilingX");
  metaTilingX=new DropDownChoice<Integer>("metaTilingX",metaTilingXModel,metaTilingChoices);
  configs.add(metaTilingX);
  IModel<Integer> metaTilingYModel=new PropertyModel<Integer>(getModel(),"metaTilingY");
  metaTilingY=new DropDownChoice<Integer>("metaTilingY",metaTilingYModel,metaTilingChoices);
  configs.add(metaTilingY);
  IModel<Integer> gutterModel=new PropertyModel<Integer>(getModel(),"gutter");
  List<Integer> gutterChoices=Arrays.asList(0,1,2,3,4,5,6,7,8,9,10,15,20,50,100);
  gutter=new DropDownChoice<Integer>("gutter",gutterModel,gutterChoices);
  configs.add(gutter);
  IModel<Set<String>> mimeFormatsModel=new PropertyModel<Set<String>>(getModel(),"mimeFormats");
  cacheFormats=new CheckGroup<String>("cacheFormatsGroup",mimeFormatsModel);
  cacheFormats.setLabel(new ResourceModel("cacheFormats"));
  configs.add(cacheFormats);
  final List<String> formats;
  formats=Lists.newArrayList(GWC.get().getAdvertisedCachedFormats(info.getType()));
  ListView<String> cacheFormatsList=new ListView<String>("cacheFormats",formats){
    private static final long serialVersionUID=1L;
    @Override protected void populateItem(    ListItem<String> item){
      item.add(new Check<String>("cacheFormatsOption",item.getModel()));
      item.add(new Label("name",item.getModel()));
    }
  }
;
  cacheFormatsList.setReuseItems(true);
  cacheFormats.add(cacheFormatsList);
  IModel<Integer> expireCacheModel=new PropertyModel<Integer>(getModel(),"expireCache");
  expireCache=new TextField<Integer>("expireCache",expireCacheModel);
  configs.add(expireCache);
  IModel<Integer> expireClientsModel=new PropertyModel<Integer>(getModel(),"expireClients");
  expireClients=new TextField<Integer>("expireClients",expireClientsModel);
  configs.add(expireClients);
  IModel<Set<XMLGridSubset>> gridSubsetsModel;
  gridSubsetsModel=new PropertyModel<Set<XMLGridSubset>>(getModel(),"gridSubsets");
  gridSubsets=new GridSubsetsEditor("cachedGridsets",gridSubsetsModel);
  configs.add(gridSubsets);
  IModel<Set<ParameterFilter>> parameterFilterModel;
  parameterFilterModel=new PropertyModel<Set<ParameterFilter>>(getModel(),"parameterFilters");
  parameterFilters=new ParameterFilterEditor("parameterFilters",parameterFilterModel,layerModel);
  configs.add(parameterFilters);
  configs.setVisible(createLayer.getModelObject());
  setValidating(createLayer.getModelObject());
  createLayer.add(new OnChangeAjaxBehavior(){
    private static final long serialVersionUID=1L;
    @Override protected void onUpdate(    AjaxRequestTarget target){
      final boolean createTileLayer=createLayer.getModelObject().booleanValue();
      if (!createTileLayer && cachedLayerExistedInitially) {
        confirmRemovalOfExistingTileLayer(target);
      }
 else {
        updateConfigsVisibility(target);
      }
    }
  }
);
}
