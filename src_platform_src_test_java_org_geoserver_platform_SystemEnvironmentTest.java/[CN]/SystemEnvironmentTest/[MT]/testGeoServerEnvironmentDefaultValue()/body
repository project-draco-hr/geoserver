{
  System.clearProperty("ALLOW_ENV_PARAMETRIZATION");
  String sysProperty=System.getProperty("ALLOW_ENV_PARAMETRIZATION");
  GeoServerResourceLoader loader=EasyMock.createMockBuilder(GeoServerResourceLoader.class).withConstructor().createMock();
  ApplicationContext appContext=EasyMock.createMock(ApplicationContext.class);
  EasyMock.expect(appContext.getBeanNamesForType(ExtensionFilter.class)).andReturn(new String[]{}).anyTimes();
  EasyMock.expect(appContext.getBeanNamesForType(ExtensionProvider.class)).andReturn(new String[]{}).anyTimes();
  EasyMock.expect(appContext.getBeanNamesForType(GeoServerResourceLoader.class)).andReturn(new String[]{"geoServerLoader"}).anyTimes();
  Map<String,GeoServerResourceLoader> genvMap=new HashMap<>();
  genvMap.put("geoServerLoader",loader);
  EasyMock.expect(appContext.getBeansOfType(GeoServerResourceLoader.class)).andReturn(genvMap).anyTimes();
  EasyMock.expect(appContext.getBean("geoServerLoader")).andReturn(loader).anyTimes();
  EasyMock.expect(appContext.isSingleton("geoServerLoader")).andReturn(true).anyTimes();
  EasyMock.replay(appContext);
  GeoServerExtensions gsext=new GeoServerExtensions();
  gsext.setApplicationContext(appContext);
  LOGGER.info("ALLOW_ENV_PARAMETRIZATION = " + sysProperty);
  if (sysProperty == null || !Boolean.valueOf(sysProperty)) {
    GeoServerEnvironment genv=new GeoServerEnvironment();
    LOGGER.info("GeoServerEnvironment = " + GeoServerEnvironment.ALLOW_ENV_PARAMETRIZATION);
    assertTrue(!GeoServerEnvironment.ALLOW_ENV_PARAMETRIZATION);
  }
}
