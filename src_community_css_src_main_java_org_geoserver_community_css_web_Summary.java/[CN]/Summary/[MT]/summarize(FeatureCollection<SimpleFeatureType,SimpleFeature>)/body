{
  final List<AttributeDescriptor> comparable=new ArrayList<AttributeDescriptor>();
  final List<AttributeDescriptor> noncomparable=new ArrayList<AttributeDescriptor>();
  for (  AttributeDescriptor att : data.getSchema().getAttributeDescriptors()) {
    if (Comparable.class.isAssignableFrom(att.getType().getBinding()) && !Geometry.class.isAssignableFrom(att.getType().getBinding())) {
      comparable.add(att);
    }
 else {
      noncomparable.add(att);
    }
  }
  LOGGER.log(Level.FINEST,"Comparable attributes: " + comparable);
  LOGGER.log(Level.FINEST,"Non-comparable attributes: " + noncomparable);
  Map<AttributeDescriptor,Comparable<Object>> minima=new HashMap();
  Map<AttributeDescriptor,Comparable<Object>> maxima=new HashMap();
  FeatureIterator<SimpleFeature> it=data.features();
  try {
    while (it.hasNext()) {
      SimpleFeature f=it.next();
      for (      AttributeDescriptor att : comparable) {
        Comparable<Object> value=(Comparable<Object>)f.getAttribute(att.getName());
        if (value != null) {
          final Comparable<Object> min=minima.containsKey(att) ? minima.get(att) : value;
          final Comparable<Object> max=maxima.containsKey(att) ? maxima.get(att) : value;
          minima.put(att,value.compareTo(min) < 0 ? value : min);
          maxima.put(att,value.compareTo(max) < 0 ? value : max);
        }
      }
    }
  }
  finally {
    it.close();
  }
  final List<Summary> summaries=new ArrayList<Summary>();
  for (  AttributeDescriptor att : comparable) {
    summaries.add(new Summary(att.getLocalName(),minima.get(att),maxima.get(att)));
  }
  for (  AttributeDescriptor att : noncomparable) {
    summaries.add(new Summary(att.getLocalName(),"[n/a]","[n/a]"));
  }
  return summaries;
}
