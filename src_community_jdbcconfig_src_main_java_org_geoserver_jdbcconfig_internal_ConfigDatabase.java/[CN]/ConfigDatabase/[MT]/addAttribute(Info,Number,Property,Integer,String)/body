{
  Map<String,?> params=params("value",storedValue);
  final String insertPropertySQL="insert into object_property " + "(oid, property_type, related_oid, related_property_type, colindex, value, id) " + "values (:object_id, :property_type, :related_oid, :related_property_type, :colindex, :value, :id)";
  final boolean isRelationShip=prop.isRelationship();
  Integer relatedObjectId=null;
  final Integer concreteTargetPropertyOid;
  if (isRelationShip) {
    Info relatedObject=lookUpRelatedObject(info,prop,colIndex);
    if (relatedObject == null) {
      concreteTargetPropertyOid=null;
    }
 else {
      relatedObject=ModificationProxy.unwrap(relatedObject);
      relatedObjectId=this.findObjectId(relatedObject);
      Integer targetPropertyOid=prop.getPropertyType().getTargetPropertyOid();
      PropertyType targetProperty;
      String targetPropertyName;
      Class<?> targetQueryType;
      ClassMappings classMappings=ClassMappings.fromImpl(relatedObject.getClass());
      targetQueryType=classMappings.getInterface();
      targetProperty=dbMappings.getPropertyType(targetPropertyOid);
      targetPropertyName=targetProperty.getPropertyName();
      Set<Integer> propertyTypeIds;
      propertyTypeIds=dbMappings.getPropertyTypeIds(targetQueryType,targetPropertyName);
      checkState(propertyTypeIds.size() == 1);
      concreteTargetPropertyOid=propertyTypeIds.iterator().next();
    }
  }
 else {
    concreteTargetPropertyOid=null;
  }
  final Number propertyType=prop.getPropertyType().getOid();
  final String id=info.getId();
  params=params("object_id",infoPk,"property_type",propertyType,"id",id,"related_oid",relatedObjectId,"related_property_type",concreteTargetPropertyOid,"colindex",colIndex,"value",storedValue);
  logStatement(insertPropertySQL,params);
  template.update(insertPropertySQL,params);
}
