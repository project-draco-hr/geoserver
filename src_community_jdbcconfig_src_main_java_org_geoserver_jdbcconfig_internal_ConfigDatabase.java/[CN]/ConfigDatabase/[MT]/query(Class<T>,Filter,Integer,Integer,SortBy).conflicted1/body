{
  checkNotNull(of);
  checkNotNull(filter);
  checkArgument(offset == null || offset.intValue() >= 0);
  checkArgument(limit == null || limit.intValue() >= 0);
  QueryBuilder<T> sqlBuilder=QueryBuilder.forIds(dialect,of,dbMappings).filter(filter).offset(offset).limit(limit).sortOrder(sortOrder);
  final StringBuilder sql=sqlBuilder.build();
  final Map<String,Object> namedParameters=sqlBuilder.getNamedParameters();
  final Filter unsupportedFilter=sqlBuilder.getUnsupportedFilter();
  final boolean fullySupported=Filter.INCLUDE.equals(unsupportedFilter);
  if (LOGGER.isLoggable(Level.FINER)) {
    LOGGER.finer("Original filter: " + filter);
    LOGGER.finer("Supported filter: " + sqlBuilder.getSupportedFilter());
    LOGGER.finer("Unsupported filter: " + sqlBuilder.getUnsupportedFilter());
  }
  logStatement(sql,namedParameters);
  Stopwatch sw=Stopwatch.createStarted();
  List<String> ids=template.query(sql.toString(),namedParameters,new RowMapper<String>(){
    @Override public String mapRow(    ResultSet rs,    int rowNum) throws SQLException {
      return rs.getString(1);
    }
  }
);
  sw.stop();
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.fine(Joiner.on("").join("query returned ",ids.size()," records in ",sw.toString()));
  }
  List<T> lazyTransformed=Lists.transform(ids,new Function<String,T>(){
    @Override public T apply(    String id){
      return getById(id,of);
    }
  }
);
  CloseableIterator<T> result;
  if (fullySupported) {
    Iterator<T> iterator=lazyTransformed.iterator();
    result=new CloseableIteratorAdapter<T>(iterator);
  }
 else {
    Iterator<T> iterator=lazyTransformed.iterator();
    result=CloseableIteratorAdapter.filter(iterator,filter);
    assert(!sqlBuilder.isOffsetLimitApplied());
    result=applyOffsetLimit(result,offset,limit);
  }
  return result;
}
