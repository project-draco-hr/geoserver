{
  Form form=new Form<DataAccessRule>("form",new CompoundPropertyModel(rule));
  add(form);
  form.add(new EmptyRolesValidator());
  form.add(workspaceChoice=new DropDownChoice<String>("workspace",getWorkspaceNames()));
  workspaceChoice.setRequired(true);
  workspaceChoice.add(new AjaxFormComponentUpdatingBehavior("onchange"){
    @Override protected void onUpdate(    AjaxRequestTarget target){
      layerChoice.setChoices(new Model<ArrayList<String>>(getLayerNames(workspaceChoice.getConvertedInput())));
      layerChoice.modelChanged();
      target.add(layerChoice);
    }
  }
);
  form.add(layerChoice=new DropDownChoice<String>("layer",getLayerNames(rule.getWorkspace())));
  layerChoice.setRequired(true);
  layerChoice.setOutputMarkupId(true);
  form.add(accessModeChoice=new DropDownChoice<AccessMode>("accessMode",MODES,new AccessModeRenderer()));
  accessModeChoice.setRequired(true);
  form.add(rolesFormComponent=new RuleRolesFormComponent("roles",new PropertyModel(rule,"roles")).setHasAnyRole(rule.getRoles().contains(GeoServerRole.ANY_ROLE.getAuthority())));
  form.add(new SubmitLink("save"){
    @Override public void onSubmit(){
      DataAccessRule rule=(DataAccessRule)getForm().getModelObject();
      if (rolesFormComponent.isHasAnyRole()) {
        rule.getRoles().clear();
        rule.getRoles().add(GeoServerRole.ANY_ROLE.getAuthority());
      }
      onFormSubmit(rule);
    }
  }
);
  form.add(new BookmarkablePageLink<DataAccessRule>("cancel",DataSecurityPage.class));
}
