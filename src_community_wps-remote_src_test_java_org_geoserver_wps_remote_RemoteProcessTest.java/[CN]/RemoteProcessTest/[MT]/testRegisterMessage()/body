{
  XMPPClient xmppRemoteClient=(XMPPClient)applicationContext.getBean("xmppRemoteProcessClient");
  assertNotNull(xmppRemoteClient);
  XMPPMessage msg=new XMPPRegisterMessage();
  Map<String,String> signalArgs=new HashMap<String,String>();
  signalArgs.put("topic","register");
  signalArgs.put("service","test.Service");
  signalArgs.put("message","%7B%0A%20%20%22title%22%3A%20%22test.Service%22%2C%0A%20%20%22description%22%3A%20%22This%20is%20a%20test%20Service!%22%2C%0A%20%20%22input%22%3A%20%5B%0A%20%20%20%20%5B%22simpleType%22%2C%20%22%7B%5C%22type%5C%22%3A%20%5C%22string%5C%22%2C%20%5C%22description%5C%22%3A%20%5C%22A%20simple%20string%20parameter%5C%22%2C%20%5C%22max%5C%22%3A%201%7D%22%5D%2C%0A%20%20%20%20%5B%22complexType%22%2C%20%22%7B%5C%22type%5C%22%3A%20%5C%22complex%5C%22%2C%20%5C%22description%5C%22%3A%20%5C%22A%20complex%20parameter%5C%22%2C%20%5C%22min%5C%22%3A%201%2C%20%5C%22max%5C%22%3A%2010%7D%22%5D%0A%20%20%5D%0A%7D");
  Packet packet=new Packet(){
    @Override public String getFrom(){
      return "test@geoserver.org";
    }
    @Override public CharSequence toXML(){
      return null;
    }
  }
;
  msg.handleSignal(xmppRemoteClient,packet,null,signalArgs);
}
