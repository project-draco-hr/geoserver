{
  ResourceAccessManager manager=buildManager("lockedDownChallenge.properties");
  SecureCatalogImpl sc=new SecureCatalogImpl(catalog,manager);
  SecurityContextHolder.getContext().setAuthentication(roUser);
  try {
    sc.getFeatureTypeByName("topp:states").getFeatureSource(null,null);
    fail("Should have failed with a security exception");
  }
 catch (  Exception e) {
    if (ReadOnlyDataStoreTest.isSpringSecurityException(e) == false)     fail("Should have failed with a security exception");
  }
  try {
    sc.getCoverageByName("nurc:arcgrid").getGridCoverage(null,null);
    fail("Should have failed with a security exception");
  }
 catch (  Exception e) {
    if (ReadOnlyDataStoreTest.isSpringSecurityException(e) == false)     fail("Should have failed with a security exception");
  }
  try {
    sc.getResourceByName("topp:states",FeatureTypeInfo.class).getFeatureSource(null,null);
    fail("Should have failed with a security exception");
  }
 catch (  Exception e) {
    if (ReadOnlyDataStoreTest.isSpringSecurityException(e) == false)     fail("Should have failed with a security exception");
  }
  try {
    sc.getResourceByName("nurc:arcgrid",CoverageInfo.class).getGridCoverage(null,null);
    fail("Should have failed with a security exception");
  }
 catch (  Exception e) {
    if (ReadOnlyDataStoreTest.isSpringSecurityException(e) == false)     fail("Should have failed with a security exception");
  }
  sc.getWorkspaceByName("topp");
  try {
    sc.getDataStoreByName("states").getDataStore(null);
    fail("Should have failed with a security exception");
  }
 catch (  Exception e) {
    if (ReadOnlyDataStoreTest.isSpringSecurityException(e) == false)     fail("Should have failed with a security exception");
  }
  try {
    sc.getDataStoreByName("roads").getDataStore(null);
    fail("Should have failed with a security exception");
  }
 catch (  Exception e) {
    if (ReadOnlyDataStoreTest.isSpringSecurityException(e) == false)     fail("Should have failed with a security exception");
  }
  try {
    sc.getCoverageStoreByName("arcGrid").getFormat();
    fail("Should have failed with a security exception");
  }
 catch (  Exception e) {
    if (ReadOnlyDataStoreTest.isSpringSecurityException(e) == false)     fail("Should have failed with a security exception");
  }
  assertEquals(featureTypes.size(),sc.getFeatureTypes().size());
  assertEquals(coverages.size(),sc.getCoverages().size());
  assertEquals(workspaces.size(),sc.getWorkspaces().size());
  SecurityContextHolder.getContext().setAuthentication(rwUser);
  assertSame(states,sc.getFeatureTypeByName("topp:states"));
  assertSame(arcGrid,sc.getCoverageByName("nurc:arcgrid"));
  assertSame(states,sc.getResourceByName("topp:states",FeatureTypeInfo.class));
  assertSame(arcGrid,sc.getResourceByName("nurc:arcgrid",CoverageInfo.class));
  assertEquals(featureTypes,sc.getFeatureTypes());
  assertEquals(coverages,sc.getCoverages());
  assertEquals(workspaces,sc.getWorkspaces());
  assertEquals(toppWs,sc.getWorkspaceByName("topp"));
  assertSame(statesStore,sc.getDataStoreByName("states"));
  assertSame(roadsStore,sc.getDataStoreByName("roads"));
  assertSame(arcGridStore,sc.getCoverageStoreByName("arcGrid"));
}
