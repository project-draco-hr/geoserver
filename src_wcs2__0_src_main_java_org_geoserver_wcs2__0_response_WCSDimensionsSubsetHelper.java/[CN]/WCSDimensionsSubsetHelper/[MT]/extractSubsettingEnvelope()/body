{
  final CoordinateReferenceSystem sourceCRS=reader.getCoordinateReferenceSystem();
  WCSEnvelope sourceEnvelopeInSubsettingCRS=new WCSEnvelope(reader.getOriginalEnvelope());
  if (!(subsettingCRS == null || CRS.equalsIgnoreMetadata(subsettingCRS,sourceCRS))) {
    try {
      sourceEnvelopeInSubsettingCRS=new WCSEnvelope(CRS.transform(reader.getOriginalEnvelope(),subsettingCRS));
    }
 catch (    Exception e) {
      try {
        ProjectionHandler handler=ProjectionHandlerFinder.getHandler(new ReferencedEnvelope(0,1,0,1,subsettingCRS),sourceCRS,false);
        if (handler != null) {
          ReferencedEnvelope validArea=handler.getValidAreaBounds();
          Envelope intersection=validArea.intersection(ReferencedEnvelope.reference(reader.getOriginalEnvelope()));
          ReferencedEnvelope re=new ReferencedEnvelope(intersection,sourceCRS);
          sourceEnvelopeInSubsettingCRS=new WCSEnvelope(re.transform(subsettingCRS,true));
        }
 else {
          throw new WCS20Exception("Unable to initialize subsetting envelope",WCS20Exception.WCS20ExceptionCode.SubsettingCrsNotSupported,subsettingCRS.toWKT(),e);
        }
      }
 catch (      Exception e2) {
        throw new WCS20Exception("Unable to initialize subsetting envelope",WCS20Exception.WCS20ExceptionCode.SubsettingCrsNotSupported,subsettingCRS.toWKT(),e2);
      }
    }
  }
  final EList<DimensionSubsetType> requestedDimensions=request.getDimensionSubset();
  if (requestedDimensions == null || requestedDimensions.size() <= 0) {
    return sourceEnvelopeInSubsettingCRS;
  }
  int maxDimensions=2 + enabledDimensions.size();
  if (requestedDimensions.size() > maxDimensions) {
    throw new WCS20Exception("Invalid number of dimensions",WCS20Exception.WCS20ExceptionCode.InvalidSubsetting,Integer.toString(requestedDimensions.size()));
  }
  final List<String> axesNames=envelopeDimensionsMapper.getAxesNames(sourceEnvelopeInSubsettingCRS,true);
  final List<String> foundDimensions=new ArrayList<String>();
  WCSEnvelope subsettingEnvelope=new WCSEnvelope(sourceEnvelopeInSubsettingCRS);
  Set<String> dimensionKeys=enabledDimensions.keySet();
  for (  DimensionSubsetType dim : requestedDimensions) {
    String dimension=WCSDimensionsSubsetHelper.getDimensionName(dim);
    if (WCSDimensionsSubsetHelper.TIME_NAMES.contains(dimension.toLowerCase())) {
      if (dimensionKeys.contains(ResourceInfo.TIME)) {
        continue;
      }
 else {
        throw new WCS20Exception("Invalid axis label provided: " + dimension,WCS20Exception.WCS20ExceptionCode.InvalidAxisLabel,null);
      }
    }
    if (WCSDimensionsSubsetHelper.ELEVATION_NAMES.contains(dimension.toLowerCase())) {
      if (dimensionKeys.contains(ResourceInfo.ELEVATION)) {
        continue;
      }
 else {
        throw new WCS20Exception("Invalid axis label provided: " + dimension,WCS20Exception.WCS20ExceptionCode.InvalidAxisLabel,null);
      }
    }
    boolean isCustomDimension=false;
    for (    String dimensionKey : dimensionKeys) {
      if (dimensionKey.equalsIgnoreCase(dimension)) {
        isCustomDimension=true;
        break;
      }
    }
    if (isCustomDimension) {
      continue;
    }
    if (!axesNames.contains(dimension)) {
      throw new WCS20Exception("Invalid axis label provided: " + dimension,WCS20Exception.WCS20ExceptionCode.InvalidAxisLabel,dimension == null ? "Null" : dimension);
    }
    if (foundDimensions.contains(dimension)) {
      throw new WCS20Exception("Axis label already used during subsetting",WCS20Exception.WCS20ExceptionCode.InvalidAxisLabel,dimension);
    }
    foundDimensions.add(dimension);
    if (dim instanceof DimensionTrimType) {
      final DimensionTrimType trim=(DimensionTrimType)dim;
      final double low=Double.parseDouble(trim.getTrimLow());
      final double high=Double.parseDouble(trim.getTrimHigh());
      final int axisIndex=envelopeDimensionsMapper.getAxisIndex(sourceEnvelopeInSubsettingCRS,dimension);
      if (axisIndex < 0) {
        throw new WCS20Exception("Invalid axis provided",WCS20Exception.WCS20ExceptionCode.InvalidAxisLabel,dimension);
      }
      if (low > high && !subsettingEnvelope.isLongitude(axisIndex)) {
        throw new WCS20Exception("Low greater than High",WCS20Exception.WCS20ExceptionCode.InvalidSubsetting,trim.getTrimLow());
      }
      subsettingEnvelope.setRange(axisIndex,low,high);
    }
 else     if (dim instanceof DimensionSliceType) {
      final DimensionSliceType slicing=(DimensionSliceType)dim;
      final String slicePointS=slicing.getSlicePoint();
      final double slicePoint=Double.parseDouble(slicePointS);
      final int axisIndex=envelopeDimensionsMapper.getAxisIndex(sourceEnvelopeInSubsettingCRS,dimension);
      if (axisIndex < 0) {
        throw new WCS20Exception("Invalid axis provided",WCS20Exception.WCS20ExceptionCode.InvalidAxisLabel,dimension);
      }
      AffineTransform affineTransform=RequestUtils.getAffineTransform(reader.getOriginalGridToWorld(PixelInCell.CELL_CENTER));
      final double scale=axisIndex == 0 ? affineTransform.getScaleX() : -affineTransform.getScaleY();
      subsettingEnvelope.setRange(axisIndex,slicePoint,slicePoint + scale);
      if (sourceEnvelopeInSubsettingCRS.getMinimum(axisIndex) > slicePoint || slicePoint > sourceEnvelopeInSubsettingCRS.getMaximum(axisIndex)) {
        throw new WCS20Exception("SlicePoint outside coverage envelope",WCS20Exception.WCS20ExceptionCode.InvalidSubsetting,slicePointS);
      }
    }
 else {
      throw new WCS20Exception("Invalid element found while attempting to parse dimension subsetting request",WCS20Exception.WCS20ExceptionCode.InvalidSubsetting,dim.getClass().toString());
    }
  }
  subsettingEnvelope.intersect(new GeneralEnvelope(sourceEnvelopeInSubsettingCRS));
  if (subsettingEnvelope.isEmpty()) {
    throw new WCS20Exception("Empty intersection after subsetting",WCS20Exception.WCS20ExceptionCode.InvalidSubsetting,"");
  }
  return subsettingEnvelope;
}
