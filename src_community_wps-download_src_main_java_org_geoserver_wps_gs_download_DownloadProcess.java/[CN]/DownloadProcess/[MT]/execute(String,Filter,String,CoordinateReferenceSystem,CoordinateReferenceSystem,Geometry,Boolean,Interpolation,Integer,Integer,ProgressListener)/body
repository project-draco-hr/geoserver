{
  try {
    if (layerName == null || layerName.length() <= 0) {
      throw new IllegalArgumentException("Empty or null layerName provided!");
    }
    if (LOGGER.isLoggable(Level.FINE)) {
      LOGGER.log(Level.FINE,"Download process called on resource: " + layerName);
    }
    if (clip == null) {
      clip=false;
      if (LOGGER.isLoggable(Level.FINE)) {
        LOGGER.log(Level.FINE,"Clipping disabled");
      }
    }
    if (roi != null) {
      if (LOGGER.isLoggable(Level.FINE)) {
        LOGGER.log(Level.FINE,"ROI check");
      }
      DownloadUtilities.checkPolygonROI(roi);
      if (roiCRS == null) {
        throw new IllegalArgumentException("ROI without a CRS is not usable!");
      }
      roi.setUserData(roiCRS);
    }
    if (interpolation == null) {
      if (LOGGER.isLoggable(Level.FINE)) {
        LOGGER.log(Level.FINE,"Interpolation parameter not specified, using default (Nearest Neighbor)");
      }
      interpolation=(Interpolation)ImageUtilities.NN_INTERPOLATION_HINT.get(JAI.KEY_INTERPOLATION);
    }
    if (LOGGER.isLoggable(Level.FINE)) {
      LOGGER.log(Level.FINE,"Running the estimator");
    }
    if (!estimator.execute(layerName,filter,targetCRS,roiCRS,roi,clip,targetSizeX,targetSizeY,progressListener)) {
      throw new IllegalArgumentException("Download Limits Exceeded. Unable to proceed!");
    }
    LayerInfo layerInfo=catalog.getLayerByName(layerName);
    if (layerInfo == null) {
      throw new IllegalArgumentException("Unable to locate layer: " + layerName);
    }
    ResourceInfo resourceInfo=layerInfo.getResource();
    if (resourceInfo == null) {
      throw new IllegalArgumentException("Unable to locate ResourceInfo for layer:" + layerName);
    }
    DownloadServiceConfiguration limits=estimator.getDownloadServiceConfiguration();
    if (LOGGER.isLoggable(Level.FINE)) {
      LOGGER.log(Level.FINE,"Employing limits " + limits);
    }
    if (LOGGER.isLoggable(Level.FINE)) {
      LOGGER.log(Level.FINE,"The resource to work on is " + resourceInfo.getName());
    }
    Resource internalOutput=null;
    if (resourceInfo instanceof FeatureTypeInfo) {
      if (LOGGER.isLoggable(Level.FINE)) {
        LOGGER.log(Level.FINE,"The resource to work on is a vector layer");
      }
      internalOutput=new VectorDownload(limits,resourceManager,context).execute((FeatureTypeInfo)resourceInfo,mimeType,roi,clip,filter,targetCRS,progressListener);
    }
 else     if (resourceInfo instanceof CoverageInfo) {
      if (LOGGER.isLoggable(Level.FINE)) {
        LOGGER.log(Level.FINE,"The resource to work on is a raster layer");
      }
      CoverageInfo cInfo=(CoverageInfo)resourceInfo;
      internalOutput=new RasterDownload(limits,resourceManager,context).execute(mimeType,progressListener,cInfo,roi,targetCRS,clip,filter,interpolation,targetSizeX,targetSizeY);
    }
 else {
      throw new IllegalArgumentException("Could not complete the Download Process, requested layer was of wrong type-->" + resourceInfo.getClass());
    }
    if (internalOutput == null) {
      throw new IllegalStateException("Could not complete the Download Process, output file is null");
    }
    if (!Resources.exists(internalOutput) || !Resources.canRead(internalOutput)) {
      throw new IllegalStateException("Could not complete the Download Process, output file invalid! --> " + internalOutput.path());
    }
    if (LOGGER.isLoggable(Level.FINE)) {
      LOGGER.log(Level.FINE,"Preparing the result");
    }
    final Resource result=resourceManager.getOutputResource(resourceManager.getExecutionId(true),resourceInfo.getName() + ".zip");
    try (OutputStream os1=result.out()){
      if (LOGGER.isLoggable(Level.FINE)) {
        LOGGER.log(Level.FINE,"Listing files");
      }
      List<File> filesToDownload=new ArrayList<File>();
      filesToDownload.add(internalOutput.file());
      if (LOGGER.isLoggable(Level.FINE)) {
        LOGGER.log(Level.FINE,"Collecting styles");
      }
      for (      Resource style : DownloadUtilities.collectStyles(layerInfo)) {
        filesToDownload.add(style.file());
      }
      if (LOGGER.isLoggable(Level.FINE)) {
        LOGGER.log(Level.FINE,"Zipping files");
      }
      new ZipArchivePPIO(estimator.getDownloadServiceConfiguration().getCompressionLevel()).encode(filesToDownload,os1);
    }
  finally {
      if (LOGGER.isLoggable(Level.FINE)) {
        LOGGER.log(Level.FINE,"Prepare the result for deletion");
      }
      resourceManager.addResource(new WPSFileResource(internalOutput));
    }
    if (progressListener != null) {
      progressListener.complete();
    }
    return result.file();
  }
 catch (  Throwable e) {
    if (LOGGER.isLoggable(Level.FINE)) {
      LOGGER.log(Level.FINE,"Download failed");
    }
    final ProcessException processException=new ProcessException(e);
    if (progressListener != null) {
      progressListener.exceptionOccurred(processException);
    }
    throw processException;
  }
}
