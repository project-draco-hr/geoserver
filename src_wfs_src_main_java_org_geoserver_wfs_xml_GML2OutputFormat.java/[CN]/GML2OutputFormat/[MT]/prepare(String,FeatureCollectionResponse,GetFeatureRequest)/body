{
  this.compressOutput=formatNameCompressed.equalsIgnoreCase(outputFormat);
  transformer=createTransformer();
  FeatureTypeNamespaces ftNames=transformer.getFeatureTypeNamespaces();
  Map ftNamespaces=new HashMap();
  int srs=-1;
  int numDecimals=-1;
  for (int i=0; i < results.getFeature().size(); i++) {
    FeatureCollection features=(FeatureCollection)results.getFeature().get(i);
    SimpleFeatureType featureType=(SimpleFeatureType)features.getSchema();
    ResourceInfo meta=catalog.getResourceByName(featureType.getName(),ResourceInfo.class);
    String prefix=meta.getNamespace().getPrefix();
    String uri=meta.getNamespace().getURI();
    ftNames.declareNamespace(features.getSchema(),prefix,uri);
    if (ftNamespaces.containsKey(uri)) {
      String location=(String)ftNamespaces.get(uri);
      ftNamespaces.put(uri,location + "," + urlEncode(meta.getPrefixedName()));
    }
 else {
      if (meta instanceof FeatureTypeInfo) {
        String location=typeSchemaLocation(geoServer.getGlobal(),(FeatureTypeInfo)meta,request.getBaseUrl());
        ftNamespaces.put(uri,location);
      }
    }
    Query query=request.getQueries().get(i);
    try {
      String srsName=query.getSrsName() != null ? query.getSrsName().toString() : null;
      if (srsName == null) {
        srsName=meta.getSRS();
      }
      if (srsName != null) {
        CoordinateReferenceSystem crs=CRS.decode(srsName);
        String epsgCode=GML2EncodingUtils.epsgCode(crs);
        srs=Integer.parseInt(epsgCode);
      }
    }
 catch (    Exception e) {
      LOGGER.log(Level.WARNING,"Problem encoding:" + query.getSrsName(),e);
    }
    if (meta instanceof FeatureTypeInfo) {
      int ftiDecimals=((FeatureTypeInfo)meta).getNumDecimals();
      if (ftiDecimals > 0) {
        numDecimals=numDecimals == -1 ? ftiDecimals : Math.max(numDecimals,ftiDecimals);
      }
    }
  }
  SettingsInfo settings=geoServer.getSettings();
  if (numDecimals == -1) {
    numDecimals=settings.getNumDecimals();
  }
  WFSInfo wfs=getInfo();
  transformer.setIndentation(wfs.isVerbose() ? INDENT_SIZE : (NO_FORMATTING));
  transformer.setNumDecimals(numDecimals);
  transformer.setFeatureBounding(wfs.isFeatureBounding());
  transformer.setCollectionBounding(wfs.isFeatureBounding());
  transformer.setEncoding(Charset.forName(settings.getCharset()));
  if (wfs.isCanonicalSchemaLocation()) {
    transformer.addSchemaLocation(WFS.NAMESPACE,wfsCanonicalSchemaLocation());
  }
 else {
    String wfsSchemaloc=wfsSchemaLocation(request.getBaseUrl());
    transformer.addSchemaLocation(WFS.NAMESPACE,wfsSchemaloc);
  }
  for (Iterator it=ftNamespaces.keySet().iterator(); it.hasNext(); ) {
    String uri=(String)it.next();
    transformer.addSchemaLocation(uri,(String)ftNamespaces.get(uri));
  }
  GMLInfo gml=wfs.getGML().get(WFSInfo.Version.V_10);
  transformer.setGmlPrefixing(wfs.isCiteCompliant() || !gml.getOverrideGMLAttributes());
  if (results.getLockId() != null) {
    transformer.setLockId(results.getLockId());
  }
  if (srs != -1) {
    transformer.setSrsName(gml.getSrsNameStyle().getPrefix() + srs);
  }
}
