{
  start("wcs:temporalDomain");
  if (timeInfo.getPresentation() == DimensionPresentation.LIST) {
    String timeMetadata=reader.getMetadataValue(AbstractGridCoverage2DReader.TIME_DOMAIN);
    final String[] timePositions=timeMetadata.split(",");
    for (    String timePosition : timePositions) {
      element("gml:timePosition",timePosition);
    }
  }
 else {
    String minTime=reader.getMetadataValue(AbstractGridCoverage2DReader.TIME_DOMAIN_MINIMUM);
    String maxTime=reader.getMetadataValue(AbstractGridCoverage2DReader.TIME_DOMAIN_MAXIMUM);
    start("wcs:timePeriod");
    element("wcs:beginPosition",minTime);
    element("wcs:endPosition",maxTime);
    if (timeInfo.getPresentation() == DimensionPresentation.DISCRETE_INTERVAL) {
      BigDecimal resolution=timeInfo.getResolution();
      if (resolution == null) {
        try {
          final SimpleDateFormat df=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
          df.setTimeZone(TimeZone.getTimeZone("UTC"));
          Date min=df.parse(minTime);
          Date max=df.parse(maxTime);
          resolution=new BigDecimal(max.getTime() - min.getTime());
        }
 catch (        ParseException e) {
          throw new WcsException("Failed to parse min and max time reported " + "by the reader: " + minTime + ", "+ maxTime,e);
        }
      }
      element("wcs:timeResolution",new DefaultPeriodDuration(resolution.longValue()).toString());
    }
    end("wcs:timePeriod");
  }
  end("wcs:temporalDomain");
}
