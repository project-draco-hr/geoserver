{
  File f=resourceLoader.find("services.xml");
  if (f == null) {
    f=resourceLoader.find("global.xml");
    if (f != null) {
      BufferedInputStream in=new BufferedInputStream(new FileInputStream(f));
      try {
        GeoServerInfoImpl global=(GeoServerInfoImpl)xpf.createXMLPersister().load(in,GeoServerInfo.class);
        geoServer.setGlobal(global);
      }
  finally {
        in.close();
      }
    }
    f=resourceLoader.find("logging.xml");
    if (f != null) {
      BufferedInputStream in=new BufferedInputStream(new FileInputStream(f));
      try {
        LoggingInfo logging=xpf.createXMLPersister().load(in,LoggingInfo.class);
        geoServer.setLogging(logging);
      }
  finally {
        in.close();
      }
    }
    final List<XStreamServiceLoader> loaders=GeoServerExtensions.extensions(XStreamServiceLoader.class);
    for (    XStreamServiceLoader<ServiceInfo> l : loaders) {
      try {
        ServiceInfo s=l.load(geoServer);
        geoServer.add(s);
        LOGGER.info("Loaded service '" + s.getId() + "', "+ (s.isEnabled() ? "enabled" : "disabled"));
      }
 catch (      Throwable t) {
        t.printStackTrace();
      }
    }
  }
 else {
    GeoServerPersister p=new GeoServerPersister(resourceLoader,xp);
    geoServer.addListener(p);
    new LegacyConfigurationImporter(geoServer).imprt(resourceLoader.getBaseDirectory());
    geoServer.removeListener(p);
    f.renameTo(new File(f.getParentFile(),"services.xml.old"));
  }
}
