{
  Assert.isInstanceOf(PDFMap.class,value);
  WMSMapContext mapContext=((PDFMap)value).getContext();
  final int width=mapContext.getMapWidth();
  final int height=mapContext.getMapHeight();
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.fine("setting up " + width + "x"+ height+ " image");
  }
  try {
    com.lowagie.text.Rectangle pageSize=new com.lowagie.text.Rectangle(width,height);
    Document document=new Document(pageSize);
    document.setMargins(0,0,0,0);
    PdfWriter writer=PdfWriter.getInstance(document,output);
    document.open();
    DefaultFontMapper mapper=new DefaultFontMapper();
    FontFactory.registerDirectories();
    PdfContentByte cb=writer.getDirectContent();
    PdfTemplate tp=cb.createTemplate(width,height);
    PdfGraphics2D graphic=(PdfGraphics2D)tp.createGraphics(width,height,mapper);
    if (!mapContext.isTransparent()) {
      graphic.setColor(mapContext.getBgColor());
      graphic.fillRect(0,0,width,height);
    }
 else {
      if (LOGGER.isLoggable(Level.FINE)) {
        LOGGER.fine("setting to transparent");
      }
      int type=AlphaComposite.SRC;
      graphic.setComposite(AlphaComposite.getInstance(type));
      Color c=new Color(mapContext.getBgColor().getRed(),mapContext.getBgColor().getGreen(),mapContext.getBgColor().getBlue(),0);
      graphic.setBackground(mapContext.getBgColor());
      graphic.setColor(c);
      graphic.fillRect(0,0,width,height);
      type=AlphaComposite.SRC_OVER;
      graphic.setComposite(AlphaComposite.getInstance(type));
    }
    Rectangle paintArea=new Rectangle(width,height);
    StreamingRenderer renderer=new StreamingRenderer();
    renderer.setContext(mapContext);
    RenderingHints hints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
    renderer.setJava2DHints(hints);
    java.util.Map rendererParams=new HashMap();
    rendererParams.put("optimizedDataLoadingEnabled",new Boolean(true));
    rendererParams.put("renderingBuffer",new Integer(mapContext.getBuffer()));
    rendererParams.put(StreamingRenderer.OPTIMIZE_FTS_RENDERING_KEY,Boolean.FALSE);
    rendererParams.put(StreamingRenderer.VECTOR_RENDERING_KEY,Boolean.TRUE);
    if (DefaultWebMapService.isLineWidthOptimizationEnabled()) {
      rendererParams.put(StreamingRenderer.LINE_WIDTH_OPTIMIZATION_KEY,true);
    }
    renderer.setRendererHints(rendererParams);
    Envelope dataArea=mapContext.getAreaOfInterest();
    int maxErrors=wms.getMaxRenderingErrors();
    MaxErrorEnforcer errorChecker=new MaxErrorEnforcer(renderer,maxErrors);
    final RenderExceptionStrategy nonIgnorableExceptionListener;
    nonIgnorableExceptionListener=new RenderExceptionStrategy(renderer);
    renderer.addRenderListener(nonIgnorableExceptionListener);
    int maxMemory=wms.getMaxRequestMemory() * KB;
    PDFMaxSizeEnforcer memoryChecker=new PDFMaxSizeEnforcer(renderer,graphic,maxMemory);
    renderer.paint(graphic,paintArea,mapContext.getRenderingArea(),mapContext.getRenderingTransform());
    MapDecorationLayout.Block watermark=RenderedImageMapOutputFormat.getWatermark(wms.getServiceInfo());
    if (watermark != null) {
      MapDecorationLayout layout=new MapDecorationLayout();
      layout.paint(graphic,paintArea,mapContext);
    }
    if (nonIgnorableExceptionListener.exceptionOccurred()) {
      Exception renderError=nonIgnorableExceptionListener.getException();
      throw new ServiceException("Rendering process failed",renderError,"internalError");
    }
    if (errorChecker.exceedsMaxErrors()) {
      throw new ServiceException("More than " + maxErrors + " rendering errors occurred, bailing out",errorChecker.getLastException(),"internalError");
    }
    if (memoryChecker.exceedsMaxSize()) {
      long kbMax=maxMemory / KB;
      throw new ServiceException("Rendering request used more memory than the maximum allowed:" + kbMax + "KB");
    }
    graphic.dispose();
    cb.addTemplate(tp,0,0);
    document.close();
    writer.flush();
    writer.close();
  }
 catch (  DocumentException t) {
    throw new ServiceException("Error setting up the PDF",t,"internalError");
  }
}
