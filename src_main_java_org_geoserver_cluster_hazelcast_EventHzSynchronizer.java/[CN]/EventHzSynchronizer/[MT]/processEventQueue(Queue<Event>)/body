{
  Catalog cat=gs.getCatalog();
  Iterator<Event> it=q.iterator();
  while (it.hasNext()) {
    Event e=it.next();
    if (e instanceof ConfigChangeEvent) {
      ConfigChangeEvent ce=(ConfigChangeEvent)e;
      Type t=ce.getChangeType();
      Class<? extends Info> clazz=ce.getObjectInterface();
      String id=ce.getObjectId();
      String name=ce.getObjectName();
      if (CatalogInfo.class.isAssignableFrom(clazz)) {
        CatalogInfo subj=null;
        if (WorkspaceInfo.class.isAssignableFrom(clazz)) {
          subj=cat.getWorkspace(id);
        }
 else         if (NamespaceInfo.class.isAssignableFrom(clazz)) {
          subj=cat.getNamespace(id);
        }
 else         if (StoreInfo.class.isAssignableFrom(clazz)) {
          subj=cat.getStore(id,(Class<StoreInfo>)clazz);
        }
 else         if (ResourceInfo.class.isAssignableFrom(clazz)) {
          subj=cat.getResource(id,(Class<ResourceInfo>)clazz);
        }
 else         if (LayerInfo.class.isAssignableFrom(clazz)) {
          subj=cat.getLayer(id);
        }
 else         if (StyleInfo.class.isAssignableFrom(clazz)) {
          subj=cat.getStyle(id);
        }
 else         if (LayerGroupInfo.class.isAssignableFrom(clazz)) {
          subj=cat.getLayerGroup(id);
        }
        Method notifyMethod;
        CatalogEventImpl evt;
switch (t) {
case ADD:
          notifyMethod=CatalogListener.class.getMethod("handleAddEvent",CatalogAddEvent.class);
        evt=new CatalogAddEventImpl();
      break;
case MODIFY:
    notifyMethod=CatalogListener.class.getMethod("handlePostModifyEvent",CatalogPostModifyEvent.class);
  evt=new CatalogPostModifyEventImpl();
break;
case REMOVE:
notifyMethod=CatalogListener.class.getMethod("handleRemoveEvent",CatalogRemoveEvent.class);
evt=new CatalogRemoveEventImpl();
subj=(CatalogInfo)Proxy.newProxyInstance(getClass().getClassLoader(),new Class[]{clazz},new RemovedObjectProxy(id,name));
break;
default :
throw new IllegalStateException("Should not happen");
}
if (subj == null) {
LOGGER.warning(String.format("Received %s event for (%s, %s) but could" + " not find in catalog",t.name(),id,clazz.getSimpleName()));
return;
}
evt.setSource(subj);
try {
for (CatalogListener l : cat.getListeners()) {
if (l != this) notifyMethod.invoke(l,evt);
}
}
 catch (Exception ex) {
LOGGER.log(Level.WARNING,"Event dispatch failed",ex);
}
}
 else {
Info subj;
Method notifyMethod;
if (GeoServerInfo.class.isAssignableFrom(clazz)) {
subj=gs.getGlobal();
notifyMethod=ConfigurationListener.class.getMethod("handlePostGlobalChange",GeoServerInfo.class);
}
 else if (SettingsInfo.class.isAssignableFrom(clazz)) {
WorkspaceInfo ws=ce.getWorkspaceId() != null ? cat.getWorkspace(ce.getWorkspaceId()) : null;
subj=ws != null ? gs.getSettings(ws) : gs.getSettings();
notifyMethod=ConfigurationListener.class.getMethod("handleSettingsPostModified",SettingsInfo.class);
}
 else if (LoggingInfo.class.isAssignableFrom(clazz)) {
subj=gs.getLogging();
notifyMethod=ConfigurationListener.class.getMethod("handlePostLoggingChange",LoggingInfo.class);
}
 else if (ServiceInfo.class.isAssignableFrom(clazz)) {
subj=gs.getService(id,(Class<ServiceInfo>)clazz);
notifyMethod=ConfigurationListener.class.getMethod("handlePostServiceChange",ServiceInfo.class);
}
 else {
throw new IllegalStateException("Unknown event type " + clazz);
}
for (ConfigurationListener l : gs.getListeners()) {
try {
if (l != this) notifyMethod.invoke(l,subj);
}
 catch (Exception ex) {
LOGGER.log(Level.WARNING,"Event dispatch failed",ex);
}
}
}
}
it.remove();
}
}
