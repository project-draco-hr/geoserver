{
  Catalog cat=gs.getCatalog();
  Iterator<Event> it=q.iterator();
  while (it.hasNext()) {
    Event e=it.next();
    if (e instanceof ConfigChangeEvent) {
      ConfigChangeEvent ce=(ConfigChangeEvent)e;
      Type t=ce.getChangeType();
      Class<? extends Info> clazz=ce.getObjectInterface();
      String id=ce.getObjectId();
      String name=ce.getObjectName();
      if (CatalogInfo.class.isAssignableFrom(clazz)) {
        CatalogInfo subj=null;
        if (WorkspaceInfo.class.isAssignableFrom(clazz)) {
          subj=cat.getWorkspace(id);
        }
 else         if (NamespaceInfo.class.isAssignableFrom(clazz)) {
          subj=cat.getNamespace(id);
        }
 else         if (StoreInfo.class.isAssignableFrom(clazz)) {
          subj=cat.getStore(id,(Class<StoreInfo>)clazz);
        }
 else         if (ResourceInfo.class.isAssignableFrom(clazz)) {
          subj=cat.getResource(id,(Class<ResourceInfo>)clazz);
        }
 else         if (LayerInfo.class.isAssignableFrom(clazz)) {
          subj=cat.getLayer(id);
        }
 else         if (StyleInfo.class.isAssignableFrom(clazz)) {
          subj=cat.getStyle(id);
        }
 else         if (LayerGroupInfo.class.isAssignableFrom(clazz)) {
          subj=cat.getLayerGroup(id);
        }
switch (t) {
case ADD:
case MODIFY:
          if (subj == null) {
            LOGGER.warning(String.format("Received %s event for (%s, %s) but could" + " not find in catalog",t.name(),id,clazz.getSimpleName()));
            return;
          }
        try {
          if (t == Type.ADD) {
            cat.fireAdded(subj);
          }
 else {
            cat.firePostModified(subj);
          }
        }
 catch (        Exception ex) {
          LOGGER.log(Level.WARNING,"Event dispatch failed",ex);
        }
      break;
case REMOVE:
    subj=(CatalogInfo)Proxy.newProxyInstance(getClass().getClassLoader(),new Class[]{clazz},new RemovedObjectProxy(id,name));
  cat.fireRemoved(subj);
}
}
 else {
if (GeoServerInfo.class.isAssignableFrom(clazz)) {
GeoServerInfo subj=gs.getGlobal();
for (ConfigurationListener l : gs.getListeners()) {
  try {
    l.handlePostGlobalChange(subj);
  }
 catch (  Exception ex) {
    LOGGER.log(Level.WARNING,"Event dispatch failed",ex);
  }
}
}
 else if (SettingsInfo.class.isAssignableFrom(clazz)) {
WorkspaceInfo ws=ce.getWorkspaceId() != null ? cat.getWorkspace(ce.getWorkspaceId()) : null;
SettingsInfo subj=ws != null ? gs.getSettings(ws) : gs.getSettings();
for (ConfigurationListener l : gs.getListeners()) {
  try {
    l.handleSettingsPostModified(subj);
  }
 catch (  Exception ex) {
    LOGGER.log(Level.WARNING,"Event dispatch failed",ex);
  }
}
}
 else if (LoggingInfo.class.isAssignableFrom(clazz)) {
LoggingInfo subj=gs.getLogging();
for (ConfigurationListener l : gs.getListeners()) {
  try {
    l.handlePostLoggingChange(subj);
  }
 catch (  Exception ex) {
    LOGGER.log(Level.WARNING,"Event dispatch failed",ex);
  }
}
}
 else if (ServiceInfo.class.isAssignableFrom(clazz)) {
ServiceInfo subj=gs.getService(id,(Class<ServiceInfo>)clazz);
for (ConfigurationListener l : gs.getListeners()) {
  try {
    l.handlePostServiceChange(subj);
  }
 catch (  Exception ex) {
    LOGGER.log(Level.WARNING,"Event dispatch failed",ex);
  }
}
}
}
}
it.remove();
}
}
