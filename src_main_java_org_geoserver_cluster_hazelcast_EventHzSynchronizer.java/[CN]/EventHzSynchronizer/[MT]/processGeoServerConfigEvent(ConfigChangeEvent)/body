{
  final Class<? extends Info> clazz=ce.getObjectInterface();
  final String id=ce.getObjectId();
  final Catalog cat=cluster.getRawCatalog();
  Info subj;
  Method notifyMethod;
  if (GeoServerInfo.class.isAssignableFrom(clazz)) {
    subj=gs.getGlobal();
    notifyMethod=ConfigurationListener.class.getMethod("handlePostGlobalChange",GeoServerInfo.class);
  }
 else   if (SettingsInfo.class.isAssignableFrom(clazz)) {
    WorkspaceInfo ws=ce.getWorkspaceId() != null ? cat.getWorkspace(ce.getWorkspaceId()) : null;
    subj=ws != null ? gs.getSettings(ws) : gs.getSettings();
    notifyMethod=ConfigurationListener.class.getMethod("handleSettingsPostModified",SettingsInfo.class);
  }
 else   if (LoggingInfo.class.isAssignableFrom(clazz)) {
    subj=gs.getLogging();
    notifyMethod=ConfigurationListener.class.getMethod("handlePostLoggingChange",LoggingInfo.class);
  }
 else   if (ServiceInfo.class.isAssignableFrom(clazz)) {
    subj=gs.getService(id,(Class<ServiceInfo>)clazz);
    notifyMethod=ConfigurationListener.class.getMethod("handlePostServiceChange",ServiceInfo.class);
  }
 else {
    throw new IllegalStateException("Unknown event type " + clazz);
  }
  for (  ConfigurationListener l : gs.getListeners()) {
    try {
      if (l != this)       notifyMethod.invoke(l,subj);
    }
 catch (    Exception ex) {
      LOGGER.log(Level.WARNING,format("%s - Event dispatch failed: %s",nodeId(),ce),ex);
    }
  }
}
