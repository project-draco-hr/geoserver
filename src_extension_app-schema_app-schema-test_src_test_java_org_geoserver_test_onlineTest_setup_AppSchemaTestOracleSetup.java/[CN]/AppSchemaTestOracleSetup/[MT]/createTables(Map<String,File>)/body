{
  StringBuffer buf=new StringBuffer();
  StringBuffer spatialIndex=new StringBuffer();
  buf.append("CREATE OR REPLACE PROCEDURE DROP_TABLE_OR_VIEW(TabName in Varchar2) IS ").append("temp number:=0;").append(" tes VARCHAR2 (200) := TabName;").append(" drp_stmt VARCHAR2 (200):=null;").append("BEGIN select count(*) into temp from user_tables where TABLE_NAME = tes;").append("if temp = 1 then drp_stmt := 'Drop Table '||tes;").append("EXECUTE IMMEDIATE drp_stmt;").append("else select count(*) into temp from user_views where VIEW_NAME = tes;").append("if temp = 1 then drp_stmt := 'Drop VIEW '||tes;").append("EXECUTE IMMEDIATE drp_stmt;end if;end if;").append("EXCEPTION WHEN OTHERS THEN ").append("raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);").append("END DROP_TABLE_OR_VIEW;\n");
  for (  String fileName : propertyFiles.keySet()) {
    PropertyFeatureReader reader=new PropertyFeatureReader(propertyFiles.get(fileName),fileName.substring(0,fileName.lastIndexOf(".properties")));
    SimpleFeatureType schema=reader.getFeatureType();
    String tableName=schema.getName().getLocalPart().toUpperCase();
    buf.append("CALL DROP_TABLE_OR_VIEW('").append(tableName).append("')\n");
    buf.append("CREATE TABLE ").append(tableName).append("(");
    int size=schema.getAttributeCount() + 2;
    String[] fieldNames=new String[size];
    List<String> createParams=new ArrayList<String>();
    int j=0;
    String type;
    String field;
    int spatialIndexCounter=0;
    for (    PropertyDescriptor desc : schema.getDescriptors()) {
      field=desc.getName().toString().toUpperCase();
      fieldNames[j]=field;
      if (desc instanceof GeometryDescriptor) {
        type="SDO_GEOMETRY";
        int srid=getSrid(((GeometryType)desc.getType()));
        spatialIndex.append("DELETE FROM user_sdo_geom_metadata WHERE table_name = '").append(tableName).append("'\n");
        spatialIndex.append("Insert into user_sdo_geom_metadata ").append("(TABLE_NAME,COLUMN_NAME,DIMINFO,SRID)").append("values ('").append(tableName).append("','").append(field).append("',MDSYS.SDO_DIM_ARRAY(MDSYS.SDO_DIM_ELEMENT('X',140.962,144.909,0.00001),").append("MDSYS.SDO_DIM_ELEMENT('Y',-38.858,-33.98,0.00001)),").append(srid).append(")\n");
        String indexName=(tableName.length() <= 26 ? tableName : tableName.substring(0,26)) + "_IDX";
        if (spatialIndexCounter > 0) {
          indexName+=spatialIndexCounter;
        }
        spatialIndex.append("CREATE INDEX \"").append(indexName).append("\" ON \"").append(tableName).append("\"(\"").append(field).append("\") ").append("INDEXTYPE IS \"MDSYS\".\"SPATIAL_INDEX\"\n");
        spatialIndexCounter++;
      }
 else {
        type=Classes.getShortName(desc.getType().getBinding());
        if (type.equalsIgnoreCase("String")) {
          type="NVARCHAR2(250)";
        }
 else         if (type.equalsIgnoreCase("Double")) {
          type="NUMBER";
        }
      }
      createParams.add(field + " " + type);
      j++;
    }
    if (schema.isIdentified()) {
      fieldNames[j]="ROW_ID";
      createParams.add("ROW_ID VARCHAR2(30)");
      j++;
    }
    fieldNames[j]="PKEY";
    createParams.add("PKEY NUMBER(5)");
    buf.append(StringUtils.join(createParams.iterator(),", "));
    buf.append(")\n");
    buf.append("ALTER TABLE " + tableName + " ADD CONSTRAINT "+ tableName+ " PRIMARY KEY (PKEY)\n");
    SimpleFeature feature;
    FeatureId id;
    int pKey=0;
    while (reader.hasNext()) {
      buf.append("INSERT INTO ").append(tableName).append("(");
      feature=reader.next();
      buf.append(StringUtils.join(fieldNames,", "));
      buf.append(") ");
      buf.append("VALUES (");
      Collection<Property> properties=feature.getProperties();
      String[] values=new String[size];
      int valueIndex=0;
      for (      Property prop : properties) {
        Object value=prop.getValue();
        if (value == null || value.toString().equalsIgnoreCase("null")) {
          values[valueIndex]="null";
        }
 else         if (prop.getType() instanceof GeometryType) {
          int srid=getSrid(((GeometryType)prop.getType()));
          StringBuffer geomValue=new StringBuffer("SDO_GEOMETRY('");
          geomValue.append(value).append("'");
          if (srid > -1) {
            geomValue.append(", ").append(srid);
          }
          geomValue.append(")");
          values[valueIndex]=geomValue.toString();
        }
 else         if (prop.getType().getBinding().getSimpleName().equalsIgnoreCase("DATE")) {
          values[valueIndex]="TO_DATE('" + value + "', 'yyyy-MM-dd')";
        }
 else {
          values[valueIndex]="'" + value + "'";
        }
        valueIndex++;
      }
      id=feature.getIdentifier();
      if (id != null) {
        values[valueIndex]="'" + id.toString() + "'";
        valueIndex++;
      }
      values[valueIndex]="'" + pKey + "'";
      pKey++;
      buf.append(StringUtils.join(values,","));
      buf.append(")\n");
    }
  }
  buf.append(spatialIndex.toString());
  if (buf.length() > 0) {
    this.sql=buf.toString();
  }
}
