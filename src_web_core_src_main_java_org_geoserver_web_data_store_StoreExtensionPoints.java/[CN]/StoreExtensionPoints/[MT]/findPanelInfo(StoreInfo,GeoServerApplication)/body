{
  final Catalog catalog=storeInfo.getCatalog();
  final ResourcePool resourcePool=catalog.getResourcePool();
  Class<?> factoryClass=null;
  if (storeInfo instanceof DataStoreInfo) {
    DataAccessFactory storeFactory;
    try {
      storeFactory=resourcePool.getDataStoreFactory((DataStoreInfo)storeInfo);
    }
 catch (    IOException e) {
      throw new IllegalArgumentException("no factory found for StoreInfo " + storeInfo);
    }
    if (storeFactory != null) {
      factoryClass=storeFactory.getClass();
    }
  }
 else   if (storeInfo instanceof CoverageStoreInfo) {
    AbstractGridFormat gridFormat;
    gridFormat=resourcePool.getGridCoverageFormat((CoverageStoreInfo)storeInfo);
    if (gridFormat != null) {
      factoryClass=gridFormat.getClass();
    }
  }
 else {
    throw new IllegalArgumentException("Unknown store type: " + storeInfo.getClass().getName());
  }
  if (factoryClass == null) {
    throw new IllegalArgumentException("Can't locate the factory for the store");
  }
  final List<DataStorePanelInfo> providers=app.getBeansOfType(DataStorePanelInfo.class);
  List<DataStorePanelInfo> fallbacks=new ArrayList<DataStorePanelInfo>();
  for (  DataStorePanelInfo provider : providers) {
    Class<?> providerFactoryClass=provider.getFactoryClass();
    if (providerFactoryClass == null) {
      continue;
    }
    if (factoryClass.equals(providerFactoryClass)) {
      return provider;
    }
 else     if (providerFactoryClass.isAssignableFrom(factoryClass)) {
      fallbacks.add(provider);
    }
  }
  if (fallbacks.size() == 1) {
    return fallbacks.get(0);
  }
 else   if (fallbacks.size() > 1) {
    Collections.sort(fallbacks,new Comparator<DataStorePanelInfo>(){
      public int compare(      DataStorePanelInfo o1,      DataStorePanelInfo o2){
        Class c1=o1.getFactoryClass();
        Class c2=o2.getFactoryClass();
        if (c1.equals(c2)) {
          return 0;
        }
        if (c1.isAssignableFrom(c2)) {
          return 1;
        }
        if (c2.isAssignableFrom(c1)) {
          ;
        }
        return -1;
      }
    }
);
    DataStorePanelInfo f1=fallbacks.get(0);
    DataStorePanelInfo f2=fallbacks.get(1);
    if (f1.getFactoryClass().equals(f2.getFactoryClass())) {
      String msg="Multiple editor panels for : (" + f1.getFactoryClass() + "): "+ f1+ ", "+ f2;
      throw new RuntimeException(msg);
    }
    return f1;
  }
  return null;
}
