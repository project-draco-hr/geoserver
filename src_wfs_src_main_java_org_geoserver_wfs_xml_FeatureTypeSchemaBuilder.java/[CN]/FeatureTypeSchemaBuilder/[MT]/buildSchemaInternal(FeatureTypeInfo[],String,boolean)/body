{
  XSDFactory factory=XSDFactory.eINSTANCE;
  XSDSchema schema=factory.createXSDSchema();
  schema.setSchemaForSchemaQNamePrefix("xsd");
  schema.getQNamePrefixToNamespaceMap().put("xsd",XSDConstants.SCHEMA_FOR_SCHEMA_URI_2001);
  schema.setElementFormDefault(XSDForm.get(XSDForm.QUALIFIED));
  HashMap ns2featureTypeInfos=new HashMap();
  for (int i=0; i < featureTypeInfos.length; i++) {
    String prefix=featureTypeInfos[i].getNamespace().getPrefix();
    List l=(List)ns2featureTypeInfos.get(prefix);
    if (l == null) {
      l=new ArrayList();
    }
    l.add(featureTypeInfos[i]);
    ns2featureTypeInfos.put(prefix,l);
  }
  if (baseUrl == null)   baseUrl=wfs.getSchemaBaseURL();
  if (ns2featureTypeInfos.entrySet().size() == 1) {
    String targetPrefix=(String)ns2featureTypeInfos.keySet().iterator().next();
    String targetNamespace=catalog.getNamespaceByPrefix(targetPrefix).getURI();
    schema.setTargetNamespace(targetNamespace);
    schema.getQNamePrefixToNamespaceMap().put(targetPrefix,targetNamespace);
    for (    NamespaceInfo nameSpaceinfo : catalog.getNamespaces()) {
      if (!schema.getQNamePrefixToNamespaceMap().containsKey(nameSpaceinfo.getPrefix())) {
        schema.getQNamePrefixToNamespaceMap().put(nameSpaceinfo.getPrefix(),nameSpaceinfo.getURI());
      }
    }
    try {
      FeatureType featureType=featureTypeInfos[0].getFeatureType();
      Object schemaUri=featureType.getUserData().get("schemaURI");
      if (schemaUri != null && schemaUri instanceof Map) {
        @SuppressWarnings("unchecked") Map<String,String> schemaURIs=new TreeMap<String,String>((Map<String,String>)schemaUri);
        if (!findTypeInSchema(featureTypeInfos[0],schema,factory)) {
          Map<String,String> imports=new HashMap<String,String>();
          Set<String> includes=new HashSet<String>();
          for (          String namespace : schemaURIs.keySet()) {
            addReference(schema,factory,namespace,schemaURIs.get(namespace),imports,includes);
          }
        }
        return schema;
      }
    }
 catch (    IOException e) {
      logger.warning("Unable to get schema location for feature type '" + featureTypeInfos[0].getPrefixedName() + "'. Reason: '"+ e.getMessage()+ "'. Building the schema manually instead.");
    }
    importGMLSchema(schema,factory,baseUrl);
    schema.getQNamePrefixToNamespaceMap().put(gmlPrefix,gmlNamespace);
    for (int i=0; i < featureTypeInfos.length; i++) {
      try {
        buildSchemaContent(featureTypeInfos[i],schema,factory,baseUrl);
      }
 catch (      Exception e) {
        logger.log(Level.WARNING,"Could not build xml schema for type: " + featureTypeInfos[i].getName(),e);
      }
    }
  }
 else {
    NamespaceInfo ns=featureTypeInfos[0].getNamespace();
    schema.setTargetNamespace(ns.getURI());
    Map<String,String> imports=new HashMap<String,String>();
    Set<String> includes=new HashSet<String>();
    for (Iterator i=ns2featureTypeInfos.entrySet().iterator(); i.hasNext(); ) {
      Map.Entry entry=(Map.Entry)i.next();
      String prefix=(String)entry.getKey();
      List types=(List)entry.getValue();
      StringBuffer typeNames=new StringBuffer();
      for (Iterator t=types.iterator(); t.hasNext(); ) {
        FeatureTypeInfo info=(FeatureTypeInfo)t.next();
        FeatureType featureType=info.getFeatureType();
        Object schemaUri=featureType.getUserData().get("schemaURI");
        if (schemaUri != null && schemaUri instanceof Map) {
          @SuppressWarnings("unchecked") Map<String,String> schemaURIs=new TreeMap<String,String>((Map<String,String>)schemaUri);
          for (          String namespace : schemaURIs.keySet()) {
            addReference(schema,factory,namespace,schemaURIs.get(namespace),imports,includes);
          }
        }
 else {
          typeNames.append(info.getPrefixedName()).append(",");
        }
      }
      if (typeNames.length() > 0) {
        typeNames.setLength(typeNames.length() - 1);
        Map<String,String> params=new LinkedHashMap<String,String>(describeFeatureTypeParams);
        params.put("typeName",typeNames.toString().trim());
        String schemaLocation=buildURL(baseUrl,"wfs",params,URLType.RESOURCE);
        String namespace=catalog.getNamespaceByPrefix(prefix).getURI();
        schema.getQNamePrefixToNamespaceMap().put(prefix,namespace);
        XSDImport imprt=factory.createXSDImport();
        imprt.setNamespace(namespace);
        imprt.setSchemaLocation(schemaLocation);
        XSDSchema resolved=null;
        if (resolveAppSchemaImports) {
          List<FeatureTypeInfo> featureTypes=new ArrayList();
          for (          String typeName : typeNames.toString().split(",")) {
            featureTypes.add(catalog.getFeatureTypeByName(typeName));
          }
          resolved=build(featureTypes.toArray(new FeatureTypeInfo[featureTypes.size()]),baseUrl);
          schema.getQNamePrefixToNamespaceMap().put("gml",gmlNamespace);
          if (getWfsSchema() != null) {
            schema.getQNamePrefixToNamespaceMap().put("wfs",getWfsSchema().getTargetNamespace());
          }
        }
        if (resolved != null) {
          imprt.setResolvedSchema(resolved);
        }
        schema.getContents().add(imprt);
        if (resolved != null) {
          ((XSDSchemaImpl)resolved).imported(imprt);
        }
      }
    }
  }
  return schema;
}
