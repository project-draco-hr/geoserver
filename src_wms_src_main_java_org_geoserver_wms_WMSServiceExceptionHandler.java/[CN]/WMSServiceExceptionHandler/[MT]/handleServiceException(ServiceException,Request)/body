{
  final String exceptions;
  final int width;
  final int height;
  final String format;
  final Color bgcolor;
  final Boolean transparent;
  try {
    exceptions=(String)request.getKvp().get("EXCEPTIONS");
    if (exceptions == null) {
      handleXmlException(exception,request);
      return;
    }
  }
 catch (  Exception e) {
    handleXmlException(exception,request);
    return;
  }
  boolean verbose=geoServer.getSettings().isVerboseExceptions();
  String charset=geoServer.getSettings().getCharset();
  if (JSONType.isJsonMimeType(exceptions)) {
    JSONType.handleJsonException(LOGGER,exception,request,charset,verbose,false);
    return;
  }
 else   if (JSONType.isJsonpMimeType(exceptions)) {
    JSONType.handleJsonException(LOGGER,exception,request,charset,verbose,true);
    return;
  }
 else   if (isImageExceptionType(exceptions)) {
    try {
      width=(Integer)request.getKvp().get("WIDTH");
      height=(Integer)request.getKvp().get("HEIGHT");
      format=(String)request.getKvp().get("FORMAT");
      bgcolor=(Color)request.getKvp().get("BGCOLOR");
      transparent=(Boolean)request.getKvp().get("TRANSPARENT");
      if (width > 0 && height > 0 && FORMATS.contains(format)) {
        handleImageException(exception,request,width,height,format,exceptions,bgcolor,transparent);
        return;
      }
 else {
        handleXmlException(exception,request);
      }
    }
 catch (    Exception e) {
      handleXmlException(exception,request);
    }
  }
 else {
    handleXmlException(exception,request);
  }
}
