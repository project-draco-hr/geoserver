{
  files=new ArrayList<FileData>();
  LinkedList<Resource> q=new LinkedList<Resource>();
  q.add(file);
  while (!q.isEmpty()) {
    Resource dir=q.poll();
    if (m.isCanceled()) {
      return;
    }
    m.setTask("Scanning " + dir.path());
    List<Resource> fileList=Resources.list(dir,new Filter<Resource>(){
      @Override public boolean accept(      Resource obj){
        return obj.getType() != Type.DIRECTORY;
      }
    }
);
    Set<Resource> all=new LinkedHashSet<Resource>(fileList);
    for (    Resource f : dir.list()) {
      if (Resources.isHidden(f)) {
        all.remove(f);
        continue;
      }
      if (f.getType() == Type.DIRECTORY) {
        if (!recursive && !f.equals(file)) {
          continue;
        }
        if (!"__MACOSX".equals(f.name())) {
          Directory d=new Directory(f);
          d.prepare(m);
          files.add(d);
        }
        continue;
      }
      if ("aux".equalsIgnoreCase(FilenameUtils.getExtension(f.name()))) {
        continue;
      }
      DataFormat format=DataFormat.lookup(f);
      if (format != null) {
        SpatialFile sf=newSpatialFile(f,format);
        sf.prepare(m);
        files.add(sf);
        all.removeAll(sf.allFiles());
      }
    }
    for (    Resource f : all) {
      files.add(new ASpatialFile(f));
    }
  }
  format=format();
}
