{
  DimensionInfo time=typeInfo.getMetadata().get(ResourceInfo.TIME,DimensionInfo.class);
  if (time == null || !time.isEnabled()) {
    throw new ServiceException("Layer " + typeInfo.prefixedName() + " does not have time support enabled");
  }
  FeatureCollection collection=getDimensionCollection(typeInfo,time);
  TreeSet<Date> result=new TreeSet<Date>();
  if (time.getPresentation() == DimensionPresentation.LIST) {
    final UniqueVisitor visitor=new UniqueVisitor(time.getAttribute());
    collection.accepts(visitor,null);
    @SuppressWarnings("unchecked") Set<Date> values=visitor.getUnique();
    if (values.size() <= 0) {
      result=null;
    }
 else {
      values.remove(null);
      result.addAll(values);
    }
  }
 else {
    final MinVisitor min=new MinVisitor(time.getAttribute());
    collection.accepts(min,null);
    CalcResult minResult=min.getResult();
    if (minResult != CalcResult.NULL_RESULT) {
      result.add((Date)min.getMin());
      final MaxVisitor max=new MaxVisitor(time.getAttribute());
      collection.accepts(max,null);
      result.add((Date)max.getMax());
    }
  }
  return result;
}
