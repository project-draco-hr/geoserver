{
  MockHttpServletResponse response=getAsServletResponse("ows?request=GetCoverage&service=WCS&version=2.0.1" + "&coverageid=wcs__Snow_depth_water_equivalent_surface&format=application/x-netcdf");
  assertEquals(200,response.getStatus());
  assertEquals("application/x-netcdf",response.getContentType());
  byte[] responseBytes=getBinary(response);
  File file=File.createTempFile("cosmo-eu-grib-rotated-pole-","-wcs__Snow_depth_water_equivalent_surface.nc",new File("./target"));
  FileUtils.writeByteArrayToFile(file,responseBytes);
  try (NetcdfDataset dataset=NetcdfDataset.openDataset(file.getAbsolutePath())){
    assertNotNull(dataset);
    Dimension rlonDim=dataset.findDimension("rlon");
    assertNotNull(rlonDim);
    assertEquals(5,rlonDim.getLength());
    Dimension rlatDim=dataset.findDimension("rlat");
    assertNotNull(rlatDim);
    assertEquals(5,rlatDim.getLength());
    Variable rlonVar=dataset.findVariable("rlon");
    assertNotNull(rlonVar);
    assertEquals(1,rlonVar.getDimensions().size());
    assertEquals(rlonDim,rlonVar.getDimensions().get(0));
    assertEquals("grid_longitude",rlonVar.findAttribute("long_name").getStringValue());
    assertEquals("grid_longitude",rlonVar.findAttribute("standard_name").getStringValue());
    assertEquals("degrees",rlonVar.findAttribute("units").getStringValue());
    assertArrayEquals(new float[]{-18,-8,2,12,22},(float[])rlonVar.read().copyTo1DJavaArray(),(float)DELTA);
    Variable rlatVar=dataset.findVariable("rlat");
    assertNotNull(rlatVar);
    assertEquals(1,rlatVar.getDimensions().size());
    assertEquals(rlatDim,rlatVar.getDimensions().get(0));
    assertEquals("grid_latitude",rlatVar.findAttribute("long_name").getStringValue());
    assertEquals("grid_latitude",rlatVar.findAttribute("standard_name").getStringValue());
    assertEquals("degrees",rlatVar.findAttribute("units").getStringValue());
    assertArrayEquals(new float[]{-20,-10,0,10,20},(float[])rlatVar.read().copyTo1DJavaArray(),(float)DELTA);
    Variable projVar=dataset.findVariable("rotated_latitude_longitude");
    assertNotNull(projVar);
    assertEquals("rotated_latitude_longitude",projVar.findAttribute("grid_mapping_name").getStringValue());
    assertEquals(-170.0,projVar.findAttribute("grid_north_pole_longitude").getNumericValue().doubleValue(),DELTA);
    assertEquals(40.0,projVar.findAttribute("grid_north_pole_latitude").getNumericValue().doubleValue(),DELTA);
    Variable dataVar=dataset.findVariable("Snow_depth_water_equivalent_surface");
    assertNotNull(dataVar);
    assertEquals("rotated_latitude_longitude",dataVar.findAttribute("grid_mapping").getStringValue());
    assertEquals(2,dataVar.getDimensions().size());
    assertEquals(rlatDim,dataVar.getDimensions().get(0));
    assertEquals(rlonDim,dataVar.getDimensions().get(1));
    assertArrayEquals(new float[]{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124},(float[])dataVar.read().copyTo1DJavaArray(),(float)DELTA);
  }
  finally {
    FileUtils.deleteQuietly(file);
  }
}
