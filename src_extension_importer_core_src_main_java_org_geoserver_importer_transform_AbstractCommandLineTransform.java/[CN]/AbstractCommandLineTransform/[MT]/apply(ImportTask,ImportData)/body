{
  boolean inline=isInline();
  File executable=getExecutable();
  Resource inputFile=getInputFile(data);
  Map<String,File> substitutions=new HashMap<>();
  substitutions.put("input",inputFile.file());
  Resource outputDirectory=null;
  Resource outputFile=null;
  if (!inline) {
    outputDirectory=getOutputDirectory(data);
    outputFile=outputDirectory.get(inputFile.name());
    substitutions.put("output",outputFile.file());
  }
  CommandLine cmd=new CommandLine(executable);
  cmd.setSubstitutionMap(substitutions);
  setupCommandLine(inline,cmd);
  DefaultExecutor executor=new DefaultExecutor();
  executor.setWatchdog(new ExecuteWatchdog(DEFAULT_TIMEOUT));
  int limit=16 * 1024;
  try {
    try (OutputStream os=new BoundedOutputStream(new ByteArrayOutputStream(),limit);OutputStream es=new BoundedOutputStream(new ByteArrayOutputStream(),limit)){
      PumpStreamHandler streamHandler=new PumpStreamHandler(os,es);
      executor.setStreamHandler(streamHandler);
      try {
        int result=executor.execute(cmd);
        if (executor.isFailure(result)) {
          throw new IOException("Failed to execute command " + cmd.toString() + "\nStandard output is:\n"+ os.toString()+ "\nStandard error is:\n"+ es.toString());
        }
      }
 catch (      Exception e) {
        throw new IOException("Failure to execute command " + cmd.toString() + "\nStandard output is:\n"+ os.toString()+ "\nStandard error is:\n"+ es.toString(),e);
      }
    }
     if (!inline) {
      List<String> names=getReplacementTargetNames(data);
      Resource inputParent=inputFile.parent();
      for (      String name : names) {
        Resource output=outputDirectory.get(name);
        Resource input=inputParent.get(name);
        if (Resources.exists(output)) {
          output.renameTo(input);
        }
 else         if (Resources.exists(input)) {
          input.delete();
        }
      }
    }
  }
  finally {
    if (outputDirectory != null) {
      outputDirectory.delete();
    }
  }
}
