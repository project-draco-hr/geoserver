{
  final Form<ShortAdminRule> form=new Form<>("form",new CompoundPropertyModel<ShortAdminRule>(rule));
  add(form);
  form.add(new TextField<Integer>("priority").setRequired(true));
  form.add(roleChoice=new DropDownChoice<>("roleName",getRoleNames()));
  roleChoice.add(new OnChangeAjaxBehavior(){
    @Override protected void onUpdate(    AjaxRequestTarget target){
      userChoice.setChoices(getUserNames(roleChoice.getConvertedInput()));
      form.getModelObject().setUserName(null);
      userChoice.modelChanged();
      target.addComponent(userChoice);
    }
  }
);
  roleChoice.setNullValid(true);
  form.add(userChoice=new DropDownChoice<>("userName",getUserNames(rule.getRoleName())));
  userChoice.setOutputMarkupId(true);
  userChoice.setNullValid(true);
  form.add(workspaceChoice=new DropDownChoice<>("workspace",getWorkspaceNames()));
  workspaceChoice.setNullValid(true);
  form.add(grantTypeChoice=new DropDownChoice<>("access",Arrays.asList(AdminGrantType.values()),new AdminGrantTypeRenderer()));
  grantTypeChoice.setRequired(true);
  form.add(new SubmitLink("save"){
    @Override public void onSubmit(){
      ShortAdminRule rule=(ShortAdminRule)getForm().getModelObject();
      try {
        rules.save(rule);
        doReturn(GeofenceServerAdminPage.class);
      }
 catch (      DuplicateKeyException e) {
        error(new ResourceModel("GeofenceRulePage.duplicate").getObject());
      }
catch (      Exception exception) {
        error(exception);
      }
    }
  }
);
  form.add(new BookmarkablePageLink<ShortAdminRule>("cancel",GeofenceServerPage.class));
}
