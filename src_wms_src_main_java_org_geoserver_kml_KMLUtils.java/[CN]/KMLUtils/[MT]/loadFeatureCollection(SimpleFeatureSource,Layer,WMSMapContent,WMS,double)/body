{
  SimpleFeatureType schema=featureSource.getSchema();
  Envelope envelope=mapContent.getRenderingArea();
  ReferencedEnvelope aoi=new ReferencedEnvelope(envelope,mapContent.getCoordinateReferenceSystem());
  CoordinateReferenceSystem sourceCrs=schema.getCoordinateReferenceSystem();
  boolean reprojectBBox=(sourceCrs != null) && !CRS.equalsIgnoreMetadata(aoi.getCoordinateReferenceSystem(),sourceCrs);
  if (reprojectBBox) {
    aoi=aoi.transform(sourceCrs,true);
  }
  Filter filter=createBBoxFilter(schema,aoi);
  Query q=new Query(schema.getTypeName());
  q.setFilter(filter);
  Query definitionQuery=layer.getQuery();
  if (definitionQuery != Query.ALL) {
    if (q == Query.ALL) {
      q=(Query)definitionQuery;
    }
 else {
      q=(Query)DataUtilities.mixQueries(definitionQuery,q,"KMLEncoder");
    }
  }
  q.setStartIndex(definitionQuery.getStartIndex());
  RegionatingStrategy regionatingStrategy=null;
  String stratname=(String)mapContent.getRequest().getFormatOptions().get("regionateBy");
  if (("auto").equals(stratname)) {
    Catalog catalog=wms.getGeoServer().getCatalog();
    Name name=layer.getFeatureSource().getName();
    stratname=catalog.getFeatureTypeByName(name).getMetadata().get("kml.regionateStrategy",String.class);
    if (stratname == null || "".equals(stratname)) {
      stratname="best_guess";
      LOGGER.log(Level.FINE,"No default regionating strategy has been configured in " + name + "; using automatic best-guess strategy.");
    }
  }
  if (stratname != null) {
    regionatingStrategy=findStrategyByName(stratname);
    if (regionatingStrategy == null)     throw new ServiceException("Unknown regionating strategy " + stratname);
  }
  Filter regionatingFilter=Filter.INCLUDE;
  if (regionatingStrategy != null)   regionatingFilter=regionatingStrategy.getFilter(mapContent,layer);
  Filter ruleFilter=summarizeRuleFilters(getLayerRules(featureSource.getSchema(),layer.getStyle()),scaleDenominator);
  Filter finalFilter=joinFilters(q.getFilter(),ruleFilter,regionatingFilter);
  if (finalFilter == Filter.EXCLUDE) {
    return null;
  }
  q.setFilter(finalFilter);
  CoordinateReferenceSystem wgs84;
  try {
    wgs84=CRS.decode("EPSG:4326");
  }
 catch (  Exception e) {
    throw new RuntimeException("Cannot decode EPSG:4326, the CRS subsystem must be badly broken...");
  }
  if (sourceCrs != null && !CRS.equalsIgnoreMetadata(wgs84,sourceCrs)) {
    return new ReprojectFeatureResults(featureSource.getFeatures(q),wgs84);
  }
  return featureSource.getFeatures(q);
}
