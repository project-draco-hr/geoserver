{
  FeatureTypeInfo ftInfo=getCatalog().getFeatureTypeByName("ex","PolymorphicFeature");
  FeatureSource fs=ftInfo.getFeatureSource(new NullProgressListener(),null);
  AppSchemaDataAccess da=(AppSchemaDataAccess)fs.getDataStore();
  FeatureTypeMapping rootMapping=da.getMappingByNameOrElement(ftInfo.getQualifiedName());
  assumeTrue(shouldTestNestedFiltersEncoding(rootMapping));
  JDBCDataStore store=(JDBCDataStore)rootMapping.getSource().getDataStore();
  FilterFactoryImplNamespaceAware ff=new FilterFactoryImplNamespaceAware();
  ff.setNamepaceContext(rootMapping.getNamespaces());
  PropertyIsEqualTo equalsFirstValue=ff.equals(ff.property("ex:firstValue/gsml:CGI_NumericValue/gsml:principalValue"),ff.literal(1.0));
  ComplexFilterSplitter splitterFirstValueFilter=new ComplexFilterSplitter(store.getFilterCapabilities(),rootMapping);
  splitterFirstValueFilter.visit(equalsFirstValue,null);
  Filter preFilter=splitterFirstValueFilter.getFilterPre();
  Filter postFilter=splitterFirstValueFilter.getFilterPost();
  assertEquals(Filter.INCLUDE,preFilter);
  assertEquals(equalsFirstValue,postFilter);
  Filter unrolled=AppSchemaDataAccess.unrollFilter(equalsFirstValue,rootMapping);
  assertTrue(NestedFilterToSQL.isNestedFilter(unrolled));
  assertContainsFeatures(fs.getFeatures(equalsFirstValue),"f1");
  PropertyIsEqualTo equalsSecondValue=ff.equals(ff.property("ex:secondValue/gsml:CGI_NumericValue/gsml:principalValue/@uom"),ff.literal("m"));
  ComplexFilterSplitter splitterSecondValue=new ComplexFilterSplitter(store.getFilterCapabilities(),rootMapping);
  splitterSecondValue.visit(equalsSecondValue,null);
  preFilter=splitterSecondValue.getFilterPre();
  postFilter=splitterSecondValue.getFilterPost();
  assertEquals(Filter.INCLUDE,preFilter);
  assertEquals(equalsSecondValue,postFilter);
  unrolled=AppSchemaDataAccess.unrollFilter(equalsSecondValue,rootMapping);
  assertTrue(NestedFilterToSQL.isNestedFilter(unrolled));
  assertContainsFeatures(fs.getFeatures(equalsSecondValue),"f1","f3");
  PropertyIsEqualTo equalsThirdValue=ff.equals(ff.property("ex:thirdValue/gsml:CGI_NumericValue/gsml:principalValue"),ff.literal(1.0));
  ComplexFilterSplitter splitterThirdValueFilter=new ComplexFilterSplitter(store.getFilterCapabilities(),rootMapping);
  splitterThirdValueFilter.visit(equalsThirdValue,null);
  preFilter=splitterThirdValueFilter.getFilterPre();
  postFilter=splitterThirdValueFilter.getFilterPost();
  assertEquals(equalsThirdValue,preFilter);
  assertEquals(Filter.INCLUDE,postFilter);
  unrolled=AppSchemaDataAccess.unrollFilter(equalsThirdValue,rootMapping);
  assertTrue(NestedFilterToSQL.isNestedFilter(unrolled));
  NestedFilterToSQL nestedFilterEncoder=createNestedFilterEncoder(rootMapping);
  String encodedFilter=nestedFilterEncoder.encodeToString(unrolled);
  assertTrue(encodedFilter.contains("EXISTS"));
  assertContainsFeatures(fs.getFeatures(equalsThirdValue),"f1","f4");
}
