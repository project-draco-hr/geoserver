{
  return new Resource(){
    String path=resourcePath;
    @Override public String path(){
      return path;
    }
    @Override public String name(){
      return Paths.name(path);
    }
    @Override public InputStream in(){
      throw new IllegalStateException("Unable to read from ResourceStore.EMPTY");
    }
    @Override public Lock lock(){
      return locks.acquire(path);
    }
    @Override public void addListener(    ResourceListener listener){
    }
    @Override public void removeListener(    ResourceListener listener){
    }
    @Override public OutputStream out(){
      throw new IllegalStateException("Unable to write to ResourceStore.EMPTY");
    }
    @Override public File file(){
      throw new IllegalStateException("No file access to ResourceStore.EMPTY");
    }
    @Override public File dir(){
      throw new IllegalStateException("No directory access to ResourceStore.EMPTY");
    }
    @Override public long lastmodified(){
      return MODIFIED;
    }
    @Override public Resource parent(){
      return ResourceStore.EMPTY.get(Paths.parent(path));
    }
    public Resource get(    String resourcePath){
      return ResourceStore.EMPTY.get(Paths.path(this.path,resourcePath));
    }
    @Override public List<Resource> list(){
      return Collections.emptyList();
    }
    @Override public Type getType(){
      return Type.UNDEFINED;
    }
    @Override public int hashCode(){
      final int prime=31;
      int result=1;
      result=prime * result + ((path == null) ? 0 : path.hashCode());
      return result;
    }
    @Override public boolean equals(    Object obj){
      if (this == obj)       return true;
      if (obj == null)       return false;
      if (getClass() != obj.getClass())       return false;
      Resource other=(Resource)obj;
      if (path == null) {
        if (other.path() != null)         return false;
      }
 else       if (!path.equals(other.path()))       return false;
      return true;
    }
    @Override public String toString(){
      return path;
    }
    @Override public boolean delete(){
      return false;
    }
    @Override public boolean renameTo(    Resource dest){
      return false;
    }
  }
;
}
