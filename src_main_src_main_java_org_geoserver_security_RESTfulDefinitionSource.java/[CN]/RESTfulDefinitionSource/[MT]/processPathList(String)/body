{
  delegate.setConvertUrlToLowercaseBeforeComparison(true);
  BufferedReader br=new BufferedReader(new StringReader(pathToRoleList));
  int counter=0;
  String line;
  List<RESTfulDefinitionSourceMapping> mappings=new ArrayList<RESTfulDefinitionSourceMapping>();
  while (true) {
    counter++;
    try {
      line=br.readLine();
    }
 catch (    IOException ioe) {
      throw new IllegalArgumentException(ioe.getMessage());
    }
    if (line == null) {
      break;
    }
    line=line.trim();
    if (log.isDebugEnabled()) {
      log.debug("Line " + counter + ": "+ line);
    }
    if (line.startsWith("//")) {
      continue;
    }
    if (line.lastIndexOf('=') == -1) {
      continue;
    }
    if (line.lastIndexOf("==") != -1) {
      throw new IllegalArgumentException("Only single equals should be used in line " + line);
    }
    String name=substringBeforeLast(line,"=");
    String value=substringAfterLast(line,"=");
    if (!StringUtils.hasText(name) || !StringUtils.hasText(value)) {
      throw new IllegalArgumentException("Failed to parse a valid name/value pair from " + line);
    }
    String antPath=name;
    String methods=null;
    int firstColonIndex=name.indexOf(":");
    if (log.isDebugEnabled())     log.debug("~~~~~~~~~~ name= " + name + " firstColonIndex= "+ firstColonIndex);
    if (firstColonIndex != -1) {
      antPath=name.substring(0,firstColonIndex);
      methods=name.substring((firstColonIndex + 1),name.length());
    }
    if (log.isDebugEnabled())     log.debug("~~~~~~~~~~ name= " + name + " antPath= "+ antPath+ " methods= "+ methods);
    String[] methodList=null;
    if (methods != null) {
      methodList=methods.split(",");
      for (int ii=0; ii < methodList.length; ii++) {
        boolean matched=false;
        for (int jj=0; jj < validMethodNames.length; jj++) {
          if (methodList[ii].equals(validMethodNames[jj])) {
            matched=true;
            break;
          }
        }
        if (!matched) {
          throw new IllegalArgumentException("The HTTP Method Name (" + methodList[ii] + " does NOT equal a valid name (GET,PUT,POST,DELETE)");
        }
      }
    }
    if (log.isDebugEnabled()) {
      log.debug("methodList = " + Arrays.toString(methodList));
    }
    for (int i=0; i < antPath.length(); i++) {
      String character=antPath.substring(i,i + 1);
      if (!character.toLowerCase().equals(character)) {
        throw new IllegalArgumentException("You are using Ant Paths, yet you have specified an uppercase character in line: " + line + " (character '"+ character+ "')");
      }
    }
    RESTfulDefinitionSourceMapping mapping=new RESTfulDefinitionSourceMapping();
    mapping.setUrl(antPath);
    mapping.setHttpMethods(methodList);
    String[] tokens=StringUtils.commaDelimitedListToStringArray(value);
    for (int i=0; i < tokens.length; i++) {
      mapping.addConfigAttribute(new SecurityConfig(tokens[i].trim()));
    }
    mappings.add(mapping);
  }
  setMappings(mappings);
}
