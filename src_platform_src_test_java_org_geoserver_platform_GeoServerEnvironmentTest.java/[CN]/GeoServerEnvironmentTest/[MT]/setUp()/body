{
  super.setUp();
  System.setProperty("TEST_SYS_PROPERTY","ABC");
  System.setProperty("ALLOW_ENV_PARAMETRIZATION","true");
  ServletContext context=EasyMock.createMock(ServletContext.class);
  EasyMock.expect(context.getInitParameter("GEOSERVER_REQUIRE_FILE")).andReturn(null);
  EasyMock.expect(context.getInitParameter("GEOSERVER_DATA_DIR")).andReturn(null);
  EasyMock.expect(context.getInitParameter("GEOSERVER_DATA_ROOT")).andReturn(null);
  EasyMock.expect(context.getRealPath("/data")).andReturn("data");
  EasyMock.replay(context);
  System.setProperty("GEOSERVER_REQUIRE_FILE","pom.xml");
  try {
    Assert.assertEquals("data",GeoServerResourceLoader.lookupGeoServerDataDirectory(context));
  }
  finally {
    System.clearProperty("GEOSERVER_REQUIRE_FILE");
  }
  GeoServerResourceLoader loader=EasyMock.createMockBuilder(GeoServerResourceLoader.class).withConstructor().createMock();
  ApplicationContext appContext=EasyMock.createMock(ApplicationContext.class);
  EasyMock.expect(appContext.getBeanNamesForType(ExtensionFilter.class)).andReturn(new String[]{}).anyTimes();
  EasyMock.expect(appContext.getBeanNamesForType(ExtensionProvider.class)).andReturn(new String[]{}).anyTimes();
  EasyMock.expect(appContext.getBeanNamesForType(GeoServerResourceLoader.class)).andReturn(new String[]{"geoServerLoader"}).anyTimes();
  Map<String,GeoServerResourceLoader> genvMap=new HashMap<>();
  genvMap.put("geoServerLoader",loader);
  EasyMock.expect(appContext.getBeansOfType(GeoServerResourceLoader.class)).andReturn(genvMap).anyTimes();
  EasyMock.expect(appContext.getBean("geoServerLoader")).andReturn(loader).anyTimes();
  EasyMock.expect(appContext.isSingleton("geoServerLoader")).andReturn(true).anyTimes();
  EasyMock.replay(appContext);
  GeoServerExtensions gsext=new GeoServerExtensions();
  gsext.setApplicationContext(appContext);
}
