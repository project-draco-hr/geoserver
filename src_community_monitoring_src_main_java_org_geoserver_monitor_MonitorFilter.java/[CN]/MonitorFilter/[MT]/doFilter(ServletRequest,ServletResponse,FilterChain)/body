{
  if (!monitor.isEnabled() || !(request instanceof HttpServletRequest)) {
    chain.doFilter(request,response);
    return;
  }
  HttpServletRequest req=(HttpServletRequest)request;
  HttpServletResponse resp=(HttpServletResponse)response;
  if (requestFilter.filter(req)) {
    if (LOGGER.isLoggable(Level.FINE)) {
      LOGGER.fine(req.getRequestURI() + " was filtered from monitoring");
    }
    chain.doFilter(request,response);
    return;
  }
  RequestData data=monitor.start();
  data.setStartTime(new Date());
  data.setPath(req.getServletPath() + req.getPathInfo());
  if (req.getQueryString() != null) {
    data.setQueryString(URLDecoder.decode(req.getQueryString(),"UTF-8"));
  }
  data.setHttpMethod(req.getMethod());
  data.setBodyContentLength(req.getContentLength());
  data.setBodyContentType(req.getContentType());
  String serverName=System.getProperty("http.serverName");
  if (serverName == null) {
    serverName=req.getServerName();
  }
  data.setHost(serverName);
  data.setInternalHost(InternalHostname.get());
  data.setRemoteAddr(getRemoteAddr(req));
  data.setStatus(Status.RUNNING);
  if (SecurityContextHolder.getContext() != null && SecurityContextHolder.getContext().getAuthentication() != null) {
    Authentication auth=SecurityContextHolder.getContext().getAuthentication();
    if (auth.getPrincipal() != null && auth.getPrincipal() instanceof User) {
      data.setRemoteUser(((User)auth.getPrincipal()).getUsername());
    }
  }
  request=new MonitorServletRequest(req);
  response=new MonitorServletResponse(resp);
  monitor.update();
  Throwable error=null;
  try {
    chain.doFilter(request,response);
  }
 catch (  Throwable t) {
    error=t;
  }
  data=monitor.current();
  data.setBody(((MonitorServletRequest)request).getBodyContent());
  data.setBodyContentLength(((MonitorServletRequest)request).getBytesRead());
  data.setResponseContentType(response.getContentType());
  data.setResponseLength(((MonitorServletResponse)response).getContentLength());
  if (error != null) {
    data.setStatus(Status.FAILED);
    data.setErrorMessage(error.getLocalizedMessage());
    data.setError(error);
  }
  if (data.getStatus() != Status.FAILED) {
    data.setStatus(Status.FINISHED);
  }
  data.setEndTime(new Date());
  data.setTotalTime(data.getEndTime().getTime() - data.getStartTime().getTime());
  monitor.update();
  data=monitor.current();
  monitor.complete();
  postProcessExecutor.execute(new PostProcessTask(monitor,data,req,resp));
  if (error != null) {
    if (error instanceof RuntimeException) {
      throw (RuntimeException)error;
    }
 else {
      throw new RuntimeException(error);
    }
  }
}
