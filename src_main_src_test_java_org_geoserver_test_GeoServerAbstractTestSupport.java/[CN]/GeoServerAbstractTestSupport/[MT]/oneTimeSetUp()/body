{
  if (System.getProperty("org.geotools.referencing.forceXY") == null || !"http".equals(Hints.getSystemDefault(Hints.FORCE_AXIS_ORDER_HONORING))) {
    System.setProperty("org.geotools.referencing.forceXY","true");
    Hints.putSystemDefault(Hints.FORCE_AXIS_ORDER_HONORING,"http");
    CRS.reset("all");
  }
  testData=buildTestData();
  testData.setUp();
  try {
    Logging.ALL.setLoggerFactory(Log4JLoggerFactory.getInstance());
  }
 catch (  Exception e) {
    LOGGER.log(Level.SEVERE,"Could not configure log4j logging redirection",e);
  }
  System.setProperty(LoggingUtils.RELINQUISH_LOG4J_CONTROL,"true");
  GeoServerResourceLoader loader=new GeoServerResourceLoader(testData.getDataDirectoryRoot());
  LoggingUtils.configureGeoServerLogging(loader,getClass().getResourceAsStream(getLogConfiguration()),false,true,null);
  GeoServerLoader.setLegacy(useLegacyDataDirectory());
  if (testData.isTestDataAvailable()) {
    org.springframework.core.io.ResourceLoader rl;
    if (testData.getDataDirectoryRoot().canWrite()) {
      File webinf=new File(testData.getDataDirectoryRoot(),"WEB-INF");
      webinf.mkdir();
      rl=new DirectoryResourceLoader(testData.getDataDirectoryRoot());
    }
 else {
      rl=new DefaultResourceLoader();
    }
    MockServletContext servletContext=new MockServletContext(rl);
    servletContext.setInitParameter("GEOSERVER_DATA_DIR",testData.getDataDirectoryRoot().getPath());
    servletContext.setMinorVersion(4);
    servletContext.setInitParameter("serviceStrategy","PARTIAL-BUFFER2");
    applicationContext=new GeoServerTestApplicationContext(getSpringContextLocations(),servletContext);
    applicationContext.setValidating(validating);
    applicationContext.setUseLegacyGeoServerLoader(useLegacyDataDirectory());
    applicationContext.refresh();
    applicationContext.publishEvent(new ContextLoadedEvent(applicationContext));
    servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE,applicationContext);
  }
}
