{
  setLayout(new BorderLayout(5,5));
  textArea=new JTextArea();
  final JScrollPane scrollPane=new JScrollPane(textArea);
  add(scrollPane,BorderLayout.CENTER);
  scrollPane.setPreferredSize(new Dimension(450,300));
  textArea.setLineWrap(false);
  scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
  scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
  add(Box.createHorizontalStrut(5),BorderLayout.WEST);
  add(Box.createHorizontalStrut(5),BorderLayout.EAST);
  add(Box.createVerticalStrut(5),BorderLayout.NORTH);
  JPanel statusPanel=new JPanel(new FlowLayout(FlowLayout.LEFT));
  add(statusPanel,BorderLayout.SOUTH);
  statusPanel.add(Box.createHorizontalStrut(3));
  statusLabel=new JLabel();
  statusPanel.add(statusLabel);
  JMenuBar menuBar=new JMenuBar();
  setJMenuBar(menuBar);
  JMenu geoServerMenu=new JMenu("Server");
  menuBar.add(geoServerMenu);
  JMenu editMenu=new JMenu("Edit");
  menuBar.add(editMenu);
  startMenuItem=new JMenuItem("Start");
  geoServerMenu.add(startMenuItem);
  startMenuItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      try {
        start();
      }
 catch (      Exception e1) {
        e1.printStackTrace();
      }
    }
  }
);
  shutDownMenuItem=new JMenuItem("Shutdown");
  geoServerMenu.add(shutDownMenuItem);
  shutDownMenuItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      try {
        stop();
      }
 catch (      Exception e1) {
        throw new RuntimeException(e1);
      }
    }
  }
);
  shutDownMenuItem.setEnabled(false);
  copyMenuItem=new JMenuItem("Copy");
  editMenu.add(copyMenuItem);
  copyMenuItem.setEnabled(false);
  copyMenuItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      String selection=textArea.getSelectedText();
      StringSelection data=new StringSelection(selection);
      Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();
      clipboard.setContents(data,data);
    }
  }
);
  editMenu.addSeparator();
  JMenuItem selectAllMenuItem=new JMenuItem("Select All");
  editMenu.add(selectAllMenuItem);
  selectAllMenuItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      textArea.selectAll();
    }
  }
);
  editMenu.addMenuListener(new MenuListener(){
    public void menuCanceled(    MenuEvent e){
    }
    public void menuDeselected(    MenuEvent e){
    }
    public void menuSelected(    MenuEvent e){
      String selected=textArea.getSelectedText();
      copyMenuItem.setEnabled(selected != null && !selected.equals(""));
    }
  }
);
  setSize(550,350);
  setTitle("GeoServer");
  setIconImage(Toolkit.getDefaultToolkit().createImage(GeoServerConsole.class.getResource("gs.gif")));
  pack();
  addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      boolean started=true;
      try {
        started=handler.isStarted();
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
      if (started) {
        String msg="Would you like to shutdown GeoServer before exiting?";
switch (JOptionPane.showConfirmDialog(Frame.this,msg)) {
case JOptionPane.CANCEL_OPTION:
          setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        return;
case JOptionPane.OK_OPTION:
      setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
    Thread t=new Thread(new Runnable(){
      public void run(){
        try {
          while (handler.isStarted()) {
            Thread.sleep(500);
          }
          Frame.this.setDefaultCloseOperation(EXIT_ON_CLOSE);
          Frame.this.dispose();
          System.exit(0);
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
    }
);
  t.start();
stop();
return;
case JOptionPane.NO_OPTION:
setDefaultCloseOperation(DISPOSE_ON_CLOSE);
return;
}
}
 else {
setDefaultCloseOperation(EXIT_ON_CLOSE);
}
}
}
);
stopped();
}
