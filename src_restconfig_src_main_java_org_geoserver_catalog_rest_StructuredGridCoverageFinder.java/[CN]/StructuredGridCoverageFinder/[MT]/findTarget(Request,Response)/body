{
  String ws=getAttribute(request,"workspace");
  String cs=getAttribute(request,"coveragestore");
  String c=getAttribute(request,"coverage");
  String lastSegment=request.getResourceRef().getLastSegment();
  boolean granules=lastSegment.equals("granules") || lastSegment.matches("granules\\..*");
  String granule=getAttribute(request,"granule");
  if (ws == null || cs == null || c == null) {
    throw new RestletException("Invalid path, workspace, store and coverage name must be specified",Status.CLIENT_ERROR_NOT_FOUND);
  }
  if (catalog.getWorkspaceByName(ws) == null) {
    throw new RestletException("No such workspace: " + ws,Status.CLIENT_ERROR_NOT_FOUND);
  }
  CoverageStoreInfo store=catalog.getCoverageStoreByName(ws,cs);
  if (store == null) {
    throw new RestletException("No such coveragestore: " + ws + ","+ cs,Status.CLIENT_ERROR_NOT_FOUND);
  }
  CoverageInfo coverage=catalog.getCoverageByCoverageStore(store,c);
  if (coverage == null) {
    throw new RestletException("No such coverage: " + c + " in store "+ ws+ "/"+ cs,Status.CLIENT_ERROR_NOT_FOUND);
  }
  try {
    GridCoverageReader reader=coverage.getGridCoverageReader(null,null);
    if (!(reader instanceof StructuredGridCoverage2DReader)) {
      throw new RestletException("Coverage exists, but is no structured grid coverage, no index and inner granules are available",Status.CLIENT_ERROR_NOT_FOUND);
    }
    if (!granules && granule == null) {
      return new StructuredGridCoverageIndexResource(getContext(),request,response,catalog,coverage);
    }
 else     if (granule == null) {
      if (granules) {
        return new GranulesResource(getContext(),request,response,catalog,coverage);
      }
 else {
        throw new RestletException("Invalid path",Status.CLIENT_ERROR_NOT_FOUND);
      }
    }
 else {
      return new GranuleResource(getContext(),request,response,catalog,coverage,granule);
    }
  }
 catch (  IOException e) {
    throw new RestletException("Failed to load coverage information",Status.SERVER_ERROR_INTERNAL,e);
  }
}
