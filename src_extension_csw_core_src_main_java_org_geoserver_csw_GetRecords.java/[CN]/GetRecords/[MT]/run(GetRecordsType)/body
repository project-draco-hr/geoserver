{
  Date timestamp=new Date();
  try {
    RecordDescriptor rd=getRecordDescriptor(request);
    QueryType cswQuery=(QueryType)request.getQuery();
    List<Query> queries=toGtQueries(rd,cswQuery);
    int maxRecords;
    if (request.getMaxRecords() == null) {
      maxRecords=10;
    }
 else {
      maxRecords=request.getMaxRecords();
    }
    int offset=request.getStartPosition() == null ? 0 : request.getStartPosition() - 1;
    if (offset < 0) {
      throw new ServiceException("startPosition must be a positive number",ServiceException.INVALID_PARAMETER_VALUE,"startPosition");
    }
    ResultType resultType=request.getResultType();
    if (maxRecords == 0 && resultType == ResultType.RESULTS) {
      resultType=ResultType.HITS;
    }
    int numberOfRecordsMatched=0;
    int[] counts=new int[queries.size()];
    for (int i=0; i < queries.size(); i++) {
      counts[i]=store.getRecordsCount(queries.get(i),Transaction.AUTO_COMMIT);
      numberOfRecordsMatched+=counts[i];
    }
    ElementSetType elementSet=getElementSet(cswQuery);
    int numberOfRecordsReturned=0;
    int nextRecord=0;
    FeatureCollection records=null;
    if (resultType != ResultType.VALIDATE) {
      if (numberOfRecordsMatched - offset <= maxRecords) {
        numberOfRecordsReturned=numberOfRecordsMatched - offset;
        nextRecord=0;
      }
 else {
        numberOfRecordsReturned=maxRecords;
        nextRecord=offset + numberOfRecordsReturned + 1;
      }
      if (resultType == ResultType.RESULTS) {
        if (resultType != ResultType.HITS) {
          List<FeatureCollection> results=new ArrayList<FeatureCollection>();
          for (int i=0; i < queries.size() && maxRecords > 0; i++) {
            Query q=queries.get(i);
            if (offset > 0) {
              if (offset > counts[i]) {
                offset-=counts[i];
                continue;
              }
 else {
                q.setStartIndex(offset);
                offset=0;
              }
            }
            if (maxRecords > 0) {
              q.setMaxFeatures(maxRecords);
              maxRecords-=counts[i];
            }
 else {
              continue;
            }
            results.add(store.getRecords(q,Transaction.AUTO_COMMIT));
          }
          if (results.size() == 1) {
            records=results.get(0);
          }
 else           if (results.size() > 1) {
            records=new CompositeFeatureCollection(results);
          }
        }
      }
    }
    if (resultType == ResultType.HITS) {
      numberOfRecordsReturned=0;
    }
    CSWRecordsResult result=new CSWRecordsResult(elementSet,request.getOutputSchema(),numberOfRecordsMatched,numberOfRecordsReturned,nextRecord,timestamp,records);
    return result;
  }
 catch (  IOException e) {
    throw new ServiceException("Request failed due to: " + e.getMessage(),e);
  }
}
