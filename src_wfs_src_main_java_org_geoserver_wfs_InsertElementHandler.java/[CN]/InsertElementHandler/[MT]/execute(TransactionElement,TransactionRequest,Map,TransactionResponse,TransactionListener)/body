{
  Insert insert=(Insert)element;
  LOGGER.finer("Transasction Insert:" + insert);
  long inserted=response.getTotalInserted().longValue();
  try {
    HashMap schema2features=new HashMap();
    List featureList=insert.getFeatures();
    for (Iterator f=featureList.iterator(); f.hasNext(); ) {
      SimpleFeature feature=(SimpleFeature)f.next();
      SimpleFeatureType schema=feature.getFeatureType();
      SimpleFeatureCollection collection;
      collection=(SimpleFeatureCollection)schema2features.get(schema);
      if (collection == null) {
        collection=new DefaultFeatureCollection(null,schema);
        schema2features.put(schema,collection);
      }
      if (insert.isIdGenUseExisting()) {
        feature.getUserData().put(Hints.USE_PROVIDED_FID,true);
      }
      collection.add(feature);
    }
    Map<String,List<FeatureId>> schema2fids=new HashMap<String,List<FeatureId>>();
    for (Iterator c=schema2features.values().iterator(); c.hasNext(); ) {
      SimpleFeatureCollection collection=(SimpleFeatureCollection)c.next();
      SimpleFeatureType schema=collection.getSchema();
      final QName elementName=new QName(schema.getName().getNamespaceURI(),schema.getTypeName());
      SimpleFeatureStore store;
      store=DataUtilities.simple((FeatureStore)featureStores.get(elementName));
      if (store == null) {
        throw new WFSException(request,"Could not locate FeatureStore for '" + elementName + "'");
      }
      if (collection != null) {
        if (getInfo().isCiteCompliant()) {
          checkFeatureCoordinatesRange(collection);
        }
        final GeometryDescriptor defaultGeometry=store.getSchema().getGeometryDescriptor();
        if (defaultGeometry != null) {
          CoordinateReferenceSystem target=defaultGeometry.getCoordinateReferenceSystem();
          if (target != null) {
            collection=new ReprojectingFeatureCollection(collection,target);
          }
        }
        LOGGER.finer("Use featureValidation to check contents of insert");
        List<FeatureId> fids=schema2fids.get(schema.getTypeName());
        if (fids == null) {
          fids=new LinkedList<FeatureId>();
          schema2fids.put(schema.getTypeName(),fids);
        }
        TransactionEvent event=new TransactionEvent(TransactionEventType.PRE_INSERT,request,elementName,collection);
        event.setSource(Insert.WFS11.unadapt(insert));
        listener.dataStoreChange(event);
        fids.addAll(store.addFeatures(collection));
        SimpleFeatureCollection features=store.getFeatures(filterFactory.id(new HashSet<FeatureId>(fids)));
        event=new TransactionEvent(TransactionEventType.POST_INSERT,request,elementName,features,Insert.WFS11.unadapt(insert));
        listener.dataStoreChange(event);
      }
    }
    for (Iterator f=featureList.iterator(); f.hasNext(); ) {
      SimpleFeature feature=(SimpleFeature)f.next();
      SimpleFeatureType schema=feature.getFeatureType();
      LinkedList<FeatureId> fids=(LinkedList<FeatureId>)schema2fids.get(schema.getTypeName());
      FeatureId fid=fids.removeFirst();
      response.addInsertedFeature(insert.getHandle(),fid);
    }
    inserted+=featureList.size();
  }
 catch (  Exception e) {
    String msg="Error performing insert: " + e.getMessage();
    throw new WFSTransactionException(msg,e,insert.getHandle());
  }
  response.setTotalInserted(BigInteger.valueOf(inserted));
}
