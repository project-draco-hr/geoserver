{
  Importer importer=getImporter();
  LOGGER.fine(" - [Remote Process Client - importLayer] Importer Context from Spatial File:" + file.getAbsolutePath());
  ImportContext context=(store != null ? importer.createContext(new SpatialFile(file),store) : importer.createContext(new SpatialFile(file)));
  if (context.getTasks() != null && context.getTasks().size() > 0) {
    ImportTask task=context.getTasks().get(0);
    if (targetWorkspace != null) {
      LOGGER.fine(" - [Remote Process Client - importLayer] Looking for Workspace in the catalog:" + targetWorkspace);
      WorkspaceInfo ws=importer.getCatalog().getWorkspaceByName(targetWorkspace);
      if (ws != null) {
        LOGGER.fine(" - [Remote Process Client - importLayer] Workspace found:" + ws);
        context.setTargetWorkspace(ws);
      }
 else {
        LOGGER.fine(" - [Remote Process Client - importLayer] Workspace *NOT* found - using the Default one:" + importer.getCatalog().getDefaultWorkspace());
        context.setTargetWorkspace(importer.getCatalog().getDefaultWorkspace());
      }
    }
    if (defaultStyle != null) {
      StyleInfo style=importer.getCatalog().getStyleByName(defaultStyle);
      if (style == null && targetWorkspace != null) {
        style=importer.getCatalog().getStyleByName(targetWorkspace,defaultStyle);
      }
      if (style != null) {
        task.getLayer().setDefaultStyle(style);
      }
    }
    if (name != null)     task.getLayer().setName(name);
    if (title != null)     task.getLayer().setTitle(title);
    if (description != null)     task.getLayer().setAbstract(description);
    if (metadata != null)     task.getLayer().getMetadata().put("owc_properties",metadata);
    importer.run(context);
    if (context.getState() == ImportContext.State.COMPLETE) {
      if (context.getTasks() != null && context.getTasks().size() > 0) {
        task=context.getTasks().get(0);
        if (task.getLayer().getResource() instanceof CoverageInfo) {
          CoverageInfo ci=((CoverageInfo)task.getLayer().getResource());
          GridCoverageReader reader=null;
          try {
            reader=ci.getGridCoverageReader(null,null);
            String[] cvNames=reader.getGridCoverageNames();
            if (cvNames != null && cvNames.length > 0) {
              final String nativeCoverageName=cvNames[0];
              ci.setNativeCoverageName(nativeCoverageName);
              if (reader instanceof StructuredGridCoverage2DReader) {
                StructuredGridCoverage2DReader structuredReader=((StructuredGridCoverage2DReader)reader);
                final List<DimensionDescriptor> dimensionDescriptors=structuredReader.getDimensionDescriptors(nativeCoverageName);
                DimensionDescriptor timeDimension=null;
                DimensionDescriptor elevationDimension=null;
                final List<DimensionDescriptor> customDimensions=new ArrayList<DimensionDescriptor>();
                for (                DimensionDescriptor dimensionDescriptor : dimensionDescriptors) {
                  if (dimensionDescriptor.getName().equalsIgnoreCase(ResourceInfo.TIME)) {
                    timeDimension=dimensionDescriptor;
                  }
 else                   if (dimensionDescriptor.getName().equalsIgnoreCase(ResourceInfo.ELEVATION)) {
                    elevationDimension=dimensionDescriptor;
                  }
 else {
                    customDimensions.add(dimensionDescriptor);
                  }
                }
                final boolean defaultTimeNeeded=timeDimension != null;
                final boolean defaultElevationNeeded=elevationDimension != null;
                if (defaultTimeNeeded) {
                  DimensionInfo di=new DimensionInfoImpl();
                  di.setEnabled(true);
                  di.setPresentation(DimensionPresentation.LIST);
                  di.setAttribute(timeDimension.getStartAttribute());
                  ci.getMetadata().put(ResourceInfo.TIME,di);
                }
                if (defaultElevationNeeded) {
                  DimensionInfo di=new DimensionInfoImpl();
                  di.setEnabled(true);
                  di.setPresentation(DimensionPresentation.LIST);
                  di.setUnits("EPSG:5030");
                  di.setUnitSymbol("m");
                  di.setAttribute(elevationDimension.getStartAttribute());
                  ci.getMetadata().put(ResourceInfo.ELEVATION,di);
                }
              }
            }
          }
  finally {
          }
        }
        LOGGER.fine(" - [Remote Process Client - importLayer] The Importer has finished correctly for Spatial File:" + file.getAbsolutePath());
        return task.getLayer();
      }
    }
  }
  LOGGER.fine(" - [Remote Process Client - importLayer] The Importer has finished *BUT* did not returned any layer for Spatial File:" + file.getAbsolutePath());
  return null;
}
