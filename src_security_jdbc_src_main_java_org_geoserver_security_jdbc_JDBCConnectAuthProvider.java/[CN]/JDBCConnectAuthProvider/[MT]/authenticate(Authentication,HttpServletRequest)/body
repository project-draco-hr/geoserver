{
  UsernamePasswordAuthenticationToken token=(UsernamePasswordAuthenticationToken)authentication;
  if (token.getPrincipal() == null || token.getPrincipal().toString().isEmpty())   return null;
  String user=token.getPrincipal().toString();
  String password=token.getCredentials() == null ? "" : token.getCredentials().toString();
  UserDetails details=null;
  if (userGroupServiceName != null) {
    try {
      GeoServerUserGroupService service=getSecurityManager().loadUserGroupService(userGroupServiceName);
      details=service.loadUserByUsername(user);
      if (details.isEnabled() == false)       return null;
    }
 catch (    IOException ex) {
      throw new AuthenticationServiceException(ex.getLocalizedMessage(),ex);
    }
  }
  Connection con=null;
  try {
    con=DriverManager.getConnection(connectUrl,user,password);
  }
 catch (  SQLException ex) {
    throw new BadCredentialsException(user);
  }
 finally {
    if (con != null) {
      try {
        con.close();
      }
 catch (      SQLException ex2) {
      }
    }
  }
  UsernamePasswordAuthenticationToken result=null;
  Set<GrantedAuthority> roles=new HashSet<GrantedAuthority>();
  if (details != null) {
    roles.addAll(details.getAuthorities());
  }
 else {
    RoleCalculator calc=new RoleCalculator(getSecurityManager().getActiveRoleService());
    try {
      roles.addAll(calc.calculateRoles(new GeoServerUser(user)));
    }
 catch (    IOException e) {
      throw new AuthenticationServiceException(e.getLocalizedMessage(),e);
    }
  }
  roles.add(GeoServerRole.AUTHENTICATED_ROLE);
  result=new UsernamePasswordAuthenticationToken(authentication.getPrincipal(),null,roles);
  result.setDetails(authentication.getDetails());
  return result;
}
