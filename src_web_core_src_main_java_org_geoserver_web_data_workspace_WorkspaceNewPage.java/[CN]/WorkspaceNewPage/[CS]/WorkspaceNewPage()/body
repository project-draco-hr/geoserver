{
  WorkspaceInfo ws=getCatalog().getFactory().createWorkspace();
  form=new Form<WorkspaceInfo>("form",new CompoundPropertyModel<WorkspaceInfo>(ws)){
    private static final long serialVersionUID=6088042051374665053L;
    @Override protected void onSubmit(){
      Catalog catalog=getCatalog();
      WorkspaceInfo ws=(WorkspaceInfo)form.getModelObject();
      NamespaceInfo ns=catalog.getFactory().createNamespace();
      ns.setPrefix(ws.getName());
      ns.setURI(nsUriTextField.getDefaultModelObjectAsString());
      catalog.add(ws);
      catalog.add(ns);
      if (defaultWs)       catalog.setDefaultWorkspace(ws);
      doReturn(WorkspacePage.class);
    }
  }
;
  add(form);
  TextField<String> nameTextField=new TextField<String>("name");
  nameTextField.setRequired(true);
  nameTextField.add(new XMLNameValidator());
  nameTextField.add(new StringValidator(){
    private static final long serialVersionUID=-5475431734680134780L;
    @Override public void validate(    IValidatable<String> validatable){
      if (CatalogImpl.DEFAULT.equals(validatable.getValue())) {
        validatable.error(new ValidationError("defaultWsError").addKey("defaultWsError"));
      }
    }
  }
);
  form.add(nameTextField.setRequired(true));
  nsUriTextField=new TextField<String>("uri",new Model<String>());
  nsUriTextField.setRequired(true);
  nsUriTextField.add(new URIValidator());
  form.add(nsUriTextField);
  CheckBox defaultChk=new CheckBox("default",new PropertyModel<Boolean>(this,"defaultWs"));
  form.add(defaultChk);
  SubmitLink submitLink=new SubmitLink("submit",form);
  form.add(submitLink);
  form.setDefaultButton(submitLink);
  AjaxLink<Void> cancelLink=new AjaxLink<Void>("cancel"){
    private static final long serialVersionUID=-1731475076965108576L;
    @Override public void onClick(    AjaxRequestTarget target){
      doReturn(WorkspacePage.class);
    }
  }
;
  form.add(cancelLink);
}
