{
  final ScaleToSizeType scaleType=scaling.getScaleToSize();
  final EList<TargetAxisSizeType> targetAxisSizeElements=scaleType.getTargetAxisSize();
  TargetAxisSizeType xSize=null, ySize=null;
  for (  TargetAxisSizeType axisSizeType : targetAxisSizeElements) {
    final String axisName=axisSizeType.getAxis();
    if (axisName.equals("http://www.opengis.net/def/axis/OGC/1/i")) {
      xSize=axisSizeType;
    }
 else     if (axisName.equals("http://www.opengis.net/def/axis/OGC/1/j")) {
      ySize=axisSizeType;
    }
 else {
      throw new WCS20Exception("Scale Axis Undefined",WCS20Exception.WCS20ExceptionCode.ScaleAxisUndefined,axisName);
    }
  }
  final int sizeX=(int)xSize.getTargetSize();
  if (sizeX <= 0) {
    throw new WCS20Exception("Invalid target size",WCS20Exception.WCS20ExceptionCode.InvalidScaleFactor,Integer.toString(sizeX));
  }
  final int sizeY=(int)ySize.getTargetSize();
  if (sizeY <= 0) {
    throw new WCS20Exception("Invalid target size",WCS20Exception.WCS20ExceptionCode.InvalidScaleFactor,Integer.toString(sizeY));
  }
  final GridEnvelope2D sourceGE=sourceGC.getGridGeometry().getGridRange2D();
  if (sizeY == sourceGE.width && sizeX == sourceGE.height) {
    return sourceGC;
  }
  final Warp warp=new WarpAffine(AffineTransform.getScaleInstance(sourceGE.width / sizeX,sourceGE.height / sizeY));
  final ImageLayout2 layout=new ImageLayout2(sourceGE.x,sourceGE.y,sizeX,sizeY);
  final Hints hints=new Hints(JAI.KEY_IMAGE_LAYOUT,layout);
  final Operation operation=CoverageProcessor.getInstance().getOperation("Warp");
  final ParameterValueGroup parameters=operation.getParameters();
  parameters.parameter("Source").setValue(sourceGC);
  parameters.parameter("warp").setValue(warp);
  parameters.parameter("interpolation").setValue(Interpolation.getInstance(Interpolation.INTERP_NEAREST));
  parameters.parameter("backgroundValues").setValue(CoverageUtilities.getBackgroundValues(sourceGC));
  return (GridCoverage2D)CoverageProcessor.getInstance().doOperation(parameters,hints);
}
