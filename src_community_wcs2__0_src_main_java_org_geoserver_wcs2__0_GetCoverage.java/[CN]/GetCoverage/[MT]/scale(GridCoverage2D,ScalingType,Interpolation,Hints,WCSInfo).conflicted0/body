{
  final ScaleToSizeType scaleType=scaling.getScaleToSize();
  final EList<TargetAxisSizeType> targetAxisSizeElements=scaleType.getTargetAxisSize();
  TargetAxisSizeType xSize=null, ySize=null;
  for (  TargetAxisSizeType axisSizeType : targetAxisSizeElements) {
    final String axisName=axisSizeType.getAxis();
    if (axisName.equals("http://www.opengis.net/def/axis/OGC/1/i")) {
      xSize=axisSizeType;
    }
 else     if (axisName.equals("http://www.opengis.net/def/axis/OGC/1/j")) {
      ySize=axisSizeType;
    }
 else {
      throw new WCS20Exception("Scale Axis Undefined",WCS20Exception.WCS20ExceptionCode.ScaleAxisUndefined,axisName);
    }
  }
  final int sizeX=(int)xSize.getTargetSize();
  if (sizeX <= 0) {
    throw new WCS20Exception("Invalid target size",WCS20Exception.WCS20ExceptionCode.InvalidExtent,Integer.toString(sizeX));
  }
  final int sizeY=(int)ySize.getTargetSize();
  if (sizeY <= 0) {
    throw new WCS20Exception("Invalid target size",WCS20Exception.WCS20ExceptionCode.InvalidExtent,Integer.toString(sizeY));
  }
  final GridEnvelope2D sourceGE=sourceGC.getGridGeometry().getGridRange2D();
  if (sizeY == sourceGE.width && sizeX == sourceGE.height) {
    if (interpolation instanceof InterpolationNearest) {
      return sourceGC;
    }
 else {
      final Operation operation=CoverageProcessor.getInstance().getOperation("Warp");
      final ParameterValueGroup parameters=operation.getParameters();
      parameters.parameter("Source").setValue(sourceGC);
      parameters.parameter("warp").setValue(new WarpAffine(AffineTransform.getScaleInstance(1,1)));
      parameters.parameter("interpolation").setValue(interpolation);
      parameters.parameter("backgroundValues").setValue(CoverageUtilities.getBackgroundValues(sourceGC));
      return (GridCoverage2D)CoverageProcessor.getInstance().doOperation(parameters,hints);
    }
  }
  WCSUtils.checkOutputLimits(wcsinfo,new GridEnvelope2D(0,0,sizeX,sizeY),sourceGC.getRenderedImage().getSampleModel());
  final double scaleX=1.0 * sizeX / sourceGE.width;
  final double scaleY=1.0 * sizeY / sourceGE.height;
  final RenderedImage sourceImage=sourceGC.getRenderedImage();
  final int sourceMinX=sourceImage.getMinX();
  final int sourceMinY=sourceImage.getMinY();
  final AffineTransform affineTransform=new AffineTransform(scaleX,0,0,scaleY,sourceMinX - scaleX * sourceMinX,sourceMinY - scaleY * sourceMinY);
  Warp warp;
  try {
    warp=new WarpAffine(affineTransform.createInverse());
  }
 catch (  NoninvertibleTransformException e) {
    throw new RuntimeException(e);
  }
  final ImageLayout2 layout=new ImageLayout2(sourceMinX,sourceMinY,sizeX,sizeY);
  hints.add(new Hints(JAI.KEY_IMAGE_LAYOUT,layout));
  final Operation operation=CoverageProcessor.getInstance().getOperation("Warp");
  final ParameterValueGroup parameters=operation.getParameters();
  parameters.parameter("Source").setValue(sourceGC);
  parameters.parameter("warp").setValue(warp);
  parameters.parameter("interpolation").setValue(interpolation != null ? interpolation : InterpolationPolicy.getDefaultPolicy().getInterpolation());
  parameters.parameter("backgroundValues").setValue(CoverageUtilities.getBackgroundValues(sourceGC));
  GridCoverage2D gc=(GridCoverage2D)CoverageProcessor.getInstance().doOperation(parameters,hints);
  return gc;
}
