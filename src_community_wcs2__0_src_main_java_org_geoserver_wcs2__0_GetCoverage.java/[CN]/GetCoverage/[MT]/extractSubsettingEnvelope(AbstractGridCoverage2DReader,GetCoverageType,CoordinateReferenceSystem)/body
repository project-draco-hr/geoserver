{
  final CoordinateReferenceSystem sourceCRS=reader.getCrs();
  GeneralEnvelope sourceEnvelopeInSubsettingCRS=new GeneralEnvelope(reader.getOriginalEnvelope());
  sourceEnvelopeInSubsettingCRS.setCoordinateReferenceSystem(sourceCRS);
  if (!(subsettingCRS == null || CRS.equalsIgnoreMetadata(subsettingCRS,sourceCRS))) {
    try {
      sourceEnvelopeInSubsettingCRS=CRS.transform(CRS.findMathTransform(reader.getCrs(),subsettingCRS),reader.getOriginalEnvelope());
      sourceEnvelopeInSubsettingCRS.setCoordinateReferenceSystem(subsettingCRS);
    }
 catch (    Exception e) {
      final WCS20Exception exception=new WCS20Exception("Unable to initialize subsetting envelope",WCS20Exception.WCS20ExceptionCode.SubsettingCrsNotSupported,subsettingCRS.toWKT());
      exception.initCause(e);
      throw exception;
    }
  }
  final EList<DimensionSubsetType> dimensions=request.getDimensionSubset();
  if (dimensions == null || dimensions.size() <= 0) {
    return sourceEnvelopeInSubsettingCRS;
  }
  if (dimensions.size() > 2) {
    throw new WCS20Exception("Invalid number of dimensions",WCS20Exception.WCS20ExceptionCode.InvalidSubsetting,Integer.toString(dimensions.size()));
  }
  final List<String> axesNames=envelopeDimensionsMapper.getAxesNames(sourceEnvelopeInSubsettingCRS,true);
  final List<String> foundDimensions=new ArrayList<String>();
  GeneralEnvelope subsettingEnvelope=new GeneralEnvelope(sourceEnvelopeInSubsettingCRS);
  subsettingEnvelope.setCoordinateReferenceSystem(subsettingCRS);
  for (  DimensionSubsetType dim : dimensions) {
    String dimension=dim.getDimension();
    if (dimension.startsWith("http://www.opengis.net/def/axis/OGC/0/")) {
      dimension=dimension.substring("http://www.opengis.net/def/axis/OGC/0/".length());
    }
 else     if (dimension.startsWith("http://opengis.net/def/axis/OGC/0/")) {
      dimension=dimension.substring("http://opengis.net/def/axis/OGC/0/".length());
    }
    if (dimension == null || dimension.length() <= 0 || !axesNames.contains(dimension)) {
      throw new WCS20Exception("Empty or wrong axis label provided",WCS20Exception.WCS20ExceptionCode.InvalidAxisLabel,dimension == null ? "Null" : dimension);
    }
    if (foundDimensions.contains(dimension)) {
      throw new WCS20Exception("Axis label already used during subsetting",WCS20Exception.WCS20ExceptionCode.InvalidAxisLabel,dimension);
    }
    foundDimensions.add(dimension);
    final String CRS=dim.getCRS();
    if (dim instanceof DimensionTrimType) {
      final DimensionTrimType trim=(DimensionTrimType)dim;
      final double low=Double.parseDouble(trim.getTrimLow());
      final double high=Double.parseDouble(trim.getTrimHigh());
      if (low > high) {
        throw new WCS20Exception("Low greater than High",WCS20Exception.WCS20ExceptionCode.InvalidSubsetting,trim.getTrimLow());
      }
      final int axisIndex=envelopeDimensionsMapper.getAxisIndex(sourceEnvelopeInSubsettingCRS,dimension);
      if (axisIndex < 0) {
        throw new WCS20Exception("Invalid axis provided",WCS20Exception.WCS20ExceptionCode.InvalidAxisLabel,dimension);
      }
      subsettingEnvelope.setRange(axisIndex,low,high);
    }
 else     if (dim instanceof DimensionSliceType) {
      final DimensionSliceType slicing=(DimensionSliceType)dim;
      final String slicePointS=slicing.getSlicePoint();
      final double slicePoint=Double.parseDouble(slicePointS);
      final int axisIndex=envelopeDimensionsMapper.getAxisIndex(sourceEnvelopeInSubsettingCRS,dimension);
      if (axisIndex < 0) {
        throw new WCS20Exception("Invalid axis provided",WCS20Exception.WCS20ExceptionCode.InvalidAxisLabel,dimension);
      }
      AffineTransform affineTransform=RequestUtils.getAffineTransform(reader.getOriginalGridToWorld(PixelInCell.CELL_CENTER));
      final double scale=axisIndex == 0 ? affineTransform.getScaleX() : -affineTransform.getScaleY();
      subsettingEnvelope.setRange(axisIndex,slicePoint,slicePoint + scale);
      if (sourceEnvelopeInSubsettingCRS.getMinimum(axisIndex) > slicePoint || slicePoint > sourceEnvelopeInSubsettingCRS.getMaximum(axisIndex)) {
        throw new WCS20Exception("SlicePoint outside coverage envelope",WCS20Exception.WCS20ExceptionCode.InvalidSubsetting,slicePointS);
      }
    }
 else {
      throw new WCS20Exception("Invalid element found while attempting to parse dimension subsetting request",WCS20Exception.WCS20ExceptionCode.InvalidSubsetting,dim.getClass().toString());
    }
  }
  GeneralEnvelope sourceEnvelope=reader.getOriginalEnvelope();
  try {
    if (!CRS.equalsIgnoreMetadata(subsettingEnvelope.getCoordinateReferenceSystem(),reader.getOriginalEnvelope())) {
      final MathTransform mathTransform=CRS.findMathTransform(subsettingCRS,sourceCRS);
      if (!mathTransform.isIdentity()) {
        final GeneralEnvelope subsettingEnvelopeInSourceCRS=CRS.transform(mathTransform,subsettingEnvelope);
        subsettingEnvelopeInSourceCRS.setCoordinateReferenceSystem(sourceCRS);
        subsettingEnvelopeInSourceCRS.intersect(sourceEnvelope);
        subsettingEnvelopeInSourceCRS.setCoordinateReferenceSystem(sourceCRS);
        if (subsettingEnvelopeInSourceCRS.isEmpty()) {
          throw new WCS20Exception("Empty intersection after subsetting",WCS20Exception.WCS20ExceptionCode.InvalidSubsetting,"");
        }
        return subsettingEnvelopeInSourceCRS;
      }
    }
    subsettingEnvelope.intersect(sourceEnvelope);
    subsettingEnvelope.setCoordinateReferenceSystem(reader.getCrs());
    if (subsettingEnvelope.isEmpty()) {
      throw new WCS20Exception("Empty intersection after subsetting",WCS20Exception.WCS20ExceptionCode.InvalidSubsetting,"");
    }
    return subsettingEnvelope;
  }
 catch (  FactoryException e) {
    final WCS20Exception exception=new WCS20Exception("Unable to initialize subsetting envelope",WCS20Exception.WCS20ExceptionCode.SubsettingCrsNotSupported,subsettingCRS.toWKT());
    exception.initCause(e);
    throw exception;
  }
catch (  TransformException e) {
    final WCS20Exception exception=new WCS20Exception("Unable to initialize subsetting envelope",WCS20Exception.WCS20ExceptionCode.SubsettingCrsNotSupported,subsettingCRS.toWKT());
    exception.initCause(e);
    throw exception;
  }
}
