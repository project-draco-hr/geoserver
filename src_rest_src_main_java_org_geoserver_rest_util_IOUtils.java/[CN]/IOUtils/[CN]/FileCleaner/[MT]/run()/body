{
  while (true) {
    try {
synchronized (FILES_PATH) {
synchronized (FILE_ATTEMPTS_COUNTS) {
          final Iterator<String> it=FILES_PATH.iterator();
          while (it.hasNext()) {
            final String sFile=it.next();
            if (LOGGER.isLoggable(Level.INFO))             LOGGER.info("Trying to remove file " + sFile);
            int attempts=FILE_ATTEMPTS_COUNTS.get(sFile).intValue();
            if (!new File(sFile).exists()) {
              it.remove();
              FILE_ATTEMPTS_COUNTS.remove(sFile);
            }
 else {
              if (new File(sFile).delete()) {
                if (LOGGER.isLoggable(Level.INFO))                 LOGGER.info("Successfully removed file " + sFile);
                it.remove();
                FILE_ATTEMPTS_COUNTS.remove(sFile);
              }
 else {
                if (LOGGER.isLoggable(Level.INFO))                 LOGGER.info("Unable to  remove file " + sFile);
                attempts++;
                if (maxAttempts < attempts) {
                  if (LOGGER.isLoggable(Level.INFO))                   LOGGER.info("Dropping file " + sFile);
                  it.remove();
                  FILE_ATTEMPTS_COUNTS.remove(sFile);
                  if (LOGGER.isLoggable(Level.WARNING))                   LOGGER.warning("Unable to delete file " + sFile);
                }
 else {
                  FILE_ATTEMPTS_COUNTS.remove(sFile);
                  FILE_ATTEMPTS_COUNTS.put(sFile,new Integer(attempts));
                  Runtime.getRuntime().gc();
                  Runtime.getRuntime().gc();
                  Runtime.getRuntime().gc();
                  Runtime.getRuntime().gc();
                  Runtime.getRuntime().gc();
                  Runtime.getRuntime().gc();
                  System.runFinalization();
                  System.runFinalization();
                  System.runFinalization();
                  System.runFinalization();
                  System.runFinalization();
                  System.runFinalization();
                }
              }
            }
          }
        }
      }
      Thread.sleep(period * 1000);
    }
 catch (    Throwable t) {
      if (LOGGER.isLoggable(Level.INFO))       LOGGER.log(Level.INFO,t.getLocalizedMessage(),t);
    }
  }
}
