{
  Query query=new Query(Query.ALL);
  String geomName=geometryAttribute.getLocalName();
  Filter filter=ff.bbox(ff.property(geomName),mapArea);
  LiteFeatureTypeStyle[] styles=styleList.toArray(new LiteFeatureTypeStyle[styleList.size()]);
  try {
    query=new Query(schema.getName().getLocalPart());
    query.setFilter(filter);
    processRuleForQuery(styles,query);
  }
 catch (  Exception e) {
    throw Throwables.propagate(e);
  }
  Hints hints=new Hints();
  CoordinateReferenceSystem crs=featCrs;
  if (crs != null) {
    Set<RenderingHints.Key> fsHints=source.getSupportedHints();
    SingleCRS crs2D=crs == null ? null : CRS.getHorizontalCRS(crs);
    MathTransform mt=buildFullTransform(crs2D,mapCRS,worldToScreenTransform);
    double[] spans;
    try {
      spans=Decimator.computeGeneralizationDistances(mt.inverse(),screenSize,generalizationDistance);
    }
 catch (    TransformException e) {
      throw Throwables.propagate(e);
    }
    double distance=spans[0] < spans[1] ? spans[0] : spans[1];
    for (    LiteFeatureTypeStyle fts : styles) {
      if (fts.screenMap != null) {
        fts.screenMap.setTransform(mt);
        fts.screenMap.setSpans(spans[0],spans[1]);
        if (fsHints.contains(Hints.SCREENMAP)) {
          hints.put(Hints.SCREENMAP,fts.screenMap);
          fts.screenMap=null;
        }
      }
    }
  }
  if (query.getHints() == null) {
    query.setHints(hints);
  }
 else {
    query.getHints().putAll(hints);
  }
  SimplifyingFilterVisitor simplifier=new SimplifyingFilterVisitor();
  simplifier.setFeatureType(source.getSchema());
  Filter simplifiedFilter=(Filter)query.getFilter().accept(simplifier,null);
  query.setFilter(simplifiedFilter);
  return query;
}
