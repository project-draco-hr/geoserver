{
  Event e=message.getMessageObject();
  if (!isStarted()) {
    if (LOGGER.isLoggable(Level.FINER)) {
      LOGGER.finer(format("Ignoring message: %s. Service is not started.",e));
    }
    return;
  }
  Metrics.newCounter(getClass(),"recieved").inc();
  if (localAddress(cluster.getHz()).equals(e.getSource())) {
    if (LOGGER.isLoggable(Level.FINER)) {
      LOGGER.finer(format("%s - Skipping message generated locally: %s",nodeId(),e));
    }
    return;
  }
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.fine(format("%s - Received event %s",nodeId(),e));
  }
  queue.add(message.getMessageObject());
  final int syncDelay=configWatcher.get().getSyncDelay();
  executor.schedule(new Runnable(){
    @Override public void run(){
      if (queue.isEmpty()) {
        return;
      }
      try {
        processEventQueue(queue);
      }
 catch (      Exception e) {
        LOGGER.log(Level.WARNING,format("%s - Event processing failed",nodeId()),e);
      }
      Metrics.newCounter(getClass(),"reloads").inc();
    }
  }
,syncDelay,TimeUnit.SECONDS);
}
