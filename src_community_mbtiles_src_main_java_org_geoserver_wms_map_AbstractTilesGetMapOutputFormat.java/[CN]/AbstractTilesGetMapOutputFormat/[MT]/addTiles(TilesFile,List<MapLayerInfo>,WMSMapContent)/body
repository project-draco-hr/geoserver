{
  if (mapLayers.isEmpty()) {
    return;
  }
  String tileEntryName=null;
  Map formatOpts=map.getRequest().getFormatOptions();
  if (formatOpts.containsKey("tileset_name")) {
    tileEntryName=(String)formatOpts.get("tileset_name");
  }
  if (tileEntryName == null) {
    tileEntryName=map.getTitle();
  }
  if (tileEntryName == null) {
    Iterator<MapLayerInfo> it=mapLayers.iterator();
    tileEntryName="";
    while (it.hasNext()) {
      tileEntryName+=it.next().getLayerInfo().getName() + "_";
    }
    tileEntryName=tileEntryName.substring(0,tileEntryName.length() - 1);
  }
  BoundingBox bbox=bbox(map);
  GridSubset gridSubset=findBestGridSubset(map);
  int[] minmax=findMinMaxZoom(gridSubset,map);
  ReferencedEnvelope bounds=new ReferencedEnvelope(findTileBounds(gridSubset,bbox,minmax[0]),getCoordinateReferenceSystem(map));
  GetMapRequest req=new GetMapRequest();
  OwsUtils.copy(map.getRequest(),req,GetMapRequest.class);
  req.setLayers(mapLayers);
  String imageFormat=formatOpts.containsKey("format") ? parseFormatFromOpts(formatOpts) : findBestFormat(map);
  req.setFormat(imageFormat);
  req.setWidth(gridSubset.getTileWidth());
  req.setHeight(gridSubset.getTileHeight());
  tiles.setMetadata(tileEntryName,bounds,imageFormat,srid(map),mapLayers,minmax,gridSubset);
  int ntiles=0;
  boolean flipy=Boolean.valueOf((String)formatOpts.get("flipy"));
  for (int z=minmax[0]; z < minmax[1]; z++) {
    long[] intersect=gridSubset.getCoverageIntersection(z,bbox);
    for (long x=intersect[0]; x <= intersect[2]; x++) {
      for (long y=intersect[1]; y <= intersect[3]; y++) {
        BoundingBox box=gridSubset.boundsFromIndex(new long[]{x,y,z});
        req.setBbox(new Envelope(box.getMinX(),box.getMaxX(),box.getMinY(),box.getMaxY()));
        WebMap result=webMapService.getMap(req);
        tiles.addTile(z,(int)x,(int)(flipy ? gridSubset.getNumTilesHigh(z) - (y + 1) : y),toBytes(result));
        if (ntiles++ == TILE_CLEANUP_INTERVAL) {
          cleanUpImages();
          ntiles=0;
        }
      }
    }
  }
}
