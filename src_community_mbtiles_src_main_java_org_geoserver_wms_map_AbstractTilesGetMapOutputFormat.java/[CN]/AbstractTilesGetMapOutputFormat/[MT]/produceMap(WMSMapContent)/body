{
  GetMapRequest req=map.getRequest();
  List<Layer> layers=map.layers();
  List<MapLayerInfo> mapLayers=req.getLayers();
  Preconditions.checkState(layers.size() == mapLayers.size(),"Number of map layers not same as number of rendered layers");
  List<MapLayerInfo> tileLayers=new ArrayList<MapLayerInfo>();
  tileLayers.addAll(mapLayers);
  TilesFile tiles=createTilesFile();
  addTiles(tiles,tileLayers,map);
  tiles.close();
  final File dbFile=tiles.getFile();
  final BufferedInputStream bin=new BufferedInputStream(new FileInputStream(dbFile));
  RawMap result=new RawMap(map,bin,getMimeType()){
    @Override public void writeTo(    OutputStream out) throws IOException {
      String dbFilename=getAttachmentFileName();
      if (dbFilename != null) {
        dbFilename=dbFilename.substring(0,dbFilename.length() - 4) + extension;
      }
 else {
        dbFilename="tiles" + extension;
      }
      IOUtils.copy(bin,out);
      out.flush();
      bin.close();
      try {
        dbFile.delete();
      }
 catch (      Exception e) {
        LOGGER.log(Level.WARNING,"Error deleting file: " + dbFile.getAbsolutePath(),e);
      }
    }
  }
;
  result.setContentDispositionHeader(map,extension,true);
  return result;
}
