{
  TextField connectionTimeout=new TextField("connectionTimeout",Integer.class);
  connectionTimeout.add(new MinimumValidator<Integer>(-1));
  form.add(connectionTimeout);
  TextField maxSynchProcesses=new TextField("maxSynchronousProcesses",Integer.class);
  maxSynchProcesses.add(new MinimumValidator<Integer>(1));
  form.add(maxSynchProcesses);
  TextField maxAsynchProcesses=new TextField("maxAsynchronousProcesses",Integer.class);
  maxAsynchProcesses.add(new MinimumValidator<Integer>(1));
  form.add(maxAsynchProcesses);
  TextField resourceExpirationTimeout=new TextField("resourceExpirationTimeout",Integer.class);
  resourceExpirationTimeout.add(new MinimumValidator<Integer>(1));
  form.add(resourceExpirationTimeout);
  WPSInfo wpsInfo=(WPSInfo)info.getObject();
  processFactories=cloneFactoryInfos(wpsInfo.getProcessGroups());
  ProcessFactoryInfoProvider provider=new ProcessFactoryInfoProvider(processFactories,getLocale());
  GeoServerTablePanel<ProcessGroupInfo> processFilterEditor=new GeoServerTablePanel<ProcessGroupInfo>("processFilterTable",provider){
    @Override protected Component getComponentForProperty(    String id,    final IModel itemModel,    Property<ProcessGroupInfo> property){
      if (property.getName().equals("enabled")) {
        Fragment fragment=new Fragment(id,"enabledFragment",WPSAdminPage.this);
        CheckBox enabled=new CheckBox("enabled",property.getModel(itemModel));
        enabled.setOutputMarkupId(true);
        fragment.add(enabled);
        return fragment;
      }
 else       if (property.getName().equals("prefix")) {
        return new Label(id,property.getModel(itemModel));
      }
 else       if (property.getName().equals("title")) {
        return new Label(id,property.getModel(itemModel));
      }
 else       if (property.getName().equals("summary")) {
        return new Label(id,property.getModel(itemModel));
      }
 else       if (property.getName().equals("edit")) {
        Fragment fragment=new Fragment(id,"linkFragment",WPSAdminPage.this);
        SubmitLink link=new SubmitLink("link"){
          @Override public void onSubmit(){
            ProcessGroupInfo pfi=(ProcessGroupInfo)itemModel.getObject();
            setResponsePage(new ProcessSelectionPage(WPSAdminPage.this,pfi));
          }
        }
;
        fragment.add(link);
        return fragment;
      }
      return null;
    }
  }
;
  processFilterEditor.setFilterable(false);
  processFilterEditor.setPageable(false);
  processFilterEditor.setOutputMarkupId(true);
  form.add(processFilterEditor);
}
