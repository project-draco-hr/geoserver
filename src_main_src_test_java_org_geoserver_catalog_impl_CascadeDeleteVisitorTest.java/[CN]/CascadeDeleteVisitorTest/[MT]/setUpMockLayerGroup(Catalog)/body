{
  LayerGroupInfo lg=createMock(LayerGroupInfo.class);
  expect(lg.getName()).andReturn(LAKES_GROUP).anyTimes();
  LayerInfo lakes=createNiceMock(LayerInfo.class);
  expect(lakes.getResource()).andReturn(createNiceMock(ResourceInfo.class)).anyTimes();
  expect(catalog.getLayerByName(toString(LAKES))).andReturn(lakes).anyTimes();
  LayerInfo forests=createNiceMock(LayerInfo.class);
  expect(forests.getResource()).andReturn(createNiceMock(ResourceInfo.class)).anyTimes();
  expect(catalog.getLayerByName(toString(FORESTS))).andReturn(forests).anyTimes();
  LayerInfo bridges=createNiceMock(LayerInfo.class);
  expect(bridges.getResource()).andReturn(createNiceMock(ResourceInfo.class)).anyTimes();
  expect(catalog.getLayerByName(toString(FORESTS))).andReturn(bridges).anyTimes();
  expect(lg.getLayers()).andReturn(new ArrayList(Arrays.asList(lakes,forests,bridges))).anyTimes();
  expect(lg.getStyles()).andReturn(new ArrayList(Arrays.asList(null,null,null))).anyTimes();
  expect(catalog.getLayerGroupByName(LAKES_GROUP)).andReturn(lg).anyTimes();
  replay(lakes,forests,bridges,lg);
  expect(catalog.getLayerGroups()).andReturn(Arrays.asList(lg));
  return lg;
}
