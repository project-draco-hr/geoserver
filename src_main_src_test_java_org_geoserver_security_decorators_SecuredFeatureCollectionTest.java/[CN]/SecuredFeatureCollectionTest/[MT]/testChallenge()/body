{
  SecuredFeatureStore ro=new SecuredFeatureStore(store,WrapperPolicy.readOnlyChallenge(null));
  DefaultFeatureCollection fc=new DefaultFeatureCollection();
  fc.add(feature);
  try {
    ro.addFeatures(fc);
    fail("Should have failed with a spring security exception");
  }
 catch (  Exception e) {
    if (ReadOnlyDataStoreTest.isSpringSecurityException(e) == false)     fail("Should have failed with a security exception");
  }
  try {
    ro.removeFeatures(Filter.INCLUDE);
    fail("Should have failed with a spring security exception");
  }
 catch (  Exception e) {
    if (ReadOnlyDataStoreTest.isSpringSecurityException(e) == false)     fail("Should have failed with a security exception");
  }
  try {
    ro.removeFeatures(ECQL.toFilter("IN ('testSchema.1')"));
    fail("Should have failed with a spring security exception");
  }
 catch (  Exception e) {
    if (ReadOnlyDataStoreTest.isSpringSecurityException(e) == false)     fail("Should have failed with a security exception");
  }
  try {
    ro.removeFeatures(Filter.EXCLUDE);
    fail("Should have failed with a spring security exception");
  }
 catch (  Exception e) {
    if (ReadOnlyDataStoreTest.isSpringSecurityException(e) == false)     fail("Should have failed with a security exception");
  }
  FeatureCollection rofc=ro.getFeatures();
  FeatureIterator roit=rofc.features();
  roit.hasNext();
  roit.next();
  SecuredFeatureCollection sorted=(SecuredFeatureCollection)rofc.sort(SortBy.NATURAL_ORDER);
  assertEquals(ro.policy,sorted.policy);
  SecuredFeatureCollection sub=(SecuredFeatureCollection)rofc.subCollection(Filter.INCLUDE);
  assertEquals(ro.policy,sorted.policy);
}
