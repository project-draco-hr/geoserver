{
  SecuredFeatureCollection ro=new SecuredFeatureCollection(fc,WrapperPolicy.hide(null));
  try {
    ro.add(feature);
    fail("Should have failed with an UnsupportedOperationException");
  }
 catch (  UnsupportedOperationException e) {
  }
  try {
    ro.addAll(new ArrayList());
    fail("Should have failed with an UnsupportedOperationException");
  }
 catch (  UnsupportedOperationException e) {
  }
  try {
    ro.clear();
    fail("Should have failed with an UnsupportedOperationException");
  }
 catch (  UnsupportedOperationException e) {
  }
  try {
    ro.remove(feature);
    fail("Should have failed with an UnsupportedOperationException");
  }
 catch (  UnsupportedOperationException e) {
  }
  try {
    ro.removeAll(new ArrayList());
    fail("Should have failed with an UnsupportedOperationException");
  }
 catch (  UnsupportedOperationException e) {
  }
  try {
    ro.retainAll(new ArrayList());
    fail("Should have failed with an UnsupportedOperationException");
  }
 catch (  UnsupportedOperationException e) {
  }
  Iterator roit=ro.iterator();
  roit.hasNext();
  roit.next();
  try {
    roit.remove();
    fail("Should have failed with an UnsupportedOperationException");
  }
 catch (  UnsupportedOperationException e) {
  }
  SecuredFeatureCollection sorted=(SecuredFeatureCollection)ro.sort(sort);
  assertEquals(ro.policy,sorted.policy);
  SecuredFeatureCollection sub=(SecuredFeatureCollection)ro.subCollection(Filter.INCLUDE);
  assertEquals(ro.policy,sorted.policy);
}
