{
  List unparsed=KvpUtils.readFlat(value,KvpUtils.INNER_DELIMETER);
  if (unparsed.size() < 4) {
    throw new IllegalArgumentException("Requested bounding box contains wrong" + "number of coordinates (should have " + "4): "+ unparsed.size());
  }
  int countco=4;
  if (unparsed.size() == 6) {
    countco=6;
  }
  double[] bbox=new double[countco];
  for (int i=0; i < countco; i++) {
    try {
      bbox[i]=Double.parseDouble((String)unparsed.get(i));
    }
 catch (    NumberFormatException e) {
      throw new IllegalArgumentException("Bounding box coordinate " + i + " is not parsable:"+ unparsed.get(i));
    }
  }
  double minx=bbox[0];
  double miny=bbox[1];
  double minz=0, maxx=0, maxy=0, maxz=0;
  if (countco == 6) {
    minz=bbox[2];
    maxx=bbox[3];
    maxy=bbox[4];
    maxz=bbox[5];
  }
 else {
    maxx=bbox[2];
    maxy=bbox[3];
  }
  if (minx > maxx) {
    throw new ServiceException("illegal bbox, minX: " + minx + " is "+ "greater than maxX: "+ maxx);
  }
  if (miny > maxy) {
    throw new ServiceException("illegal bbox, minY: " + miny + " is "+ "greater than maxY: "+ maxy);
  }
  if (minz > maxz) {
    throw new ServiceException("illegal bbox, minZ: " + minz + " is "+ "greater than maxZ: "+ maxz);
  }
  String srs=null;
  if (unparsed.size() > countco) {
    StringBuilder sb=new StringBuilder();
    for (int i=countco; i < unparsed.size(); i++) {
      sb.append(unparsed.get(i));
      if (i < (unparsed.size() - 1)) {
        sb.append(",");
      }
    }
    srs=sb.toString();
  }
  if (countco == 6) {
    CoordinateReferenceSystem crs=srs != null ? CRS.decode(srs) : null;
    return new ReferencedEnvelope3D(minx,maxx,miny,maxy,minz,maxz,crs);
  }
 else {
    return new SRSEnvelope(minx,maxx,miny,maxy,srs);
  }
}
