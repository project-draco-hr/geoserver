{
  FeatureTypeSchemaBuilder schemaBuilder=new FeatureTypeSchemaBuilder.GML32(geoServer);
  Map<String,Set<FeatureTypeInfo>> featureTypes=new HashMap<String,Set<FeatureTypeInfo>>();
  for (  Map.Entry<String,Set<ResourceInfo>> entry : resources.entrySet()) {
    Set<FeatureTypeInfo> fts=new HashSet<FeatureTypeInfo>();
    for (    ResourceInfo ri : entry.getValue()) {
      if (ri instanceof FeatureTypeInfo) {
        fts.add((FeatureTypeInfo)ri);
      }
    }
    if (!fts.isEmpty()) {
      featureTypes.put(entry.getKey(),fts);
    }
  }
  ApplicationSchemaXSD2 xsd=new ApplicationSchemaXSD2(schemaBuilder,featureTypes);
  xsd.setBaseURL(GetFeatureRequest.adapt(request).getBaseURL());
  org.geotools.wfs.v2_0.WFSConfiguration wfs=new org.geotools.wfs.v2_0.WFSConfiguration(){
    @Override protected void registerBindings(    Map bindings){
      super.registerBindings(bindings);
      bindings.put(WFS.FeatureCollectionType,FeatureCollectionTypeBinding.class);
    }
  }
;
  wfs.getDependency(GMLConfiguration.class).setSrsSyntax(getInfo().getGML().get(WFSInfo.Version.V_20).getSrsNameStyle().toSrsSyntax());
  ApplicationSchemaConfiguration2 config=new ApplicationSchemaConfiguration2(xsd,wfs);
  config.getProperties().addAll(configuration.getProperties());
  return new Encoder(config);
}
