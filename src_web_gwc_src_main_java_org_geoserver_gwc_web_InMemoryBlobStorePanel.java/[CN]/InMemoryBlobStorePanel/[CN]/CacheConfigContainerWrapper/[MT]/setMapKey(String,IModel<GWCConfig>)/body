{
  removeAll();
  IModel<Map<String,CacheConfiguration>> cacheConfigurations=new PropertyModel<Map<String,CacheConfiguration>>(gwcConfigModel,"cacheConfigurations");
  MapModel cacheConfiguration=new MapModel(cacheConfigurations,key);
  IModel<Long> hardMemoryLimit=new PropertyModel<Long>(cacheConfiguration,"hardMemoryLimit");
  IModel<Long> evictionTimeValue=new PropertyModel<Long>(cacheConfiguration,"evictionTime");
  IModel<EvictionPolicy> policy=new PropertyModel<EvictionPolicy>(cacheConfiguration,"policy");
  IModel<Integer> concurrencyLevel=new PropertyModel<Integer>(cacheConfiguration,"concurrencyLevel");
  final TextField<Long> hardMemory=new TextField<Long>("hardMemoryLimit",hardMemoryLimit);
  hardMemory.setType(Long.class).setOutputMarkupId(true).setEnabled(true);
  hardMemory.add(new MinimumLongValidator("BlobStorePanel.invalidHardMemory"));
  final TextField<Long> evictionTime=new TextField<Long>("evictionTime",evictionTimeValue);
  evictionTime.setType(Long.class).setOutputMarkupId(true).setEnabled(true);
  List<EvictionPolicy> evictionPolicies=Arrays.asList(EvictionPolicy.values());
  ConfigurableBlobStore store=GeoServerExtensions.bean(ConfigurableBlobStore.class);
  if (store != null) {
    CacheProvider cache=store.getCacheProviders().get(key);
    evictionPolicies=cache.getSupportedPolicies();
  }
  final DropDownChoice<EvictionPolicy> policyDropDown=new DropDownChoice<EvictionPolicy>("policy",policy,evictionPolicies);
  policyDropDown.setOutputMarkupId(true).setEnabled(true);
  final TextField<Integer> textConcurrency=new TextField<Integer>("concurrencyLevel",concurrencyLevel);
  textConcurrency.setType(Integer.class).setOutputMarkupId(true).setEnabled(true);
  textConcurrency.add(new MinimumConcurrencyValidator());
  add(hardMemory);
  add(policyDropDown);
  add(textConcurrency);
  add(evictionTime);
}
