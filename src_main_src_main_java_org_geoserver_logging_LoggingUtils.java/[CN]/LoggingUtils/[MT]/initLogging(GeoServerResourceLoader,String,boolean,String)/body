{
  LoggingInitializer.LOGGER.fine("CONFIGURING GEOSERVER LOGGING -------------------------");
  if (configFileName == null) {
    configFileName="DEFAULT_LOGGING.properties";
    LoggingInitializer.LOGGER.warning("No log4jConfigFile defined in services.xml:  using 'DEFAULT_LOGGING.properties'");
  }
  Resource resource=resourceLoader.get(Paths.path("logs",configFileName));
  if (resource == null || resource.getType() == Type.UNDEFINED) {
    LoggingInitializer.LOGGER.warning("log4jConfigFile '" + configFileName + "' couldn't be found in the data dir, so GeoServer will "+ "install the various logging config file into the data dir, and then try to find it again.");
    Resource logs=resourceLoader.get("logs");
    File lcdir=logs.dir();
    final String[] lcfiles=new String[]{"DEFAULT_LOGGING.properties","GEOSERVER_DEVELOPER_LOGGING.properties","GEOTOOLS_DEVELOPER_LOGGING.properties","PRODUCTION_LOGGING.properties","QUIET_LOGGING.properties","TEST_LOGGING.properties","VERBOSE_LOGGING.properties"};
    for (int i=0; i < lcfiles.length; i++) {
      File target=new File(lcdir.getAbsolutePath(),lcfiles[i]);
      if (!target.exists()) {
        resourceLoader.copyFromClassPath(lcfiles[i],target);
      }
    }
    if (resource.getType() != Type.RESOURCE) {
      LoggingInitializer.LOGGER.warning("Still couldn't find log4jConfigFile '" + configFileName + "'.  Using DEFAULT_LOGGING.properties instead.");
    }
    resource=resourceLoader.get(Paths.path("logs","DEFAULT_LOGGING.properties"));
  }
  if (resource == null || resource.getType() != Type.RESOURCE) {
    throw new ConfigurationException("Unable to load logging configuration '" + configFileName + "'.  In addition, an attempt "+ "was made to create the 'logs' directory in your data dir, and to use the DEFAULT_LOGGING configuration, but"+ "this failed as well.  Is your data dir writeable?");
  }
  try (InputStream loggingConfigStream=resource.in()){
    if (loggingConfigStream == null) {
      LoggingInitializer.LOGGER.warning("Couldn't open Log4J configuration file '" + resource);
      return;
    }
 else {
      LoggingInitializer.LOGGER.fine("GeoServer logging profile '" + resource.name() + "' enabled.");
    }
    configureGeoServerLogging(resourceLoader,loggingConfigStream,suppressStdOutLogging,false,logFileName);
  }
 }
