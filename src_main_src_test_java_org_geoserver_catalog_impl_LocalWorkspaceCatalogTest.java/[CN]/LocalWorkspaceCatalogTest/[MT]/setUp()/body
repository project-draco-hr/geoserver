{
  super.setUp();
  WorkspaceInfo ws1=createNiceMock(WorkspaceInfo.class);
  expect(ws1.getName()).andReturn("ws1").anyTimes();
  replay(ws1);
  NamespaceInfo ns1=createNiceMock(NamespaceInfo.class);
  expect(ns1.getPrefix()).andReturn("ws1").anyTimes();
  expect(ns1.getURI()).andReturn("ws1").anyTimes();
  replay(ns1);
  WorkspaceInfo ws2=createNiceMock(WorkspaceInfo.class);
  expect(ws2.getName()).andReturn("ws2").anyTimes();
  replay(ws2);
  NamespaceInfo ns2=createNiceMock(NamespaceInfo.class);
  expect(ns2.getPrefix()).andReturn("ws2").anyTimes();
  expect(ns2.getURI()).andReturn("ws2").anyTimes();
  replay(ns2);
  StyleInfo s1=createNiceMock(StyleInfo.class);
  expect(s1.getName()).andReturn("s1").anyTimes();
  expect(s1.getWorkspace()).andReturn(ws1).anyTimes();
  replay(s1);
  StyleInfo s2=createNiceMock(StyleInfo.class);
  expect(s2.getName()).andReturn("s2").anyTimes();
  expect(s2.getWorkspace()).andReturn(ws2).anyTimes();
  replay(s2);
  LayerGroupInfo lg1=createNiceMock(LayerGroupInfo.class);
  expect(lg1.getName()).andReturn("lg1").anyTimes();
  expect(lg1.getWorkspace()).andReturn(ws1).anyTimes();
  replay(lg1);
  LayerGroupInfo lg2=createNiceMock(LayerGroupInfo.class);
  expect(lg2.getName()).andReturn("lg2").anyTimes();
  expect(lg2.getWorkspace()).andReturn(ws2).anyTimes();
  replay(lg2);
  FeatureTypeInfo ft1=createNiceMock(FeatureTypeInfo.class);
  expect(ft1.getName()).andReturn("l1").anyTimes();
  expect(ft1.getNamespace()).andReturn(ns1).anyTimes();
  replay(ft1);
  LayerInfo l1=createNiceMock(LayerInfo.class);
  expect(l1.getName()).andReturn("l1").anyTimes();
  expect(l1.getResource()).andReturn(ft1).anyTimes();
  replay(l1);
  FeatureTypeInfo ft2=createNiceMock(FeatureTypeInfo.class);
  expect(ft2.getName()).andReturn("l2").anyTimes();
  expect(ft2.getNamespace()).andReturn(ns2).anyTimes();
  replay(ft2);
  LayerInfo l2=createNiceMock(LayerInfo.class);
  expect(l2.getName()).andReturn("l2").anyTimes();
  expect(l2.getResource()).andReturn(ft2).anyTimes();
  replay(l2);
  LayerInfo lc1=createNiceMock(LayerInfo.class);
  expect(lc1.getName()).andReturn("lc").anyTimes();
  expect(lc1.getResource()).andReturn(ft1).anyTimes();
  replay(lc1);
  LayerInfo lc2=createNiceMock(LayerInfo.class);
  expect(lc2.getName()).andReturn("lc").anyTimes();
  expect(lc2.getResource()).andReturn(ft2).anyTimes();
  replay(lc2);
  Catalog cat=createNiceMock(Catalog.class);
  expect(cat.getWorkspaces()).andReturn(Arrays.asList(ws1,ws2)).anyTimes();
  expect(cat.getWorkspaceByName("ws1")).andReturn(ws1).anyTimes();
  expect(cat.getWorkspaceByName("ws2")).andReturn(ws2).anyTimes();
  expect(cat.getNamespaceByPrefix("ws1")).andReturn(ns1).anyTimes();
  expect(cat.getNamespaceByPrefix("ws2")).andReturn(ns2).anyTimes();
  expect(cat.getStyleByName("ws1","s1")).andReturn(s1).anyTimes();
  expect(cat.getStyleByName(ws1,"s1")).andReturn(s1).anyTimes();
  expect(cat.getStyleByName("s1")).andReturn(null).anyTimes();
  expect(cat.getStyleByName("ws2","s2")).andReturn(s1).anyTimes();
  expect(cat.getStyleByName(ws2,"s2")).andReturn(s1).anyTimes();
  expect(cat.getStyleByName("s2")).andReturn(null).anyTimes();
  expect(cat.getLayerGroupByName("ws1","lg1")).andReturn(lg1).anyTimes();
  expect(cat.getLayerGroupByName(ws1,"lg1")).andReturn(lg1).anyTimes();
  expect(cat.getLayerGroupByName("lg1")).andReturn(null).anyTimes();
  expect(cat.getLayerGroupByName("ws2","lg2")).andReturn(lg2).anyTimes();
  expect(cat.getLayerGroupByName(ws2,"lg2")).andReturn(lg2).anyTimes();
  expect(cat.getLayerGroupByName("lg2")).andReturn(null).anyTimes();
  expect(cat.getLayerByName(new NameImpl("ws1","l1"))).andReturn(l1).anyTimes();
  expect(cat.getLayerByName("l1")).andReturn(null).anyTimes();
  expect(cat.getLayerByName(new NameImpl("ws2","l2"))).andReturn(l2).anyTimes();
  expect(cat.getLayerByName("l2")).andReturn(null).anyTimes();
  expect(cat.getLayerByName(new NameImpl("ws1","lc"))).andReturn(lc1).anyTimes();
  expect(cat.getLayerByName(new NameImpl("ws2","lc"))).andReturn(lc2).anyTimes();
  expect(cat.getLayerByName("lc")).andReturn(lc1).anyTimes();
  replay(cat);
  catalog=new LocalWorkspaceCatalog(cat);
}
