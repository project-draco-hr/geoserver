{
  form.add(new TextField<Integer>("maxFeatures").add(new MinimumValidator<Integer>(0)));
  form.add(new CheckBox("featureBounding"));
  RadioGroup sl=new RadioGroup("serviceLevel");
  form.add(sl);
  sl.add(new Radio("basic",new Model(WFSInfo.ServiceLevel.BASIC)));
  sl.add(new Radio("transactional",new Model(WFSInfo.ServiceLevel.TRANSACTIONAL)));
  sl.add(new Radio("complete",new Model(WFSInfo.ServiceLevel.COMPLETE)));
  IModel gml2Model=new LoadableDetachableModel(){
    public Object load(){
      return ((WFSInfo)info.getObject()).getGML().get(WFSInfo.Version.V_10);
    }
  }
;
  IModel gml3Model=new LoadableDetachableModel(){
    public Object load(){
      return ((WFSInfo)info.getObject()).getGML().get(WFSInfo.Version.V_11);
    }
  }
;
  IModel gml32Model=new LoadableDetachableModel(){
    @Override protected Object load(){
      return ((WFSInfo)info.getObject()).getGML().get(WFSInfo.Version.V_20);
    }
  }
;
  form.add(new GMLPanel("gml2",gml2Model));
  form.add(new GMLPanel("gml3",gml3Model));
  form.add(new GMLPanel("gml32",gml32Model));
  form.add(new CheckBox("canonicalSchemaLocation"));
  RadioGroup eo=new RadioGroup("encodeFeatureMember");
  form.add(eo);
  eo.add(new Radio("featureMembers",new Model(Boolean.FALSE)));
  eo.add(new Radio("featureMember",new Model(Boolean.TRUE)));
  PropertyModel metadataModel=new PropertyModel(info,"metadata");
  IModel<Boolean> prjFormatModel=new MapModel(metadataModel,ShapeZipOutputFormat.SHAPE_ZIP_DEFAULT_PRJ_IS_ESRI);
  CheckBox defaultPrjFormat=new CheckBox("shapeZipPrjFormat",prjFormatModel);
  form.add(defaultPrjFormat);
  try {
    GeoServerResourceLoader resourceLoader=GeoServerExtensions.bean(GeoServerResourceLoader.class);
    File esriProjs=resourceLoader.find("user_projections","esri.properties");
    if (null == esriProjs) {
      defaultPrjFormat.setEnabled(false);
      defaultPrjFormat.getModel().setObject(Boolean.FALSE);
      defaultPrjFormat.add(new AttributeModifier("title",true,new Model("No esri.properties file " + "found in the data directory's user_projections folder. " + "This option is not available")));
    }
  }
 catch (  Exception e) {
    LOGGER.log(Level.INFO,e.getMessage(),e);
  }
}
