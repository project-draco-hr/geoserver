{
  String wcsRequest=WCS2GetCoverageRequestBuilder.newBuilder().coverageId(getLayerId(MockData.TASMANIA_DEM)).bbox(130.0,150,-44.,-40).asXML(version);
  String xml="<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<wps:Execute version=\"1.0.0\" service=\"WPS\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://www.opengis.net/wps/1.0.0\" xmlns:wfs=\"http://www.opengis.net/wfs\" xmlns:wps=\"http://www.opengis.net/wps/1.0.0\" xmlns:ows=\"http://www.opengis.net/ows/1.1\" xmlns:gml=\"http://www.opengis.net/gml\" xmlns:ogc=\"http://www.opengis.net/ogc\" xmlns:wcs=\"http://www.opengis.net/wcs/1.1.1\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xsi:schemaLocation=\"http://www.opengis.net/wps/1.0.0 http://schemas.opengis.net/wps/1.0.0/wpsAll.xsd\">\n" + "  <ows:Identifier>gs:CropCoverage</ows:Identifier>\n"+ "  <wps:DataInputs>\n"+ "    <wps:Input>\n"+ "      <ows:Identifier>coverage</ows:Identifier>\n"+ "      <wps:Reference mimeType=\"image/tiff\" xlink:href=\"http://geoserver/wcs\" method=\"POST\">\n"+ "        <wps:Body>\n" + wcsRequest + "        </wps:Body>\n"+ "      </wps:Reference>\n"+ "    </wps:Input>\n"+ "    <wps:Input>\n"+ "      <ows:Identifier>cropShape</ows:Identifier>\n"+ "      <wps:Data>\n"+ "        <wps:ComplexData mimeType=\"application/wkt\"><![CDATA[POLYGON((145.5 -41.9, 145.5 -42.1, 145.6 -42, 145.5 -41.9))]]></wps:ComplexData>\n"+ "      </wps:Data>\n"+ "    </wps:Input>\n"+ "  </wps:DataInputs>\n"+ "  <wps:ResponseForm>\n"+ "    <wps:RawDataOutput mimeType=\"application/arcgrid\">\n"+ "      <ows:Identifier>result</ows:Identifier>\n"+ "    </wps:RawDataOutput>\n"+ "  </wps:ResponseForm>\n"+ "</wps:Execute>\n"+ "\n"+ "";
  MockHttpServletResponse response=postAsServletResponse(root(),xml);
  InputStream is=getBinaryInputStream(response);
  ArcGridFormat format=new ArcGridFormat();
  GridCoverage gc=format.getReader(is).read(null);
  assertTrue(new Envelope(-145.4,145.6,-41.8,-42.1).contains(new ReferencedEnvelope(gc.getEnvelope())));
  double[] valueInside=(double[])gc.evaluate(new DirectPosition2D(145.55,-42));
  assertEquals(615.0,valueInside[0]);
  double[] valueOutside=(double[])gc.evaluate(new DirectPosition2D(145.57,-41.9));
  assertEquals(-9999 & 0xFFFF,(int)valueOutside[0]);
}
