{
  table=new GeoServerTablePanel<TileLayer>("table",provider,true){
    private static final long serialVersionUID=1L;
    @SuppressWarnings({"rawtypes","unchecked"}) @Override protected Component getComponentForProperty(    String id,    IModel itemModel,    Property<TileLayer> property){
      if (property == TYPE) {
        Fragment f=new Fragment(id,"iconFragment",NewCachedLayerPage.this);
        TileLayer layer=(TileLayer)itemModel.getObject();
        PackageResourceReference layerIcon=(PackageResourceReference)property.getPropertyValue(layer);
        f.add(new Image("layerIcon",layerIcon));
        return f;
      }
 else       if (property == NAME) {
        return nameLink(id,itemModel);
      }
 else       if (property == ENABLED) {
        TileLayer layerInfo=(TileLayer)itemModel.getObject();
        boolean enabled=layerInfo.isEnabled();
        PackageResourceReference icon;
        if (enabled) {
          icon=GWCIconFactory.getEnabledIcon();
        }
 else {
          icon=GWCIconFactory.getDisabledIcon();
        }
        Fragment f=new Fragment(id,"iconFragment",NewCachedLayerPage.this);
        f.add(new Image("layerIcon",icon));
        return f;
      }
      throw new IllegalArgumentException("Don't know a property named " + property.getName());
    }
    @Override protected void onSelectionUpdate(    AjaxRequestTarget target){
      updateBulkConfigLink();
      target.add(bulkConfig);
    }
  }
;
  table.setOutputMarkupId(true);
  add(table);
  add(dialog=new GeoServerDialog("dialog"));
  dialog.setInitialWidth(360);
  dialog.setInitialHeight(180);
  setHeaderPanel(headerPanel());
}
