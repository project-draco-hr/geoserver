{
  Throwable current=t;
  while (current != null && !(current instanceof ClientStreamAbortedException) && !isSecurityException(current) && !(current instanceof HttpErrorCodeException)) {
    if (current instanceof SAXException)     current=((SAXException)current).getException();
 else     current=current.getCause();
  }
  if (current instanceof ClientStreamAbortedException) {
    logger.log(Level.FINER,"Client has closed stream",t);
    return;
  }
  if (isSecurityException(current)) {
    throw (RuntimeException)current;
  }
  if (current instanceof HttpErrorCodeException) {
    HttpErrorCodeException ece=(HttpErrorCodeException)current;
    int errorCode=ece.getErrorCode();
    if (errorCode < 199 || errorCode > 299) {
      logger.log(Level.FINE,"",t);
    }
 else {
      logger.log(Level.FINER,"",t);
    }
    try {
      if (ece.getMessage() != null) {
        request.getHttpResponse().sendError(ece.getErrorCode(),ece.getMessage());
      }
 else {
        request.getHttpResponse().sendError(ece.getErrorCode());
      }
      if (ece.getErrorCode() < 400) {
        t=null;
      }
    }
 catch (    IOException e) {
      logger.log(Level.FINER,"",t);
    }
  }
 else {
    logger.log(Level.SEVERE,"",t);
    Throwable cause=t;
    while (cause != null) {
      if (cause instanceof ServiceException) {
        break;
      }
      cause=cause.getCause();
    }
    if (cause == null) {
      cause=new ServiceException(t);
    }
    ServiceException se=(ServiceException)cause;
    if (cause != t) {
      se=new ServiceException(se.getMessage(),t,se.getCode(),se.getLocator());
    }
    handleServiceException(se,service,request);
  }
  request.error=t;
}
