{
  final GetCapabilitiesTransformer transformer=(GetCapabilitiesTransformer)value;
  final GetCapabilitiesRequest request=(GetCapabilitiesRequest)operation.getParameters()[0];
  final String internalDTDDeclaration=getInternalDTDDeclaration(request);
  if (internalDTDDeclaration == null) {
    try {
      transformer.transform(request,output);
    }
 catch (    TransformerException e) {
      throw new ServiceException(e);
    }
  }
 else {
    byte[] rawCapabilities;
    Transformer dtdIncludeTransformer;
{
      ByteArrayOutputStream target=new ByteArrayOutputStream();
      try {
        transformer.transform(request,target);
      }
 catch (      TransformerException e) {
        throw new ServiceException(e);
      }
      rawCapabilities=target.toByteArray();
    }
{
      TransformerFactory tFactory=TransformerFactory.newInstance();
      String xsltSystemId=getClass().getResource("getcaps_111_internalDTD.xsl").toExternalForm();
      Source tsource=new StreamSource(xsltSystemId);
      try {
        dtdIncludeTransformer=tFactory.newTransformer(tsource);
      }
 catch (      TransformerConfigurationException e) {
        throw new ServiceException(e);
      }
    }
    dtdIncludeTransformer.setParameter("DTDDeclaration",internalDTDDeclaration.toString());
    Source source;
    try {
      SAXParserFactory spf=SAXParserFactory.newInstance();
      spf.setNamespaceAware(true);
      SAXParser sp=spf.newSAXParser();
      XMLReader rawCapsReader=sp.getXMLReader();
      rawCapsReader.setEntityResolver(new EntityResolver(){
        @Override public InputSource resolveEntity(        String publicId,        String systemId) throws SAXException {
          final String dtdLocation="/schemas/wms/1.1.1/WMS_MS_Capabilities.dtd";
          String dtdSystemId=getClass().getResource(dtdLocation).toExternalForm();
          return new InputSource(dtdSystemId);
        }
      }
);
      source=new SAXSource(rawCapsReader,new InputSource(new ByteArrayInputStream(rawCapabilities)));
    }
 catch (    Exception e) {
      throw new ServiceException(e);
    }
    Result result=new StreamResult(output);
    try {
      dtdIncludeTransformer.transform(source,result);
    }
 catch (    TransformerException e) {
      throw new ServiceException(e);
    }
  }
}
