{
  int totalWidth=0;
  int totalHeight=0;
  for (  Row r : rows) {
    if (r != null) {
      if (totalHeight > 0) {
        totalHeight=totalHeight + options.getDy();
      }
      totalHeight=totalHeight + r.getHeight();
      int w=r.getWidth() + (r.nodes.size() - 1) * options.getDx();
      totalWidth=Math.max(totalWidth,w);
    }
  }
  totalWidth=totalWidth + options.getMargin() * 2;
  totalHeight=totalHeight + options.getMargin() * 2;
  totalWidth+=2;
  final BufferedImage finalLegend=ImageUtils.createImage(totalWidth,totalHeight,(IndexColorModel)null,options.isTransparent());
  final Map<RenderingHints.Key,Object> hintsMap=new HashMap<RenderingHints.Key,Object>();
  Graphics2D finalGraphics=ImageUtils.prepareTransparency(options.isTransparent(),options.getBackgroundColor(),finalLegend,hintsMap);
  if (options.isAntialias()) {
    finalGraphics.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
  }
 else {
    finalGraphics.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);
  }
  int vOffset=options.getMargin();
  int hOffset=options.getMargin();
  for (  Row r : rows) {
    if (r != null) {
      for (      BufferedImage n : r.getNodes()) {
        finalGraphics.drawImage(n,hOffset,vOffset,null);
        hOffset=hOffset + n.getWidth() + options.getDx();
      }
      vOffset=vOffset + r.getHeight() + options.getDy();
      hOffset=options.getMargin();
    }
  }
  finalGraphics.dispose();
  return finalLegend;
}
