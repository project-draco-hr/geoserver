{
  FeatureTypeInfo ftInfo=getCatalog().getFeatureTypeByName("gsml","MappedFeature");
  FeatureSource fs=ftInfo.getFeatureSource(new NullProgressListener(),null);
  AppSchemaDataAccess da=(AppSchemaDataAccess)fs.getDataStore();
  FeatureTypeMapping rootMapping=da.getMappingByNameOrElement(ftInfo.getQualifiedName());
  assumeTrue(shouldTestNestedFiltersEncoding(rootMapping));
  JDBCDataStore store=(JDBCDataStore)rootMapping.getSource().getDataStore();
  NestedFilterToSQL nestedFilterToSQL=createNestedFilterEncoder(rootMapping);
  FilterFactoryImplNamespaceAware ff=new FilterFactoryImplNamespaceAware();
  ff.setNamepaceContext(rootMapping.getNamespaces());
  PropertyIsEqualTo propertyIsEqualTo=ff.equals(ff.property("gml:name[2]"),ff.literal("nameone 4"));
  ComplexFilterSplitter splitter=new ComplexFilterSplitter(store.getFilterCapabilities(),rootMapping);
  splitter.visit(propertyIsEqualTo,null);
  Filter preFilter=splitter.getFilterPre();
  Filter postFilter=splitter.getFilterPost();
  assertEquals(propertyIsEqualTo,preFilter);
  assertEquals(Filter.INCLUDE,postFilter);
  Filter unrolled=AppSchemaDataAccess.unrollFilter(propertyIsEqualTo,rootMapping);
  assertTrue(NestedFilterToSQL.isNestedFilter(unrolled));
  String encodedFilter=nestedFilterToSQL.encodeToString(unrolled);
  assertTrue(encodedFilter.contains("EXISTS"));
  assertContainsFeatures(fs.getFeatures(propertyIsEqualTo),"mf3");
  PropertyIsEqualTo ordinaryFilter=ff.equals(ff.property("gml:name[1]"),ff.literal("GUNTHORPE FORMATION"));
  ComplexFilterSplitter splitter2=new ComplexFilterSplitter(store.getFilterCapabilities(),rootMapping);
  splitter2.visit(ordinaryFilter,null);
  preFilter=splitter2.getFilterPre();
  postFilter=splitter2.getFilterPost();
  assertEquals(ordinaryFilter,preFilter);
  assertEquals(Filter.INCLUDE,postFilter);
  unrolled=AppSchemaDataAccess.unrollFilter(ordinaryFilter,rootMapping);
  assertFalse(NestedFilterToSQL.isNestedFilter(unrolled));
  String ordinaryEncoded=nestedFilterToSQL.encodeToString(unrolled);
  assertFalse(ordinaryEncoded.contains("EXISTS"));
  assertContainsFeatures(fs.getFeatures(ordinaryFilter),"mf1");
  PropertyIsEqualTo multipleFilter=ff.equals(ff.property("gml:name"),ff.literal("GUNTHORPE FORMATION"));
  ComplexFilterSplitter splitter3=new ComplexFilterSplitter(store.getFilterCapabilities(),rootMapping);
  splitter3.visit(multipleFilter,null);
  preFilter=splitter3.getFilterPre();
  postFilter=splitter3.getFilterPost();
  assertEquals(Filter.INCLUDE,preFilter);
  assertEquals(multipleFilter,postFilter);
  unrolled=AppSchemaDataAccess.unrollFilter(multipleFilter,rootMapping);
  assertTrue(NestedFilterToSQL.isNestedFilter(unrolled));
  assertContainsFeatures(fs.getFeatures(multipleFilter),"mf1");
  PropertyIsEqualTo regularFilter=ff.equals(ff.property("gml:name[1]"),ff.literal("GUNTHORPE FORMATION"));
  PropertyIsEqualTo nestedFilter=ff.equals(ff.property("gml:name[2]"),ff.literal("nameone 4"));
  Or combined=ff.or(regularFilter,nestedFilter);
  ComplexFilterSplitter splitterCombined=new ComplexFilterSplitter(store.getFilterCapabilities(),rootMapping);
  splitterCombined.visit(combined,null);
  preFilter=splitterCombined.getFilterPre();
  postFilter=splitterCombined.getFilterPost();
  assertEquals(combined,preFilter);
  assertEquals(Filter.INCLUDE,postFilter);
  unrolled=AppSchemaDataAccess.unrollFilter(combined,rootMapping);
  assertTrue(NestedFilterToSQL.isNestedFilter(unrolled));
  String encodedCombined=nestedFilterToSQL.encodeToString(unrolled);
  assertTrue(encodedCombined.matches("^\\(.*GUNTHORPE FORMATION.*OR.*EXISTS.*\\)$"));
  assertContainsFeatures(fs.getFeatures(combined),"mf1","mf3");
  PropertyIsNotEqualTo notEquals=ff.notEqual(ff.property("gml:name[2]"),ff.property("gml:name[3]"));
  ComplexFilterSplitter splitterNotEquals=new ComplexFilterSplitter(store.getFilterCapabilities(),rootMapping);
  splitterNotEquals.visit(notEquals,null);
  preFilter=splitterNotEquals.getFilterPre();
  postFilter=splitterNotEquals.getFilterPost();
  assertEquals(Filter.INCLUDE,preFilter);
  assertEquals(notEquals,postFilter);
  unrolled=AppSchemaDataAccess.unrollFilter(notEquals,rootMapping);
  assertTrue(NestedFilterToSQL.isNestedFilter(unrolled));
  assertContainsFeatures(fs.getFeatures(notEquals),"mf1","mf2","mf3","mf4");
}
