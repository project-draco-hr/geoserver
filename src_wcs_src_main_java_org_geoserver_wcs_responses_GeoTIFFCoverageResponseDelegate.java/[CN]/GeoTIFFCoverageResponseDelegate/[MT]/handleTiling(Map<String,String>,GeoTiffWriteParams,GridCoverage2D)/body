{
  final RenderedImage sourceImage=sourceCoverage.getRenderedImage();
  final SampleModel sampleModel=sourceImage.getSampleModel();
  final int sourceTileW=sampleModel.getWidth();
  final int sourceTileH=sampleModel.getHeight();
  final Dimension tileDimensions=new Dimension(sourceTileW,sourceTileH);
  LOGGER.fine("Source tiling:" + tileDimensions.width + "x"+ tileDimensions.height);
  final GridEnvelope gr=sourceCoverage.getGridGeometry().getGridRange();
  if (gr.getSpan(0) < tileDimensions.width) {
    tileDimensions.width=gr.getSpan(0);
  }
  if (gr.getSpan(1) < tileDimensions.height) {
    tileDimensions.height=gr.getSpan(1);
  }
  LOGGER.fine("Source tiling reviewed to save space:" + tileDimensions.width + "x"+ tileDimensions.height);
  if (econdingParameters.containsKey("tiling")) {
    final String tilingS=econdingParameters.get("tiling");
    if (tilingS != null && Boolean.valueOf(tilingS)) {
      if (econdingParameters.containsKey("tilewidth")) {
        final String tileW_=econdingParameters.get("tilewidth");
        if (tileW_ != null) {
          try {
            final int tileW=Integer.valueOf(tileW_);
            if (tileW > 0 && (tileW % 16 == 0)) {
              tileDimensions.width=tileW;
            }
 else {
              throw new OWS20Exception("Provided tile width is invalid",ows20Code(WcsExceptionCode.TilingInvalid),Integer.toString(tileW));
            }
          }
 catch (          Exception e) {
            throw new OWS20Exception("Provided tile width is invalid",ows20Code(WcsExceptionCode.TilingInvalid),tileW_);
          }
        }
      }
      if (econdingParameters.containsKey("tileheight")) {
        final String tileH_=econdingParameters.get("tileheight");
        if (tileH_ != null) {
          try {
            final int tileH=Integer.valueOf(tileH_);
            if (tileH > 0 && (tileH % 16 == 0)) {
              tileDimensions.height=tileH;
            }
 else {
              throw new OWS20Exception("Provided tile height is invalid",ows20Code(WcsExceptionCode.TilingInvalid),Integer.toString(tileH));
            }
          }
 catch (          Exception e) {
            throw new OWS20Exception("Provided tile height is invalid",ows20Code(WcsExceptionCode.TilingInvalid),tileH_);
          }
        }
      }
    }
  }
  if (tileDimensions.width != sourceTileW || tileDimensions.height != sourceTileH) {
    LOGGER.fine("Final tiling:" + tileDimensions.width + "x"+ tileDimensions.height);
    wp.setTilingMode(GeoToolsWriteParams.MODE_EXPLICIT);
    wp.setTiling(tileDimensions.width,tileDimensions.height);
  }
 else {
    LOGGER.fine("Mantaining original tiling");
  }
}
