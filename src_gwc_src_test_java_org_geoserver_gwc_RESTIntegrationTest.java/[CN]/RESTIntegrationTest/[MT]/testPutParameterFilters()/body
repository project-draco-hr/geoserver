{
  final String layerName=getLayerId(MockData.LAKES);
  final GWC mediator=GWC.get();
  assertTrue(mediator.tileLayerExists(layerName));
  mediator.removeTileLayers(Lists.newArrayList(layerName));
  assertFalse(mediator.tileLayerExists(layerName));
  final String xml="<GeoServerLayer>" + " <enabled>true</enabled>" + " <name>" + layerName + "</name>"+ " <mimeFormats><string>image/png8</string></mimeFormats>"+ " <gridSubsets>"+ "  <gridSubset><gridSetName>GoogleCRS84Quad</gridSetName></gridSubset>"+ "  <gridSubset><gridSetName>EPSG:4326</gridSetName></gridSubset>"+ " </gridSubsets>"+ " <metaWidthHeight><int>9</int><int>6</int></metaWidthHeight>"+ " <parameterFilters>"+ "  <stringParameterFilter>"+ "   <key>STYLES</key>"+ "   <defaultValue>capitals</defaultValue>"+ "   <values><string>burg</string><string>point</string></values>"+ "  </stringParameterFilter>"+ "  <floatParameterFilter>"+ "   <key>ELEVATION</key>"+ "   <defaultValue>10.1</defaultValue>"+ "    <values>"+ "     <float>10.1</float><float>10.2</float><float>10.3</float>"+ "    </values>"+ "   <threshold>1.0E-2</threshold>"+ "  </floatParameterFilter>"+ " </parameterFilters>"+ " <gutter>20</gutter>"+ " <autoCacheStyles>true</autoCacheStyles>"+ "</GeoServerLayer>";
  final String url="gwc/rest/layers/" + layerName + ".xml";
  MockHttpServletResponse response=super.putAsServletResponse(url,xml,"text/xml");
  assertEquals(HttpServletResponse.SC_OK,response.getStatusCode());
  assertTrue(mediator.tileLayerExists(layerName));
  GeoServerTileLayer tileLayer=(GeoServerTileLayer)mediator.getTileLayerByName(layerName);
  GeoServerTileLayerInfo info=tileLayer.getInfo();
  assertEquals(20,info.getGutter());
  assertEquals(2,tileLayer.getGridSubsets().size());
  assertTrue(tileLayer.getGridSubsets().contains("GoogleCRS84Quad"));
  assertTrue(tileLayer.getGridSubsets().contains("EPSG:4326"));
  assertEquals(ImmutableSet.of("image/png8"),info.getMimeFormats());
  assertEquals(9,info.getMetaTilingX());
  assertEquals(6,info.getMetaTilingY());
  List<ParameterFilter> filters=Lists.newArrayList(info.getParameterFilters());
  assertEquals(2,filters.size());
  ParameterFilter f1=filters.get(0);
  ParameterFilter f2=filters.get(1);
  FloatParameterFilter floatFilter=(FloatParameterFilter)(f1 instanceof FloatParameterFilter ? f1 : (f2 instanceof FloatParameterFilter ? f2 : null));
  StringParameterFilter stringFilter=(StringParameterFilter)(f1 instanceof StringParameterFilter ? f1 : (f2 instanceof StringParameterFilter ? f2 : null));
  assertNotNull(floatFilter);
  assertNotNull(stringFilter);
  assertEquals("ELEVATION",floatFilter.getKey());
  assertEquals("10.1",floatFilter.getDefaultValue());
  assertEquals(1.0E-2f,floatFilter.getThreshold());
  assertEquals(ImmutableList.of(new Float(10.1f),new Float(10.2f),new Float(10.3f)),floatFilter.getValues());
  assertEquals("STYLES",stringFilter.getKey());
  assertEquals("capitals",stringFilter.getDefaultValue());
  assertEquals(ImmutableList.of("burg","point"),stringFilter.getLegalValues());
}
