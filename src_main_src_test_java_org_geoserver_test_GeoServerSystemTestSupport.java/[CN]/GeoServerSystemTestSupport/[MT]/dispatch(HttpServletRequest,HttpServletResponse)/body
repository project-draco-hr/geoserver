{
  final DispatcherServlet dispatcher=getDispatcher();
  HttpServlet servlet=new HttpServlet(){
    @Override protected void service(    HttpServletRequest request,    HttpServletResponse response) throws ServletException, IOException {
      try {
        Collection interceptors=GeoServerExtensions.extensions(HandlerInterceptor.class,applicationContext);
        for (Iterator i=interceptors.iterator(); i.hasNext(); ) {
          HandlerInterceptor interceptor=(HandlerInterceptor)i.next();
          interceptor.preHandle(request,response,dispatcher);
        }
        dispatcher.service(request,response);
        for (Iterator i=interceptors.iterator(); i.hasNext(); ) {
          HandlerInterceptor interceptor=(HandlerInterceptor)i.next();
          interceptor.postHandle(request,response,dispatcher,null);
        }
      }
 catch (      RuntimeException e) {
        throw e;
      }
catch (      IOException e) {
        throw e;
      }
catch (      ServletException e) {
        throw e;
      }
catch (      Exception e) {
        throw (IOException)new IOException("Failed to handle the request").initCause(e);
      }
    }
  }
;
  List<Filter> filterList=getFilters();
  MockFilterChain chain;
  if (filterList != null) {
    chain=new MockFilterChain(servlet,(Filter[])filterList.toArray(new Filter[filterList.size()]));
  }
 else {
    chain=new MockFilterChain(servlet);
  }
  chain.doFilter(request,response);
}
