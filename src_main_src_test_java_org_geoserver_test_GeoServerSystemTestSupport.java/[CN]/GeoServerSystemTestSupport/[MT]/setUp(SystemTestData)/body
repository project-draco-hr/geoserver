{
  try {
    Logging.ALL.setLoggerFactory(Log4JLoggerFactory.getInstance());
  }
 catch (  Exception e) {
    LOGGER.log(Level.SEVERE,"Could not configure log4j logging redirection",e);
  }
  System.setProperty(LoggingUtils.RELINQUISH_LOG4J_CONTROL,"true");
  GeoServerResourceLoader loader=new GeoServerResourceLoader(testData.getDataDirectoryRoot());
  LoggingUtils.configureGeoServerLogging(loader,getClass().getResourceAsStream(getLogConfiguration()),false,true,null);
  setUpTestData(testData);
  TestHttpClientProvider.startTest();
  if (testData.isTestDataAvailable()) {
    MockServletContext servletContext=new MockServletContext();
    servletContext.setInitParameter("GEOSERVER_DATA_DIR",testData.getDataDirectoryRoot().getPath());
    servletContext.setInitParameter("serviceStrategy","PARTIAL-BUFFER2");
    if (testData.getDataDirectoryRoot().canWrite()) {
      File webinf=new File(testData.getDataDirectoryRoot(),"WEB-INF");
      webinf.mkdir();
      servletContext.setRealPath("WEB-INF",webinf.getAbsolutePath());
    }
    List<String> contexts=new ArrayList();
    setUpSpring(contexts);
    applicationContext=new GeoServerTestApplicationContext(contexts.toArray(new String[contexts.size()]),servletContext);
    applicationContext.setUseLegacyGeoServerLoader(false);
    applicationContext.refresh();
    applicationContext.publishEvent(new ContextLoadedEvent(applicationContext));
    servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE,applicationContext);
    onSetUp(testData);
  }
}
