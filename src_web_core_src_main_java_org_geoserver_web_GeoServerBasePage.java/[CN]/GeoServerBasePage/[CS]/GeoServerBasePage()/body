{
  PackageResourceReference faviconReference=null;
  List<HeaderContribution> cssContribs=getGeoServerApplication().getBeansOfType(HeaderContribution.class);
  for (  HeaderContribution csscontrib : cssContribs) {
    try {
      if (csscontrib.appliesTo(this)) {
        PackageResourceReference ref=csscontrib.getFavicon();
        if (ref != null) {
          faviconReference=ref;
        }
      }
    }
 catch (    Throwable t) {
      LOGGER.log(Level.WARNING,"Problem adding header contribution",t);
    }
  }
  if (faviconReference == null) {
    faviconReference=new PackageResourceReference(GeoServerBasePage.class,"favicon.ico");
  }
  String faviconUrl=RequestCycle.get().urlFor(faviconReference,null).toString();
  add(new ExternalLink("faviconLink",faviconUrl,null));
  add(new Label("pageTitle",new LoadableDetachableModel<String>(){
    @Override protected String load(){
      return getPageTitle();
    }
  }
));
  List<String> securityFilters=getGeoServerApplication().getSecurityManager().getSecurityConfig().getFilterChain().filtersFor("/web/**");
  final Authentication user=GeoServerSession.get().getAuthentication();
  final boolean anonymous=user == null || user instanceof AnonymousAuthenticationToken;
  List<LoginFormInfo> loginforms=filterByAuth(getGeoServerApplication().getBeansOfType(LoginFormInfo.class));
  add(new ListView<LoginFormInfo>("loginforms",loginforms){
    public void populateItem(    ListItem<LoginFormInfo> item){
      LoginFormInfo info=item.getModelObject();
      WebMarkupContainer loginForm=new WebMarkupContainer("loginform"){
        protected void onComponentTag(        org.apache.wicket.markup.ComponentTag tag){
          String path=getRequest().getUrl().getPath();
          StringBuilder loginPath=new StringBuilder();
          if (path.isEmpty()) {
            loginPath.append("../" + info.getLoginPath());
          }
 else {
            String[] pathElements=path.split("/");
            for (            String pathElement : pathElements) {
              if (!pathElement.isEmpty()) {
                loginPath.append("../");
              }
            }
            loginPath.append(info.getLoginPath());
          }
          tag.put("action",loginPath);
        }
      }
;
      Image image;
      if (info.getIcon() != null) {
        image=new Image("link.icon",new PackageResourceReference(info.getComponentClass(),info.getIcon()));
      }
 else {
        image=new Image("link.icon",new PackageResourceReference(GeoServerBasePage.class,"img/icons/silk/door-in.png"));
      }
      loginForm.add(image);
      if (info.getTitleKey() != null && !info.getTitleKey().isEmpty()) {
        loginForm.add(new Label("link.label",new StringResourceModel(info.getTitleKey(),(Component)null,null)));
        image.add(AttributeModifier.replace("alt",new ParamResourceModel(info.getTitleKey(),null)));
      }
 else {
        loginForm.add(new Label("link.label",""));
      }
      LoginFormHTMLInclude include;
      if (info.getInclude() != null) {
        include=new LoginFormHTMLInclude("login.include",new PackageResourceReference(info.getComponentClass(),info.getInclude()));
      }
 else {
        include=new LoginFormHTMLInclude("login.include",new PackageResourceReference(GeoServerBasePage.class,""));
      }
      loginForm.add(include);
      item.add(loginForm);
      boolean filterInChain=false;
      for (      String filterName : securityFilters) {
        if (filterName.toLowerCase().contains(info.getName())) {
          filterInChain=true;
          break;
        }
      }
      loginForm.setVisible(anonymous && filterInChain);
    }
  }
);
  WebMarkupContainer loggedInAsForm=new WebMarkupContainer("loggedinasform");
  loggedInAsForm.add(new Label("loggedInUsername",anonymous ? "Nobody" : user.getName()));
  loggedInAsForm.setVisible(!anonymous);
  add(loggedInAsForm);
  List<LogoutFormInfo> logoutforms=filterByAuth(getGeoServerApplication().getBeansOfType(LogoutFormInfo.class));
  add(new ListView<LogoutFormInfo>("logoutforms",logoutforms){
    public void populateItem(    ListItem<LogoutFormInfo> item){
      LogoutFormInfo info=item.getModelObject();
      WebMarkupContainer logoutForm=new WebMarkupContainer("logoutform"){
        protected void onComponentTag(        org.apache.wicket.markup.ComponentTag tag){
          String path=getRequest().getUrl().getPath();
          StringBuilder logoutPath=new StringBuilder();
          if (path.isEmpty()) {
            logoutPath.append("../" + info.getLogoutPath());
          }
 else {
            String[] pathElements=path.split("/");
            for (            String pathElement : pathElements) {
              if (!pathElement.isEmpty()) {
                logoutPath.append("../");
              }
            }
            logoutPath.append(info.getLogoutPath());
          }
          tag.put("action",logoutPath);
        }
      }
;
      Image image;
      if (info.getIcon() != null) {
        image=new Image("link.icon",new PackageResourceReference(info.getComponentClass(),info.getIcon()));
      }
 else {
        image=new Image("link.icon",new PackageResourceReference(GeoServerBasePage.class,"img/icons/silk/door-out.png"));
      }
      logoutForm.add(image);
      if (info.getTitleKey() != null && !info.getTitleKey().isEmpty()) {
        logoutForm.add(new Label("link.label",new StringResourceModel(info.getTitleKey(),(Component)null,null)));
        image.add(AttributeModifier.replace("alt",new ParamResourceModel(info.getTitleKey(),null)));
      }
 else {
        logoutForm.add(new Label("link.label",""));
      }
      item.add(logoutForm);
      boolean filterInChain=false;
      for (      String filterName : securityFilters) {
        if (filterName.toLowerCase().contains(info.getName())) {
          filterInChain=true;
          break;
        }
      }
      logoutForm.setVisible(!anonymous && filterInChain);
    }
  }
);
  add(new BookmarkablePageLink("home",GeoServerHomePage.class).add(new Label("label",new StringResourceModel("home",(Component)null,null))));
  DeveloperToolbar devToolbar=new DeveloperToolbar("devButtons");
  add(devToolbar);
  devToolbar.setVisible(RuntimeConfigurationType.DEVELOPMENT.equals(getApplication().getConfigurationType()));
  final Map<Category,List<MenuPageInfo>> links=splitByCategory(filterByAuth(getGeoServerApplication().getBeansOfType(MenuPageInfo.class)));
  List<MenuPageInfo> standalone=links.containsKey(null) ? links.get(null) : new ArrayList<MenuPageInfo>();
  links.remove(null);
  List<Category> categories=new ArrayList<>(links.keySet());
  Collections.sort(categories);
  add(new ListView<Category>("category",categories){
    public void populateItem(    ListItem<Category> item){
      Category category=item.getModelObject();
      item.add(new Label("category.header",new StringResourceModel(category.getNameKey(),(Component)null,null)));
      item.add(new ListView<MenuPageInfo>("category.links",links.get(category)){
        public void populateItem(        ListItem<MenuPageInfo> item){
          MenuPageInfo info=item.getModelObject();
          BookmarkablePageLink<Page> link=new BookmarkablePageLink<>("link",info.getComponentClass());
          link.add(AttributeModifier.replace("title",new StringResourceModel(info.getDescriptionKey(),(Component)null,null)));
          link.add(new Label("link.label",new StringResourceModel(info.getTitleKey(),(Component)null,null)));
          Image image;
          if (info.getIcon() != null) {
            image=new Image("link.icon",new PackageResourceReference(info.getComponentClass(),info.getIcon()));
          }
 else {
            image=new Image("link.icon",new PackageResourceReference(GeoServerBasePage.class,"img/icons/silk/wrench.png"));
          }
          image.add(AttributeModifier.replace("alt",new ParamResourceModel(info.getTitleKey(),null)));
          link.add(image);
          item.add(link);
        }
      }
);
    }
  }
);
  add(new ListView<MenuPageInfo>("standalone",standalone){
    public void populateItem(    ListItem<MenuPageInfo> item){
      MenuPageInfo info=item.getModelObject();
      BookmarkablePageLink<Page> link=new BookmarkablePageLink<>("link",info.getComponentClass());
      link.add(AttributeModifier.replace("title",new StringResourceModel(info.getDescriptionKey(),(Component)null,null)));
      link.add(new Label("link.label",new StringResourceModel(info.getTitleKey(),(Component)null,null)));
      item.add(link);
    }
  }
);
  add(feedbackPanel=new FeedbackPanel("feedback"));
  feedbackPanel.setOutputMarkupId(true);
  add(new Image("ajaxFeedbackImage",new PackageResourceReference(GeoServerBasePage.class,"img/ajax-loader.gif")));
  add(new WebMarkupContainer(HEADER_PANEL));
  add(new Label("gbpTitle",new LoadableDetachableModel<String>(){
    @Override protected String load(){
      return getTitle();
    }
  }
));
  add(new Label("gbpDescription",new LoadableDetachableModel<String>(){
    @Override protected String load(){
      return getDescription();
    }
  }
));
  WebMarkupContainer container=new WebMarkupContainer("nodeIdContainer");
  add(container);
  String id=getNodeInfo().getId();
  Label label=new Label("nodeId",id);
  container.add(label);
  NODE_INFO.customize(container);
  if (id == null) {
    container.setVisible(false);
  }
}
