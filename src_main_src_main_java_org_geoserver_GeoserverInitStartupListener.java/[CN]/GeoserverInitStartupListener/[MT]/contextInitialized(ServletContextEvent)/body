{
  GeoTools.init((Hints)null);
  JAI.getDefaultInstance().setImagingListener(new ImagingListener(){
    final Logger LOGGER=Logging.getLogger("javax.media.jai");
    @Override public boolean errorOccurred(    String message,    Throwable thrown,    Object where,    boolean isRetryable) throws RuntimeException {
      if (isSerializableRenderedImageFinalization(where,thrown)) {
        LOGGER.log(Level.FINEST,message,thrown);
      }
 else       if (message.contains("Continuing in pure Java mode")) {
        LOGGER.log(Level.FINE,message,thrown);
      }
 else {
        LOGGER.log(Level.INFO,message,thrown);
      }
      return false;
    }
    private boolean isSerializableRenderedImageFinalization(    Object where,    Throwable t){
      if (!(where instanceof SerializableRenderedImage)) {
        return false;
      }
      StackTraceElement[] elements=t.getStackTrace();
      for (      StackTraceElement element : elements) {
        if (element.getMethodName().equals("finalize") && element.getClassName().endsWith("SerializableRenderedImage"))         return true;
      }
      return false;
    }
  }
);
  JAI jaiDef=JAI.getDefaultInstance();
  if (!(jaiDef.getOperationRegistry() instanceof ConcurrentOperationRegistry)) {
    jaiDef.setOperationRegistry(ConcurrentOperationRegistry.initializeRegistry());
  }
  if (!(jaiDef.getTileCache() instanceof ConcurrentTileCache)) {
    jaiDef.setTileCache(new ConcurrentTileCache());
  }
  String strValue=GeoServerExtensions.getProperty(LoggingUtils.RELINQUISH_LOG4J_CONTROL,sce.getServletContext());
  relinquishLoggingControl=Boolean.valueOf(strValue);
  if (System.getProperty("org.geotools.referencing.forceXY") == null) {
    System.setProperty("org.geotools.referencing.forceXY","true");
  }
  if (Boolean.TRUE.equals(Hints.getSystemDefault(Hints.FORCE_LONGITUDE_FIRST_AXIS_ORDER))) {
    Hints.putSystemDefault(Hints.FORCE_AXIS_ORDER_HONORING,"http");
  }
  Hints.putSystemDefault(Hints.LENIENT_DATUM_SHIFT,true);
  String comparisonToleranceProperty=GeoServerExtensions.getProperty(COMPARISON_TOLERANCE_PROPERTY);
  double comparisonTolerance=DEFAULT_COMPARISON_TOLERANCE;
  if (comparisonToleranceProperty != null) {
    try {
      comparisonTolerance=Double.parseDouble(comparisonToleranceProperty);
    }
 catch (    NumberFormatException nfe) {
      if (LOGGER.isLoggable(Level.WARNING)) {
        LOGGER.warning("Unable to parse the specified COMPARISON_TOLERANCE " + "system property: " + comparisonToleranceProperty + " which should be a number. Using Default: "+ DEFAULT_COMPARISON_TOLERANCE);
      }
    }
  }
  Hints.putSystemDefault(Hints.COMPARISON_TOLERANCE,comparisonTolerance);
  final Hints defHints=GeoTools.getDefaultHints();
  Hints.putSystemDefault(Hints.GRID_COVERAGE_FACTORY,CoverageFactoryFinder.getGridCoverageFactory(defHints));
  System.setProperty("org.geotools.epsg.factory.timeout","-1");
  System.setProperty("java.util.prefs.syncInterval","5000000");
  ImageIO.scanForPlugins();
  ImageIOExt.allowNativeCodec("png",ImageReaderSpi.class,false);
  ImageIOExt.allowNativeCodec("png",ImageWriterSpi.class,true);
  Hints.putSystemDefault(Hints.FILTER_FACTORY,CommonFactoryFinder.getFilterFactory2(null));
  Hints.putSystemDefault(Hints.STYLE_FACTORY,CommonFactoryFinder.getStyleFactory(null));
  Hints.putSystemDefault(Hints.FEATURE_FACTORY,CommonFactoryFinder.getFeatureFactory(null));
  final ThreadPoolExecutor executor=new ThreadPoolExecutor(CoverageAccessInfoImpl.DEFAULT_CorePoolSize,CoverageAccessInfoImpl.DEFAULT_MaxPoolSize,CoverageAccessInfoImpl.DEFAULT_KeepAliveTime,TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>());
  Hints.putSystemDefault(Hints.EXECUTOR_SERVICE,executor);
}
