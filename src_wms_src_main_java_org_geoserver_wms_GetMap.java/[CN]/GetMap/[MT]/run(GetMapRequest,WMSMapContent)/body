{
  assertMandatory(request);
  final String outputFormat=request.getFormat();
  GetMapOutputFormat delegate=getDelegate(outputFormat);
  final boolean isTiled=MetatileMapOutputFormat.isRequestTiled(request,delegate);
  final MapProducerCapabilities cap=delegate.getCapabilities(request.getFormat());
  if (cap != null && !cap.isTiledRequestsSupported() && isTiled) {
    throw new ServiceException("Format " + request.getFormat() + " does not support tiled requests");
  }
  if (MetatileMapOutputFormat.isRequestTiled(request,delegate)) {
    if (LOGGER.isLoggable(Level.FINER)) {
      LOGGER.finer("Tiled request detected, activating on the fly meta tiler");
    }
    delegate=new MetatileMapOutputFormat(request,(RenderedImageMapOutputFormat)delegate);
  }
  final boolean isMultivaluedSupported=(cap != null ? cap.isMultivalueRequestsSupported() : false);
  List<Object> times=request.getTime();
  final int numTimes=times.size();
  boolean singleTimeRange=numTimes == 1 && times.get(0) instanceof DateRange;
  List<Object> elevations=request.getElevation();
  final int numElevations=elevations.size();
  boolean singleElevationRange=numElevations == 1 && elevations.get(0) instanceof NumberRange;
  MaxAnimationTimeHelper maxAnimationTimeHelper=new MaxAnimationTimeHelper(wms,request);
  int maxAllowedFrames=wms.getMaxAllowedFrames();
  if ((numTimes > 1 || singleTimeRange) && isMultivaluedSupported) {
    WebMap map=null;
    List<RenderedImage> images=new ArrayList<RenderedImage>();
    if (singleTimeRange) {
      List<Object> expandTimeList=expandTimeList((DateRange)times.get(0),request,maxAllowedFrames);
      if (expandTimeList.size() == 0) {
        return executeInternal(mapContent,request,delegate,Arrays.asList(times.get(0)),elevations);
      }
 else {
        times=expandTimeList;
      }
    }
    for (    Object currentTime : times) {
      maxAnimationTimeHelper.checkTimeout();
      map=executeInternal(mapContent,request,delegate,Arrays.asList(currentTime),elevations);
      mapContent.layers().clear();
      images.add(((RenderedImageMap)map).getImage());
    }
    RenderedImageList imageList=new RenderedImageList(images);
    return new RenderedImageMap(mapContent,imageList,map.getMimeType());
  }
 else   if ((numElevations > 1 || singleElevationRange) && isMultivaluedSupported) {
    WebMap map=null;
    List<RenderedImage> images=new ArrayList<RenderedImage>();
    if (singleElevationRange) {
      List<Object> expandElevationList=expandElevationList((NumberRange)elevations.get(0),request,maxAllowedFrames);
      if (expandElevationList.size() == 0) {
        map=executeInternal(mapContent,request,delegate,times,Arrays.asList(elevations.get(0)));
      }
 else {
        elevations=expandElevationList;
      }
    }
    for (    Object currentElevation : elevations) {
      maxAnimationTimeHelper.checkTimeout();
      map=executeInternal(mapContent,request,delegate,times,Arrays.asList(currentElevation));
      mapContent.layers().clear();
      images.add(((RenderedImageMap)map).getImage());
    }
    RenderedImageList imageList=new RenderedImageList(images);
    return new RenderedImageMap(mapContent,imageList,map.getMimeType());
  }
 else {
    return executeInternal(mapContent,request,delegate,times,elevations);
  }
}
