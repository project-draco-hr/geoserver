{
  final Envelope envelope=request.getBbox();
  final List<MapLayerInfo> layers=request.getLayers();
  final List<Map<String,String>> viewParams=request.getViewParams();
  final Style[] styles=request.getStyles().toArray(new Style[]{});
  final Filter[] filters=buildLayersFilters(request.getFilter(),layers);
  final CoordinateReferenceSystem mapcrs=request.getCrs();
  if (mapcrs != null) {
    mapContent.getViewport().setBounds(new ReferencedEnvelope(envelope,mapcrs));
  }
 else {
    mapContent.getViewport().setBounds(new ReferencedEnvelope(envelope,DefaultGeographicCRS.WGS84));
  }
  mapContent.setMapWidth(request.getWidth());
  mapContent.setMapHeight(request.getHeight());
  mapContent.setAngle(request.getAngle());
  mapContent.setBgColor(request.getBgColor());
  mapContent.setTransparent(request.isTransparent());
  mapContent.setBuffer(request.getBuffer());
  mapContent.setPalette(request.getPalette());
  if ((request.getWidth() <= 0) || (request.getHeight() <= 0) || (mapContent.getRenderingArea().getSpan(0) <= 0)|| (mapContent.getRenderingArea().getSpan(1) <= 0)) {
    if (LOGGER.isLoggable(Level.FINE)) {
      LOGGER.fine("We are not going to render anything because either the area is null or the dimensions are not positive.");
    }
    return null;
  }
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.fine("setting up map");
  }
  fireMapContentInit(mapContent);
  boolean cachingPossible=request.isGet();
  final String featureVersion=request.getFeatureVersion();
  int maxAge=Integer.MAX_VALUE;
  for (int i=0; i < layers.size(); i++) {
    final MapLayerInfo mapLayerInfo=layers.get(i);
    cachingPossible&=mapLayerInfo.isCachingEnabled();
    if (cachingPossible) {
      maxAge=Math.min(maxAge,mapLayerInfo.getCacheMaxAge());
    }
 else {
      cachingPossible=false;
    }
    final Style layerStyle=styles[i];
    final Filter layerFilter=SimplifyingFilterVisitor.simplify(filters[i]);
    final org.geotools.map.Layer layer;
    int layerType=mapLayerInfo.getType();
    if (layerType == MapLayerInfo.TYPE_REMOTE_VECTOR) {
      final SimpleFeatureSource source=mapLayerInfo.getRemoteFeatureSource();
      FeatureLayer featureLayer=new FeatureLayer(source,layerStyle);
      featureLayer.setTitle(mapLayerInfo.getRemoteFeatureSource().getSchema().getTypeName());
      final Query definitionQuery=new Query(source.getSchema().getTypeName());
      definitionQuery.setFilter(layerFilter);
      definitionQuery.setVersion(featureVersion);
      int maxFeatures=request.getMaxFeatures() != null ? request.getMaxFeatures() : Integer.MAX_VALUE;
      definitionQuery.setMaxFeatures(maxFeatures);
      featureLayer.setQuery(definitionQuery);
      mapContent.addLayer(featureLayer);
      layer=featureLayer;
    }
 else     if (layerType == MapLayerInfo.TYPE_VECTOR) {
      FeatureSource<? extends FeatureType,? extends Feature> source;
      try {
        source=mapLayerInfo.getFeatureSource(true);
      }
 catch (      IOException exp) {
        if (LOGGER.isLoggable(Level.SEVERE)) {
          LOGGER.log(Level.SEVERE,new StringBuffer("Getting feature source: ").append(exp.getMessage()).toString(),exp);
        }
        throw new ServiceException("Internal error",exp);
      }
      FeatureLayer featureLayer=new FeatureLayer(source,layerStyle);
      featureLayer.setTitle(mapLayerInfo.getFeature().prefixedName());
      featureLayer.getUserData().put("abstract",mapLayerInfo.getDescription());
      Filter dimensionFilter=wms.getTimeElevationToFilter(times,elevations,mapLayerInfo.getFeature());
      Filter filter=Filters.and(ff,layerFilter,dimensionFilter);
      final Query definitionQuery=new Query(source.getSchema().getName().getLocalPart());
      definitionQuery.setVersion(featureVersion);
      definitionQuery.setFilter(filter);
      if (viewParams != null) {
        definitionQuery.setHints(new Hints(Hints.VIRTUAL_TABLE_PARAMETERS,viewParams.get(i)));
      }
      final Integer startIndex=request.getStartIndex();
      if (startIndex != null) {
        QueryCapabilities queryCapabilities=source.getQueryCapabilities();
        if (queryCapabilities.isOffsetSupported()) {
          definitionQuery.setStartIndex(startIndex);
        }
 else {
          throw new ServiceException("startIndex is not supported for the " + mapLayerInfo.getName() + " layer");
        }
      }
      int maxFeatures=request.getMaxFeatures() != null ? request.getMaxFeatures() : Integer.MAX_VALUE;
      definitionQuery.setMaxFeatures(maxFeatures);
      featureLayer.setQuery(definitionQuery);
      mapContent.addLayer(featureLayer);
      layer=featureLayer;
    }
 else     if (layerType == MapLayerInfo.TYPE_RASTER) {
      final AbstractGridCoverage2DReader reader=(AbstractGridCoverage2DReader)mapLayerInfo.getCoverageReader();
      if (reader != null) {
        GeneralParameterValue[] readParameters=wms.getWMSReadParameters(request,mapLayerInfo,layerFilter,times,elevations,reader,false);
        try {
          try {
            layer=new CachedGridReaderLayer(reader,layerStyle,readParameters);
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
          layer.setTitle(mapLayerInfo.getCoverage().prefixedName());
          mapContent.addLayer(layer);
        }
 catch (        IllegalArgumentException e) {
          if (LOGGER.isLoggable(Level.SEVERE)) {
            LOGGER.log(Level.SEVERE,new StringBuilder("Wrapping GC in feature source: ").append(e.getLocalizedMessage()).toString(),e);
          }
          throw new ServiceException("Internal error : unable to get reader for this coverage layer " + mapLayerInfo);
        }
      }
 else {
        throw new ServiceException(new StringBuffer("Internal error : unable to get reader for this coverage layer ").append(mapLayerInfo.toString()).toString());
      }
    }
 else     if (layerType == MapLayerInfo.TYPE_WMS) {
      WMSLayerInfo wmsLayer=(WMSLayerInfo)mapLayerInfo.getResource();
      WebMapServer wms=wmsLayer.getStore().getWebMapServer(null);
      Layer gt2Layer=wmsLayer.getWMSLayer(null);
      boolean merged=false;
      if (mapContent.layers().size() > 0) {
        org.geotools.map.Layer lastLayer=mapContent.layers().get(mapContent.layers().size() - 1);
        if (lastLayer instanceof WMSLayer) {
          WMSLayer lastWMS=(WMSLayer)lastLayer;
          WebMapServer otherWMS=lastWMS.getWebMapServer();
          if (otherWMS.equals(wms)) {
            lastWMS.addLayer(gt2Layer);
            merged=true;
          }
        }
      }
      if (!merged) {
        WMSLayer Layer=new WMSLayer(wms,gt2Layer);
        Layer.setTitle(wmsLayer.prefixedName());
        mapContent.addLayer(Layer);
      }
    }
 else {
      throw new IllegalArgumentException("Unkown layer type " + layerType);
    }
  }
  EnvFunction.setLocalValue("wms_bbox",mapContent.getRenderingArea());
  EnvFunction.setLocalValue("wms_crs",mapContent.getRenderingArea().getCoordinateReferenceSystem());
  EnvFunction.setLocalValue("wms_srs",mapContent.getRequest().getSRS());
  EnvFunction.setLocalValue("wms_width",mapContent.getMapWidth());
  EnvFunction.setLocalValue("wms_height",mapContent.getMapHeight());
  try {
    double scaleDenominator=RendererUtilities.calculateOGCScale(mapContent.getRenderingArea(),mapContent.getMapWidth(),null);
    EnvFunction.setLocalValue("wms_scale_denominator",scaleDenominator);
  }
 catch (  Exception e) {
    LOGGER.log(Level.SEVERE,"Failed to compute the scale denominator, wms_scale_denominator env variable is unset",e);
  }
  setupRenderingBuffer(mapContent,layers);
  mapContent=fireBeforeRender(mapContent);
  WebMap map=delegate.produceMap(mapContent);
  if (cachingPossible) {
    map.setResponseHeader("Cache-Control","max-age=" + maxAge + ", must-revalidate");
    final GregorianCalendar calendar=new GregorianCalendar(TimeZone.getTimeZone("GMT"));
    calendar.add(Calendar.SECOND,maxAge);
    DateFormat format=new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss z");
    format.setTimeZone(TimeZone.getTimeZone("GMT"));
    map.setResponseHeader("Expires",format.format(calendar.getTime()));
  }
  return map;
}
