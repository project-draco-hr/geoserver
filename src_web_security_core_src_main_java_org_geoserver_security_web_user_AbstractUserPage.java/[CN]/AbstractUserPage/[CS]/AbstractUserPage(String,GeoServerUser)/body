{
  this.ugServiceName=ugServiceName;
  GeoServerUserGroupService ugService=getUserGroupService(ugServiceName);
  boolean emptyPasswd=getSecurityManager().loadPasswordEncoder(ugService.getPasswordEncoderName()) instanceof GeoServerEmptyPasswordEncoder;
  boolean hasUserGroupStore=ugService.canCreateStore();
  boolean hasRoleStore=hasRoleStore(getSecurityManager().getActiveRoleService().getName());
  Form form=new Form<Serializable>("form",new CompoundPropertyModel(user));
  add(form);
  form.add(new TextField("username").setEnabled(hasUserGroupStore));
  form.add(new CheckBox("enabled").setEnabled(hasUserGroupStore));
  PasswordTextField pw1=new PasswordTextField("password"){
    @Override public boolean isRequired(){
      return isFinalSubmit(this);
    }
  }
;
  form.add(pw1);
  pw1.setResetPassword(false);
  pw1.setEnabled(hasUserGroupStore && !emptyPasswd);
  PasswordTextField pw2=new PasswordTextField("confirmPassword",new Model(user.getPassword())){
    @Override public boolean isRequired(){
      return isFinalSubmit(this);
    }
  }
;
  form.add(pw2);
  pw2.setResetPassword(false);
  pw2.setEnabled(hasUserGroupStore && !emptyPasswd);
  form.add(new PropertyEditorFormComponent("properties").setEnabled(hasUserGroupStore));
  form.add(userGroupPalette=new UserGroupPaletteFormComponent("groups",ugServiceName,user));
  userGroupPalette.add(new AjaxFormComponentUpdatingBehavior("change"){
    @Override protected void onUpdate(    AjaxRequestTarget target){
      updateCalculatedRoles(target);
    }
  }
);
  userGroupPalette.setEnabled(hasUserGroupStore);
  List<GeoServerRole> roles;
  try {
    roles=new ArrayList(getSecurityManager().getActiveRoleService().getRolesForUser(user.getUsername()));
  }
 catch (  IOException e) {
    throw new WicketRuntimeException(e);
  }
  form.add(rolePalette=new RolePaletteFormComponent("roles",new ListModel(roles)));
  rolePalette.add(new AjaxFormComponentUpdatingBehavior("change"){
    @Override protected void onUpdate(    AjaxRequestTarget target){
      updateCalculatedRoles(target);
      updateGroupAdminList(target);
    }
  }
);
  rolePalette.setOutputMarkupId(true);
  rolePalette.setEnabled(hasRoleStore);
  boolean isGroupAdmin=roles.contains(GeoServerRole.GROUP_ADMIN_ROLE);
  List<GeoServerUserGroup> adminGroups=new ArrayList();
  if (isGroupAdmin) {
    for (    String groupName : GroupAdminProperty.get(user.getProperties())) {
      try {
        adminGroups.add(ugService.getGroupByGroupname(groupName));
      }
 catch (      IOException e) {
        throw new WicketRuntimeException(e);
      }
    }
  }
  form.add(adminGroupChoice=new UserGroupListMultipleChoice("adminGroups",new ListModel(adminGroups),new GroupsModel(ugServiceName)));
  adminGroupChoice.setOutputMarkupId(true);
  adminGroupChoice.setEnabled(hasUserGroupStore && isGroupAdmin);
  WebMarkupContainer container=new WebMarkupContainer("calculatedRolesContainer");
  form.add(container);
  container.setOutputMarkupId(true);
  container.add(calculatedRoles=new ListView<GeoServerRole>("calculatedRoles",new CalculatedRoleModel(user)){
    @Override @SuppressWarnings("unchecked") protected void populateItem(    ListItem<GeoServerRole> item){
      IModel<GeoServerRole> model=item.getModel();
      item.add(new SimpleAjaxLink("role",model,RoleListProvider.ROLENAME.getModel(model)){
        @Override protected void onClick(        AjaxRequestTarget target){
          setResponsePage(new EditRolePage(getSecurityManager().getActiveRoleService().getName(),(GeoServerRole)getDefaultModelObject()).setReturnPage(this.getPage()));
        }
      }
);
    }
  }
);
  calculatedRoles.setOutputMarkupId(true);
  form.add(new SubmitLink("save"){
    @Override public void onSubmit(){
      try {
        if (adminGroupChoice.isEnabled()) {
          Collection<GeoServerUserGroup> groups=adminGroupChoice.getModelObject();
          String[] groupNames=new String[groups.size()];
          int i=0;
          for (          GeoServerUserGroup group : groups) {
            groupNames[i++]=group.getGroupname();
          }
          GroupAdminProperty.set(user.getProperties(),groupNames);
        }
 else {
          GroupAdminProperty.del(user.getProperties());
        }
        onFormSubmit(user);
        setReturnPageDirtyAndReturn(true);
      }
 catch (      Exception e) {
        handleSubmitError(e);
      }
    }
  }
.setEnabled(hasUserGroupStore || hasRoleStore(getSecurityManager().getActiveRoleService().getName())));
  form.add(getCancelLink());
  form.add(new EqualInputValidator(pw1,pw2){
    private static final long serialVersionUID=1L;
    @Override public void validate(    Form<?> form){
      if (isFinalSubmit(form)) {
        super.validate(form);
      }
    }
    @Override protected String resourceKey(){
      return "AbstractUserPage.passwordMismatch";
    }
  }
);
  form.add(new GroupAdminValidator());
}
