{
  if (rangeSubset == null)   return;
  for (int a=0; a < rangeSubset.getAxisSubset().size(); a++) {
    AxisSubsetType axisSubset=(AxisSubsetType)rangeSubset.getAxisSubset().get(a);
    if (axisSubset.getName().equalsIgnoreCase("Band")) {
      int[] bands=null;
      if (axisSubset.getSingleValue().size() > 0) {
        bands=new int[1];
        bands[0]=Integer.parseInt(((TypedLiteralType)axisSubset.getSingleValue().get(0)).getValue());
      }
 else       if (axisSubset.getInterval().size() > 0) {
        IntervalType interval=(IntervalType)axisSubset.getInterval().get(0);
        int min=Integer.parseInt(interval.getMin().getValue());
        int max=Integer.parseInt(interval.getMax().getValue());
        int res=(interval.getRes() != null ? Integer.parseInt(interval.getRes().getValue()) : 1);
        bands=new int[(max - min) / res];
        for (int b=0; b < bands.length; b++)         bands[b]=min + (b * res);
      }
      if (bands == null)       throw new WcsException("Invalid values for axis " + axisSubset.getName(),InvalidParameterValue,"AxisSubset");
    }
 else     if (axisSubset.getName().equalsIgnoreCase(WCSUtils.ELEVATION)) {
      double[] elevations=null;
      if (axisSubset.getSingleValue().size() > 0) {
        elevations=new double[axisSubset.getSingleValue().size()];
        for (int s=0; s < axisSubset.getSingleValue().size(); s++) {
          elevations[s]=Double.parseDouble(((TypedLiteralType)axisSubset.getSingleValue().get(s)).getValue());
        }
      }
 else       if (axisSubset.getInterval().size() > 0) {
        IntervalType interval=(IntervalType)axisSubset.getInterval().get(0);
        int min=Integer.parseInt(interval.getMin().getValue());
        int max=Integer.parseInt(interval.getMax().getValue());
        int res=(interval.getRes() != null ? Integer.parseInt(interval.getRes().getValue()) : 1);
        elevations=new double[(int)(Math.floor(max - min) / res + 1)];
        for (int b=0; b < elevations.length; b++)         elevations[b]=(min + b * res);
      }
    }
  }
}
