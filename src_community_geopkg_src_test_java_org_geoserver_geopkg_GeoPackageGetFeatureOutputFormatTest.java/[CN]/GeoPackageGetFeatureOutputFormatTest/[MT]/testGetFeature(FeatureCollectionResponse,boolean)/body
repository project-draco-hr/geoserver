{
  ByteArrayOutputStream os=new ByteArrayOutputStream();
  format.write(fct,os,op);
  GeoPackage geopkg=createGeoPackage(os.toByteArray());
  for (  FeatureCollection collection : fct.getFeatures()) {
    FeatureEntry e=new FeatureEntry();
    e.setTableName(collection.getSchema().getName().getLocalPart());
    e.setGeometryColumn(collection.getSchema().getGeometryDescriptor().getName().getLocalPart());
    SimpleFeatureReader reader=geopkg.reader(e,null,null);
    SimpleFeatureCollection sCollection=(SimpleFeatureCollection)collection;
    assertEquals(indexed,geopkg.hasSpatialIndex(e));
    SimpleFeatureType type1=reader.getFeatureType();
    SimpleFeatureType type2=sCollection.getSchema();
    assertEquals(type1.getDescriptors().size(),type2.getDescriptors().size());
    for (int i=0; i < type1.getDescriptors().size(); i++) {
      assertEquals(type1.getDescriptor(i).getName(),type2.getDescriptor(i).getName());
      assertEquals(type1.getDescriptor(i).getType(),type2.getDescriptor(i).getType());
    }
    MemoryFeatureCollection memCollection=new MemoryFeatureCollection(type2);
    while (reader.hasNext()) {
      memCollection.add(reader.next());
    }
    assertEquals(sCollection.size(),memCollection.size());
    SimpleFeatureIterator it=sCollection.features();
    while (it.hasNext()) {
      SimpleFeature sf=it.next();
      for (int i=0; i < type1.getDescriptors().size(); i++) {
        assertTrue(findFeatureAttribute(memCollection,i,sf.getAttribute(i)));
      }
    }
    reader.close();
  }
  geopkg.close();
}
