{
  FeatureTypeInfo ftInfo=getCatalog().getFeatureTypeByName("gsml","MappedFeature");
  FeatureSource fs=ftInfo.getFeatureSource(new NullProgressListener(),null);
  AppSchemaDataAccess da=(AppSchemaDataAccess)fs.getDataStore();
  FeatureTypeMapping rootMapping=da.getMappingByNameOrElement(ftInfo.getQualifiedName());
  assumeTrue(shouldTestNestedFiltersEncoding(rootMapping));
  JDBCDataStore store=(JDBCDataStore)rootMapping.getSource().getDataStore();
  NestedFilterToSQL nestedFilterToSQL=createNestedFilterEncoder(rootMapping);
  FilterFactoryImplNamespaceAware ff=new FilterFactoryImplNamespaceAware();
  ff.setNamepaceContext(rootMapping.getNamespaces());
  And and=ff.and(ff.equals(ff.property("gsml:specification/gsml:GeologicUnit/gml:name"),ff.literal("New Group")),ff.equals(ff.property("gsml:specification/gsml:GeologicUnit/gsml:composition/gsml:CompositionPart/gsml:proportion/gsml:CGI_TermValue/gsml:value"),ff.literal("significant")));
  ComplexFilterSplitter splitter=new ComplexFilterSplitter(store.getFilterCapabilities(),rootMapping);
  splitter.visit(and,null);
  Filter preFilter=splitter.getFilterPre();
  Filter postFilter=splitter.getFilterPost();
  assertEquals(and,preFilter);
  assertEquals(Filter.INCLUDE,postFilter);
  Filter unrolled=AppSchemaDataAccess.unrollFilter(and,rootMapping);
  assertTrue(NestedFilterToSQL.isNestedFilter(unrolled));
  String encodedFilter=nestedFilterToSQL.encodeToString(unrolled);
  assertTrue(encodedFilter.matches("^\\(EXISTS.*AND EXISTS.*\\)$"));
  assertContainsFeatures(fs.getFeatures(and),"mf4");
  PropertyIsLike like=ff.like(ff.property("gsml:specification/gsml:GeologicUnit/gml:description"),"*sedimentary*");
  ComplexFilterSplitter splitterLike=new ComplexFilterSplitter(store.getFilterCapabilities(),rootMapping);
  splitterLike.visit(like,null);
  preFilter=splitterLike.getFilterPre();
  postFilter=splitterLike.getFilterPost();
  assertEquals(like,preFilter);
  assertEquals(Filter.INCLUDE,postFilter);
  unrolled=AppSchemaDataAccess.unrollFilter(like,rootMapping);
  assertTrue(NestedFilterToSQL.isNestedFilter(unrolled));
  encodedFilter=nestedFilterToSQL.encodeToString(unrolled);
  assertTrue(encodedFilter.contains("EXISTS"));
  assertContainsFeatures(fs.getFeatures(like),"mf1","mf2","mf3");
}
