{
  Document doc=getAsDOM("wfs?request=DescribeFeatureType&version=1.1.0");
  LOGGER.info("WFS DescribeFeatureType response:\n" + prettyString(doc));
  assertEquals("xsd:schema",doc.getDocumentElement().getNodeName());
  String targetNamespace=evaluate("//@targetNamespace",doc);
  assertFalse(targetNamespace.isEmpty());
  int numberOfImports=getMatchingNodes("//xsd:import",doc).getLength();
  int numberOfIncludes=getMatchingNodes("//xsd:include",doc).getLength();
  ArrayList<String> namespaces=new ArrayList<String>();
  namespaces.add(AbstractAppSchemaMockData.GSML_URI);
  namespaces.add(FeatureChainingMockData.OM_URI);
  namespaces.add(FeatureChainingMockData.EX_URI);
  if (targetNamespace.equals(FeatureChainingMockData.EX_URI)) {
    assertEquals(2,numberOfImports);
    assertEquals(2,numberOfIncludes);
    String schemaLocation="//xsd:include[" + 1 + "]/@schemaLocation";
    String firstLoc=evaluate(schemaLocation,doc);
    assertTrue(firstLoc.equals(getExSchemaOneLocation()) || firstLoc.equals(getExSchemaTwoLocation()));
    schemaLocation="//xsd:include[" + 2 + "]/@schemaLocation";
    String secondLoc=evaluate(schemaLocation,doc);
    assertTrue(secondLoc.equals(getExSchemaOneLocation()) || secondLoc.equals(getExSchemaTwoLocation()));
    assertFalse(secondLoc.equals(firstLoc));
    namespaces.remove(FeatureChainingMockData.EX_URI);
  }
 else {
    assertEquals(2,numberOfImports);
    assertEquals(1,numberOfIncludes);
    String schemaLocation="//xsd:include[" + 1 + "]/@schemaLocation";
    if (targetNamespace.equals(AbstractAppSchemaMockData.GSML_URI)) {
      assertXpathEvaluatesTo(AbstractAppSchemaMockData.GSML_SCHEMA_LOCATION_URL,schemaLocation,doc);
      namespaces.remove(AbstractAppSchemaMockData.GSML_URI);
    }
 else {
      assertEquals(FeatureChainingMockData.OM_URI,targetNamespace);
      assertXpathEvaluatesTo(FeatureChainingMockData.OM_SCHEMA_LOCATION_URL,schemaLocation,doc);
      namespaces.remove(FeatureChainingMockData.OM_URI);
    }
  }
  for (int i=1; i <= numberOfImports; i++) {
    String namespace=evaluate("//xsd:import[" + i + "]/@namespace",doc);
    String schemaLocation="//xsd:import[" + i + "]/@schemaLocation";
    if (namespace.equals(AbstractAppSchemaMockData.GSML_URI)) {
      assertXpathEvaluatesTo(AbstractAppSchemaMockData.GSML_SCHEMA_LOCATION_URL,schemaLocation,doc);
      namespaces.remove(AbstractAppSchemaMockData.GSML_URI);
    }
 else     if (namespace.equals(FeatureChainingMockData.EX_URI)) {
      String loc=evaluate(schemaLocation,doc);
      assertTrue(loc.equals(getExSchemaOneLocation()) || loc.equals(getExSchemaTwoLocation()));
      namespaces.remove(FeatureChainingMockData.EX_URI);
    }
 else {
      assertEquals(FeatureChainingMockData.OM_URI,namespace);
      assertXpathEvaluatesTo(FeatureChainingMockData.OM_SCHEMA_LOCATION_URL,schemaLocation,doc);
      namespaces.remove(FeatureChainingMockData.OM_URI);
    }
  }
  assertTrue(namespaces.isEmpty());
  assertXpathCount(0,"//xsd:complexType",doc);
  assertXpathCount(0,"//xsd:element",doc);
}
