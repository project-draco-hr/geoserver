{
  JSONArray array=JSONArray.fromObject(output);
  assertEquals(1,array.size());
  JSONObject description=array.getJSONObject(0);
  basicSchemaChecks(description,MockData.PRIMITIVEGEOFEATURE);
  JSONObject topProperties=description.getJSONObject("properties");
  assertEquals("Polygon",topProperties.getJSONObject("geometry").get("type"));
  JSONObject props=topProperties.getJSONObject("properties").getJSONObject("properties");
  assertEquals("string",props.getJSONObject("description").get("type"));
  assertEquals(new Integer(0),props.getJSONObject("description").get("minimum"));
  assertEquals("Point",props.getJSONObject("pointProperty").get("type"));
  assertEquals(new Integer(0),props.getJSONObject("pointProperty").get("minimum"));
  assertEquals("integer",props.getJSONObject("intProperty").get("type"));
  assertEquals(new Integer(0),props.getJSONObject("intProperty").get("minimum"));
  assertEquals("string",props.getJSONObject("dateTimeProperty").get("type"));
  assertEquals(new Integer(0),props.getJSONObject("dateTimeProperty").get("minimum"));
  assertEquals("date-time",props.getJSONObject("dateTimeProperty").get("format"));
  assertEquals("string",props.getJSONObject("dateProperty").get("type"));
  assertEquals(new Integer(0),props.getJSONObject("dateProperty").get("minimum"));
  assertEquals("date",props.getJSONObject("dateProperty").get("format"));
  assertEquals("boolean",props.getJSONObject("booleanProperty").get("type"));
  assertEquals(new Integer(0),props.getJSONObject("dateProperty").get("minimum"));
}
