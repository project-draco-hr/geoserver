{
  JSONObject description=JSONObject.fromObject(output);
  assertEquals(description.get("elementFormDefault"),"qualified");
  assertEquals(description.get("targetNamespace"),"http://cite.opengeospatial.org/gmlsf");
  assertEquals(description.get("targetPrefix"),"sf");
  JSONArray array=description.getJSONArray("featureTypes");
  assertEquals(1,array.size());
  JSONObject feature=array.getJSONObject(0);
  assertEquals(feature.get("typeName"),"PrimitiveGeoFeature");
  JSONArray props=feature.getJSONArray("properties");
  assertNotNull(props);
  int i=0;
  assertEquals("description",props.getJSONObject(i).get("name"));
  assertEquals(new Integer(0),props.getJSONObject(i).get("minOccurs"));
  assertEquals(new Integer(1),props.getJSONObject(i).get("maxOccurs"));
  assertEquals(true,props.getJSONObject(i).get("nillable"));
  assertEquals("xsd:string",props.getJSONObject(i).get("type"));
  assertEquals("string",props.getJSONObject(i).get("localType"));
  ++i;
  assertEquals("name",props.getJSONObject(i).get("name"));
  assertEquals(new Integer(0),props.getJSONObject(i).get("minOccurs"));
  assertEquals(new Integer(1),props.getJSONObject(i).get("maxOccurs"));
  assertEquals(true,props.getJSONObject(i).get("nillable"));
  assertEquals("xsd:string",props.getJSONObject(i).get("type"));
  assertEquals("string",props.getJSONObject(i).get("localType"));
  ++i;
  assertEquals("surfaceProperty",props.getJSONObject(i).get("name"));
  assertEquals(new Integer(0),props.getJSONObject(i).get("minOccurs"));
  assertEquals(new Integer(1),props.getJSONObject(i).get("maxOccurs"));
  assertEquals(true,props.getJSONObject(i).get("nillable"));
  assertEquals("gml:Polygon",props.getJSONObject(i).get("type"));
  assertEquals("Polygon",props.getJSONObject(i).get("localType"));
  ++i;
  assertEquals("pointProperty",props.getJSONObject(i).get("name"));
  assertEquals(new Integer(0),props.getJSONObject(i).get("minOccurs"));
  assertEquals(new Integer(1),props.getJSONObject(i).get("maxOccurs"));
  assertEquals(true,props.getJSONObject(i).get("nillable"));
  assertEquals("xsd:Point",props.getJSONObject(i).get("type"));
  assertEquals("Point",props.getJSONObject(i).get("localType"));
  ++i;
  assertEquals("curveProperty",props.getJSONObject(i).get("name"));
  assertEquals(new Integer(0),props.getJSONObject(i).get("minOccurs"));
  assertEquals(new Integer(1),props.getJSONObject(i).get("maxOccurs"));
  assertEquals(true,props.getJSONObject(i).get("nillable"));
  assertEquals("xsd:LineString",props.getJSONObject(i).get("type"));
  assertEquals("LineString",props.getJSONObject(i).get("localType"));
  ++i;
  assertEquals("intProperty",props.getJSONObject(i).get("name"));
  assertEquals(new Integer(0),props.getJSONObject(i).get("minOccurs"));
  assertEquals(new Integer(1),props.getJSONObject(i).get("maxOccurs"));
  assertEquals(true,props.getJSONObject(i).get("nillable"));
  assertEquals("xsd:int",props.getJSONObject(i).get("type"));
  assertEquals("int",props.getJSONObject(i).get("localType"));
  ++i;
  assertEquals("uriProperty",props.getJSONObject(i).get("name"));
  assertEquals(new Integer(0),props.getJSONObject(i).get("minOccurs"));
  assertEquals(new Integer(1),props.getJSONObject(i).get("maxOccurs"));
  assertEquals(true,props.getJSONObject(i).get("nillable"));
  assertEquals("xsd:string",props.getJSONObject(i).get("type"));
  assertEquals("string",props.getJSONObject(i).get("localType"));
  ++i;
  assertEquals("measurand",props.getJSONObject(i).get("name"));
  assertEquals(new Integer(0),props.getJSONObject(i).get("minOccurs"));
  assertEquals(new Integer(1),props.getJSONObject(i).get("maxOccurs"));
  assertEquals(true,props.getJSONObject(i).get("nillable"));
  assertEquals("xsd:string",props.getJSONObject(i).get("type"));
  assertEquals("string",props.getJSONObject(i).get("localType"));
  ++i;
  assertEquals("dateTimeProperty",props.getJSONObject(i).get("name"));
  assertEquals(new Integer(0),props.getJSONObject(i).get("minOccurs"));
  assertEquals(new Integer(1),props.getJSONObject(i).get("maxOccurs"));
  assertEquals(true,props.getJSONObject(i).get("nillable"));
  assertEquals("xsd:date-time",props.getJSONObject(i).get("type"));
  assertEquals("date-time",props.getJSONObject(i).get("localType"));
  ++i;
  assertEquals("dateProperty",props.getJSONObject(i).get("name"));
  assertEquals(new Integer(0),props.getJSONObject(i).get("minOccurs"));
  assertEquals(new Integer(1),props.getJSONObject(i).get("maxOccurs"));
  assertEquals(true,props.getJSONObject(i).get("nillable"));
  assertEquals("xsd:date",props.getJSONObject(i).get("type"));
  assertEquals("date",props.getJSONObject(i).get("localType"));
  ++i;
  assertEquals("decimalProperty",props.getJSONObject(i).get("name"));
  assertEquals(new Integer(0),props.getJSONObject(i).get("minOccurs"));
  assertEquals(new Integer(1),props.getJSONObject(i).get("maxOccurs"));
  assertEquals(true,props.getJSONObject(i).get("nillable"));
  assertEquals("xsd:number",props.getJSONObject(i).get("type"));
  assertEquals("number",props.getJSONObject(i).get("localType"));
  ++i;
  assertEquals("booleanProperty",props.getJSONObject(i).get("name"));
  assertEquals(new Integer(0),props.getJSONObject(i).get("minOccurs"));
  assertEquals(new Integer(1),props.getJSONObject(i).get("maxOccurs"));
  assertEquals(true,props.getJSONObject(i).get("nillable"));
  assertEquals("xsd:boolean",props.getJSONObject(i).get("type"));
  assertEquals("boolean",props.getJSONObject(i).get("localType"));
}
