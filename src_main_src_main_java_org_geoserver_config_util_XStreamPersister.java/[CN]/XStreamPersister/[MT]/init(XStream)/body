{
  initImplementationDefaults(xs);
  xs.alias("global",GeoServerInfo.class);
  xs.alias("settings",SettingsInfo.class);
  xs.alias("logging",LoggingInfo.class);
  xs.alias("jai",JAIInfo.class);
  xs.alias("coverageAccess",CoverageAccessInfo.class);
  xs.alias("catalog",Catalog.class);
  xs.alias("namespace",NamespaceInfo.class);
  xs.alias("workspace",WorkspaceInfo.class);
  xs.alias("dataStore",DataStoreInfo.class);
  xs.alias("wmsStore",WMSStoreInfo.class);
  xs.alias("coverageStore",CoverageStoreInfo.class);
  xs.alias("style",StyleInfo.class);
  xs.alias("featureType",FeatureTypeInfo.class);
  xs.alias("coverage",CoverageInfo.class);
  xs.alias("wmsLayer",WMSLayerInfo.class);
  xs.alias("coverageDimension",CoverageDimensionInfo.class);
  xs.alias("metadataLink",MetadataLinkInfo.class);
  xs.alias("attribute",AttributeTypeInfo.class);
  xs.alias("layer",LayerInfo.class);
  xs.alias("layerGroup",LayerGroupInfo.class);
  xs.alias("published",PublishedInfo.class);
  xs.alias("gridGeometry",GridGeometry2D.class);
  xs.alias("projected",DefaultProjectedCRS.class);
  xs.alias("attribution",AttributionInfo.class);
  xs.aliasField("abstract",ResourceInfoImpl.class,"_abstract");
  xs.alias("AuthorityURL",AuthorityURLInfo.class);
  xs.alias("Identifier",LayerIdentifierInfo.class);
  xs.omitField(impl(GeoServerInfo.class),"clientProperties");
  xs.omitField(impl(GeoServerInfo.class),"geoServer");
  xs.registerLocalConverter(impl(GeoServerInfo.class),"metadata",new MetadataMapConverter());
  xs.omitField(impl(ServiceInfo.class),"clientProperties");
  xs.omitField(impl(ServiceInfo.class),"geoServer");
  xs.registerLocalConverter(impl(ServiceInfo.class),"workspace",new ReferenceConverter(WorkspaceInfo.class));
  xs.registerLocalConverter(impl(ServiceInfo.class),"metadata",new MetadataMapConverter());
  xs.registerLocalConverter(impl(ServiceInfo.class),"keywords",new KeywordListConverter());
  xs.omitField(impl(Catalog.class),"resourcePool");
  xs.omitField(impl(Catalog.class),"resourceLoader");
  xs.omitField(impl(Catalog.class),"listeners");
  xs.omitField(impl(Catalog.class),"LOGGER");
  xs.omitField(impl(DefaultCatalogFacade.class),"catalog");
  xs.omitField(impl(DefaultCatalogFacade.class),"resources");
  xs.omitField(impl(DefaultCatalogFacade.class),"layers");
  xs.omitField(impl(DefaultCatalogFacade.class),"maps");
  xs.omitField(impl(DefaultCatalogFacade.class),"layerGroups");
  xs.registerLocalConverter(DefaultCatalogFacade.class,"stores",new StoreMultiHashMapConverter());
  xs.registerLocalConverter(DefaultCatalogFacade.class,"namespaces",new SpaceMapConverter("namespace"));
  xs.registerLocalConverter(DefaultCatalogFacade.class,"workspaces",new SpaceMapConverter("workspace"));
  xs.omitField(impl(WorkspaceInfo.class),"_default");
  xs.registerLocalConverter(impl(WorkspaceInfo.class),"metadata",new MetadataMapConverter());
  xs.omitField(impl(NamespaceInfo.class),"catalog");
  xs.omitField(impl(NamespaceInfo.class),"_default");
  xs.registerLocalConverter(impl(NamespaceInfo.class),"metadata",new MetadataMapConverter());
  xs.omitField(impl(StoreInfo.class),"catalog");
  xs.omitField(impl(StoreInfo.class),"error");
  xs.registerLocalConverter(impl(StoreInfo.class),"workspace",new ReferenceConverter(WorkspaceInfo.class));
  xs.registerLocalConverter(impl(StoreInfo.class),"connectionParameters",new BreifMapConverter());
  xs.registerLocalConverter(impl(StoreInfo.class),"metadata",new MetadataMapConverter());
  xs.omitField(impl(StyleInfo.class),"catalog");
  xs.registerLocalConverter(impl(StyleInfo.class),"workspace",new ReferenceConverter(WorkspaceInfo.class));
  xs.registerLocalConverter(impl(StyleInfo.class),"metadata",new MetadataMapConverter());
  xs.omitField(impl(ResourceInfo.class),"catalog");
  xs.omitField(impl(ResourceInfo.class),"crs");
  xs.registerLocalConverter(impl(ResourceInfo.class),"nativeCRS",new CRSConverter());
  xs.registerLocalConverter(impl(ResourceInfo.class),"store",new ReferenceConverter(StoreInfo.class));
  xs.registerLocalConverter(impl(ResourceInfo.class),"namespace",new ReferenceConverter(NamespaceInfo.class));
  xs.registerLocalConverter(impl(ResourceInfo.class),"metadata",new MetadataMapConverter());
  xs.registerLocalConverter(impl(ResourceInfo.class),"keywords",new KeywordListConverter());
  xs.registerLocalConverter(impl(CoverageInfo.class),"supportedFormats",new LaxCollectionConverter(xs.getMapper()));
  xs.registerLocalConverter(impl(CoverageInfo.class),"requestSRS",new LaxCollectionConverter(xs.getMapper()));
  xs.registerLocalConverter(impl(CoverageInfo.class),"responseSRS",new LaxCollectionConverter(xs.getMapper()));
  xs.registerLocalConverter(impl(CoverageInfo.class),"interpolationMethods",new LaxCollectionConverter(xs.getMapper()));
  xs.registerLocalConverter(impl(CoverageInfo.class),"dimensions",new LaxCollectionConverter(xs.getMapper()));
  xs.registerLocalConverter(impl(CoverageDimensionInfo.class),"range",new NumberRangeConverter());
  xs.omitField(impl(AttributeTypeInfo.class),"featureType");
  xs.omitField(impl(AttributeTypeInfo.class),"attribute");
  xs.registerLocalConverter(impl(LayerInfo.class),"resource",new ReferenceConverter(ResourceInfo.class));
  xs.registerLocalConverter(impl(LayerInfo.class),"defaultStyle",new ReferenceConverter(StyleInfo.class));
  xs.registerLocalConverter(impl(LayerInfo.class),"styles",new ReferenceCollectionConverter(StyleInfo.class));
  xs.registerLocalConverter(impl(LayerInfo.class),"metadata",new MetadataMapConverter());
  xs.registerLocalConverter(impl(LayerGroupInfo.class),"workspace",new ReferenceConverter(WorkspaceInfo.class));
  xs.registerLocalConverter(impl(LayerGroupInfo.class),"rootLayer",new ReferenceConverter(LayerInfo.class));
  xs.registerLocalConverter(impl(LayerGroupInfo.class),"rootLayerStyle",new ReferenceConverter(StyleInfo.class));
  xs.registerLocalConverter(impl(LayerGroupInfo.class),"layers",new ReferenceCollectionConverter(LayerInfo.class));
  xs.registerLocalConverter(impl(LayerGroupInfo.class),"publishables",new ReferenceCollectionConverter(PublishedInfo.class,LayerInfo.class,LayerGroupInfo.class));
  xs.registerLocalConverter(impl(LayerGroupInfo.class),"styles",new ReferenceCollectionConverter(StyleInfo.class));
  xs.registerLocalConverter(impl(LayerGroupInfo.class),"metadata",new MetadataMapConverter());
  xs.registerLocalConverter(ReferencedEnvelope.class,"crs",new SRSConverter());
  xs.registerLocalConverter(GeneralEnvelope.class,"crs",new SRSConverter());
  xs.omitField(impl(ServiceInfo.class),"geoServer");
  xs.registerConverter(new SpaceInfoConverter());
  xs.registerConverter(new StoreInfoConverter());
  xs.registerConverter(new ResourceInfoConverter());
  xs.registerConverter(new FeatureTypeInfoConverter());
  xs.registerConverter(new CoverageInfoConverter());
  xs.registerConverter(new LayerInfoConverter());
  xs.registerConverter(new LayerGroupInfoConverter());
  xs.registerConverter(new GridGeometry2DConverter());
  xs.registerConverter(new ProxyCollectionConverter(xs.getMapper()));
  xs.registerConverter(new VirtualTableConverter());
  xs.registerConverter(new KeywordInfoConverter());
  registerBreifMapComplexType("virtualTable",VirtualTable.class);
  registerBreifMapComplexType("dimensionInfo",DimensionInfoImpl.class);
  callback=new Callback();
}
