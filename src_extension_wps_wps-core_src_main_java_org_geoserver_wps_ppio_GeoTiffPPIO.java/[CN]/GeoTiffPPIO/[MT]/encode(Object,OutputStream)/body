{
  GridCoverage2D coverage=(GridCoverage2D)value;
  final Object fileSource=coverage.getProperty(AbstractGridCoverage2DReader.FILE_SOURCE_PROPERTY);
  if (fileSource != null && fileSource instanceof String) {
    File file=new File((String)fileSource);
    if (file.exists()) {
      GeoTiffReader reader=null;
      FileInputStream fis=null;
      try {
        reader=new GeoTiffReader(file);
        reader.read(null);
        fis=new FileInputStream(file);
        IOUtils.copyLarge(fis,os);
        return;
      }
 catch (      Exception e) {
      }
 finally {
        if (reader != null) {
          reader.dispose();
        }
        if (fis != null) {
          fis.close();
        }
      }
    }
  }
  GeoTiffFormat format=new GeoTiffFormat();
  final GeoTiffFormat wformat=new GeoTiffFormat();
  final GeoTiffWriteParams wp=new GeoTiffWriteParams();
  wp.setCompressionMode(GeoTiffWriteParams.MODE_EXPLICIT);
  wp.setCompressionType("LZW");
  wp.setTilingMode(GeoToolsWriteParams.MODE_EXPLICIT);
  wp.setTiling(256,256);
  final ParameterValueGroup wparams=wformat.getWriteParameters();
  wparams.parameter(AbstractGridFormat.GEOTOOLS_WRITE_PARAMS.getName().toString()).setValue(wp);
  final GeneralParameterValue[] wps=(GeneralParameterValue[])wparams.values().toArray(new GeneralParameterValue[1]);
  AbstractGridCoverageWriter writer=(AbstractGridCoverageWriter)format.getWriter(os);
  if (writer == null)   throw new WPSException("Could not find the GeoTIFF writer, please check it's in the classpath");
  try {
    writer.write(coverage,wps);
  }
  finally {
    try {
      writer.dispose();
    }
 catch (    Exception e) {
    }
  }
}
