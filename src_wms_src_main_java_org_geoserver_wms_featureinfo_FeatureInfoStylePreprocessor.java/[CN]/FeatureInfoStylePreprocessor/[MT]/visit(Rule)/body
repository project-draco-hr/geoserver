{
  geometriesOnLineSymbolizer.clear();
  geometriesOnPolygonSymbolizer.clear();
  geometriesOnPointSymbolizer.clear();
  geometriesOnTextSymbolizer.clear();
  addSolidLineSymbolier=false;
  super.visit(rule);
  Rule copy=(Rule)pages.peek();
  if (addSolidLineSymbolier) {
    LineSymbolizer ls=sb.createLineSymbolizer(Color.BLACK);
    copy.symbolizers().add(ls);
  }
  geometriesOnLineSymbolizer.removeAll(geometriesOnPolygonSymbolizer);
  for (  Expression geom : geometriesOnLineSymbolizer) {
    Object result=geom.evaluate(schema);
    Class geometryType=getTargetGeometryType(result);
    if (Polygon.class.isAssignableFrom(geometryType) || MultiPolygon.class.isAssignableFrom(geometryType)) {
      copy.symbolizers().add(sb.createPolygonSymbolizer());
    }
 else     if (geometryType.equals(Geometry.class)) {
      RuleImpl extra=buildDynamicGeometryRule(copy,geom,sb.createPolygonSymbolizer(),"Polygon","MultiPolygon");
      extraRules.add(extra);
    }
  }
  geometriesOnTextSymbolizer.removeAll(geometriesOnPolygonSymbolizer);
  geometriesOnTextSymbolizer.removeAll(geometriesOnLineSymbolizer);
  geometriesOnTextSymbolizer.removeAll(geometriesOnPointSymbolizer);
  for (  Expression geom : geometriesOnTextSymbolizer) {
    Object result=geom.evaluate(schema);
    Class geometryType=getTargetGeometryType(result);
    if (Polygon.class.isAssignableFrom(geometryType) || MultiPolygon.class.isAssignableFrom(geometryType)) {
      copy.symbolizers().add(sb.createPolygonSymbolizer());
    }
 else     if (LineString.class.isAssignableFrom(geometryType) || MultiLineString.class.isAssignableFrom(geometryType)) {
      copy.symbolizers().add(sb.createLineSymbolizer());
    }
 else     if (Point.class.isAssignableFrom(geometryType) || MultiPoint.class.isAssignableFrom(geometryType)) {
      copy.symbolizers().add(sb.createPointSymbolizer());
    }
 else {
      RuleImpl extra=buildDynamicGeometryRule(copy,geom,sb.createPolygonSymbolizer(),"Polygon","MultiPolygon");
      extraRules.add(extra);
      extra=buildDynamicGeometryRule(copy,geom,sb.createLineSymbolizer(),"LineString","LinearRing","MultiLineString");
      extraRules.add(extra);
      extra=buildDynamicGeometryRule(copy,geom,sb.createPointSymbolizer(),"Point","MultiPoint");
      extraRules.add(extra);
    }
  }
}
