{
  ImportContext context=importer.getContext(importId);
  assertEquals(1,context.getTasks().size());
  ImportTask task=context.getTasks().get(0);
  TransformChain transformChain=task.getTransform();
  assertThat(transformChain.getTransforms().get(0),CoreMatchers.instanceOf(AttributesToPointGeometryTransform.class));
  assertEquals(ImportTask.State.NO_CRS,task.getState());
  LayerInfo layer=task.getLayer();
  ResourceInfo resource=layer.getResource();
  resource.setSRS("EPSG:4326");
  importer.changed(task);
  assertEquals(ImportTask.State.READY,task.getState());
  context.updated();
  assertEquals(ImportContext.State.PENDING,context.getState());
  importer.run(context);
  assertEquals(ImportContext.State.COMPLETE,context.getState());
  FeatureTypeInfo fti=(FeatureTypeInfo)resource;
  SimpleFeatureType featureType=(SimpleFeatureType)fti.getFeatureType();
  GeometryDescriptor geometryDescriptor=featureType.getGeometryDescriptor();
  assertNotNull("Expecting geometry",geometryDescriptor);
  assertEquals("Invalid geometry name","location",geometryDescriptor.getLocalName());
  assertEquals(3,featureType.getAttributeCount());
  FeatureSource<? extends FeatureType,? extends Feature> featureSource=fti.getFeatureSource(null,null);
  FeatureCollection<? extends FeatureType,? extends Feature> features=featureSource.getFeatures();
  assertEquals(9,features.size());
  FeatureIterator<? extends Feature> featureIterator=features.features();
  assertTrue("Expected features",featureIterator.hasNext());
  SimpleFeature feature=(SimpleFeature)featureIterator.next();
  assertNotNull(feature);
  assertEquals("Invalid city attribute","Trento",feature.getAttribute("CITY"));
  assertEquals("Invalid number attribute",140,feature.getAttribute("NUMBER"));
  Object geomAttribute=feature.getAttribute("location");
  assertNotNull("Expected geometry",geomAttribute);
  Point point=(Point)geomAttribute;
  Coordinate coordinate=point.getCoordinate();
  assertEquals("Invalid x coordinate",11.12,coordinate.x,0.1);
  assertEquals("Invalid y coordinate",46.07,coordinate.y,0.1);
  featureIterator.close();
}
