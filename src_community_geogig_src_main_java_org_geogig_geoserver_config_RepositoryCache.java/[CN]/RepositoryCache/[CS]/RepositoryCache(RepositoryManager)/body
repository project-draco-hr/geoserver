{
  RemovalListener<String,Repository> disposingListener=new RemovalListener<String,Repository>(){
    @Override public void onRemoval(    RemovalNotification<String,Repository> notification){
      String repoId=notification.getKey();
      Repository repository=notification.getValue();
      if (repository != null) {
        try {
          URI location=repository.getLocation();
          LOGGER.fine(format("Closing cached GeoGig repository instance %s",location != null ? location : repoId));
          repository.close();
          LOGGER.finer(format("Closed cached GeoGig repository instance %s",location != null ? location : repoId));
        }
 catch (        RuntimeException e) {
          LOGGER.log(Level.WARNING,format("Error disposing GeoGig repository instance for id %s",repoId),e);
        }
      }
    }
  }
;
  final CacheLoader<String,Repository> loader=new CacheLoader<String,Repository>(){
    private final RepositoryManager manager=repoManager;
    @Override public Repository load(    final String repoId) throws Exception {
      try {
        RepositoryInfo repoInfo=manager.get(repoId);
        URI repoLocation=repoInfo.getLocation();
        Repository repo=RepositoryResolver.load(repoLocation);
        checkState(repo.isOpen());
        return repo;
      }
 catch (      Exception e) {
        LOGGER.log(Level.WARNING,format("Error loading GeoGig repository instance for id %s",repoId),e);
        throw e;
      }
    }
  }
;
  repoCache=CacheBuilder.newBuilder().softValues().expireAfterAccess(5,TimeUnit.MINUTES).removalListener(disposingListener).build(loader);
}
