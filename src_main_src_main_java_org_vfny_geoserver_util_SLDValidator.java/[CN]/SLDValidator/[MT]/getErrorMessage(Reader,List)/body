{
  BufferedReader reader=null;
  StringBuffer result=new StringBuffer();
  result.append("Your SLD is not valid.\n");
  result.append("Most common problems are: \n(1) no namespaces - use <ows:GetMap>, <sld:Rule>, <ogc:Filter>, <gml:Point>  - the part before the ':' is important\n");
  result.append("(2) capitialization - use '<And>' not '<and>' \n");
  result.append("(3) Order - The order of elements is important \n");
  result.append("(4) Make sure your first tag imports the correct namespaces.  ie. xmlns:sld=\"http://www.opengis.net/sld\" for EVERY NAMESPACE \n");
  result.append("\n");
  try {
    reader=new BufferedReader(xml);
    String line=reader.readLine();
    int linenumber=1;
    int exceptionNum=0;
    if (errors.size() > 0) {
      SAXParseException sax=(SAXParseException)errors.get(0);
      if (sax.getLineNumber() < 0) {
        result.append("   INVALID XML: " + sax.getLocalizedMessage() + "\n");
        result.append(" \n");
        exceptionNum=1;
      }
    }
    while (line != null) {
      line.replace('\n',' ');
      line.replace('\r',' ');
      String header=linenumber + ": ";
      result.append(header + line + "\n");
      boolean keep_going=true;
      while (keep_going) {
        if ((exceptionNum < errors.size())) {
          SAXParseException sax=(SAXParseException)errors.get(exceptionNum);
          if (sax.getLineNumber() <= linenumber) {
            String head="---------------------".substring(0,header.length() - 1);
            String body
            int colNum=sax.getColumnNumber();
            if (colNum < 1) {
              colNum=1;
            }
            if (colNum > body.length()) {
              body=body + body + body+ body+ body+ body;
              if (colNum > body.length()) {
                colNum=body.length();
              }
            }
            result.append(head + body.substring(0,colNum - 1) + "^\n");
            result.append("       (line " + sax.getLineNumber() + ", column "+ sax.getColumnNumber()+ ")"+ sax.getLocalizedMessage()+ "\n");
            exceptionNum++;
          }
 else {
            keep_going=false;
          }
        }
 else {
          keep_going=false;
        }
      }
      line=reader.readLine();
      linenumber++;
    }
    for (int t=exceptionNum; t < errors.size(); t++) {
      SAXParseException sax=(SAXParseException)errors.get(t);
      result.append("       (line " + sax.getLineNumber() + ", column "+ sax.getColumnNumber()+ ")"+ sax.getLocalizedMessage()+ "\n");
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    try {
      if (reader != null) {
        reader.close();
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return result.toString();
}
