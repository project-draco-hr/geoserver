{
  StringBuilder orderBy=new StringBuilder();
  orderBy.append("ORDER BY ");
  int i=0;
  query.append("SELECT id FROM ");
  query.append("\n    (SELECT oid, id FROM object WHERE ");
  if (queryType != null) {
    query.append("type_id in (:types) /* ").append(queryType.getCanonicalName()).append(" */\n      AND ");
  }
  query.append(whereClause).append(") AS object");
  for (  SortBy order : orders) {
    final String sortProperty=order.getPropertyName().getPropertyName();
    final String subSelectName="subSelect" + i;
    final String attributeName="prop" + i;
    final String propertyParamName="sortProperty" + i;
    final Set<Integer> sortPropertyTypeIds;
    sortPropertyTypeIds=dbMappings.getPropertyTypeIds(queryType,sortProperty);
    Map<String,Object> namedParameters=getNamedParameters();
    namedParameters.put(propertyParamName,sortPropertyTypeIds);
    query.append("\n  LEFT JOIN");
    query.append("\n    (SELECT oid, value AS ").append(attributeName).append(" FROM \n      object_property WHERE property_type IN (:").append(propertyParamName).append(")) AS ").append(subSelectName);
    query.append("  /* ").append(order.getPropertyName().getPropertyName()).append(" ").append(ascDesc(order)).append(" */");
    query.append("\n  ON object.oid = ").append(subSelectName).append(".oid");
    if (i > 0)     orderBy.append(", ");
    orderBy.append(attributeName).append(" ").append(ascDesc(order));
    i++;
  }
  query.append("\n  ").append(orderBy);
}
