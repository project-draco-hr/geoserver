{
  final SimplifyingFilterVisitor filterSimplifier=new SimplifyingFilterVisitor();
  this.predicateBuilder=new FilterToCatalogSQL(this.queryType,this.dbMappings);
  Capabilities fcs=new Capabilities(FilterToCatalogSQL.CAPABILITIES);
  FeatureType parent=null;
  ClientTransactionAccessor transactionAccessor=new ClientTransactionAccessor(){
    @Override public Filter getUpdateFilter(    final String attributePath){
      Set<PropertyType> propertyTypes;
      propertyTypes=dbMappings.getPropertyTypes(queryType,attributePath);
      final boolean isMappedProp=!propertyTypes.isEmpty();
      if (isMappedProp) {
        return null;
      }
      return Filter.EXCLUDE;
    }
    @Override public Filter getDeleteFilter(){
      return null;
    }
  }
;
  CapabilitiesFilterSplitter filterSplitter;
  filterSplitter=new CapabilitiesFilterSplitter(fcs,parent,transactionAccessor);
  final Filter filter=(Filter)this.originalFilter.accept(filterSimplifier,null);
  filter.accept(filterSplitter,null);
  Filter supported=filterSplitter.getFilterPre();
  Filter unsupported=filterSplitter.getFilterPost();
  Filter demultipliedFilter=(Filter)supported.accept(new LiteralDemultiplyingFilterVisitor(),null);
  this.supportedFilter=(Filter)demultipliedFilter.accept(filterSimplifier,null);
  this.unsupportedFilter=(Filter)unsupported.accept(filterSimplifier,null);
  StringBuilder whereClause=new StringBuilder();
  return (StringBuilder)this.supportedFilter.accept(predicateBuilder,whereClause);
}
