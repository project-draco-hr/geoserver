{
  List queries=request.getDifferenceQuery();
  if (queries.isEmpty()) {
    throw new WFSException("No difference query specified");
  }
  if (EMFUtils.isUnset(queries,"typeName")) {
    String msg="No feature types specified";
    throw new WFSException(msg);
  }
  FeatureCollectionType result=WfsFactory.eINSTANCE.createFeatureCollectionType();
  int residual=request.getMaxFeatures() != null ? request.getMaxFeatures().intValue() : Integer.MAX_VALUE;
  try {
    for (int i=0; i < queries.size() && residual > 0; i++) {
      DifferenceQueryType query=(DifferenceQueryType)queries.get(i);
      FeatureTypeInfo meta=featureTypeInfo((QName)query.getTypeName());
      FeatureSource<? extends FeatureType,? extends Feature> source=meta.getFeatureSource(null,null);
      if (!(source instanceof VersioningFeatureSource)) {
        throw new WFSException("Feature type" + query.getTypeName() + " is not versioned");
      }
      Filter filter=(Filter)query.getFilter();
      if (filter != null) {
        final FeatureType featureType=source.getSchema();
        ExpressionVisitor visitor=new AbstractExpressionVisitor(){
          public Object visit(          PropertyName name,          Object data){
            if (name.evaluate(featureType) == null) {
              throw new WFSException("Illegal property name: " + name.getPropertyName(),"InvalidParameterValue");
            }
            return name;
          }
        }
;
        filter.accept(new AbstractFilterVisitor(visitor),null);
      }
      VersioningFeatureSource store=(VersioningFeatureSource)source;
      SimpleFeatureCollection logs=store.getLog(query.getFromFeatureVersion(),query.getToFeatureVersion(),filter,null,residual);
      residual-=logs.size();
      result.getFeature().add(logs);
    }
  }
 catch (  IOException e) {
    throw new WFSException("Error occurred getting features",e,request.getHandle());
  }
  result.setNumberOfFeatures(BigInteger.valueOf(residual));
  result.setTimeStamp(Calendar.getInstance());
  return result;
}
