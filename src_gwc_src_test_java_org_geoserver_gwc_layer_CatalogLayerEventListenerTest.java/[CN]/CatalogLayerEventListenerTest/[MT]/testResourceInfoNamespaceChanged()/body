{
  NamespaceInfo newNamespace=mock(NamespaceInfo.class);
  when(newNamespace.getPrefix()).thenReturn("newMock");
  final String oldPrefixedName=mockResourceInfo.prefixedName();
  final String newPrefixedName=newNamespace.getPrefix() + ":" + mockResourceInfo.getName();
  when(mockResourceInfo.getNamespace()).thenReturn(newNamespace);
  when(mockResourceInfo.prefixedName()).thenReturn(newPrefixedName);
  CatalogModifyEvent modifyEvent=mock(CatalogModifyEvent.class);
  when(modifyEvent.getSource()).thenReturn(mockResourceInfo);
  when(modifyEvent.getPropertyNames()).thenReturn(Arrays.asList("namespace"));
  when(modifyEvent.getOldValues()).thenReturn(Arrays.asList((Object)mockNamespaceInfo));
  when(modifyEvent.getNewValues()).thenReturn(Arrays.asList((Object)newNamespace));
  GeoServerTileLayerInfo info=TileLayerInfoUtil.loadOrCreate(mockLayerInfo,GWCConfig.getOldDefaults());
  GeoServerTileLayer tileLayer=mock(GeoServerTileLayer.class);
  when(tileLayer.getInfo()).thenReturn(info);
  when(tileLayer.getLayerInfo()).thenReturn(mockLayerInfo);
  when(mockMediator.hasTileLayer(same(mockResourceInfo))).thenReturn(true);
  when(mockMediator.getTileLayer(same(mockResourceInfo))).thenReturn(tileLayer);
  when(mockMediator.getTileLayerByName(eq(oldPrefixedName))).thenReturn(tileLayer);
  listener.handleModifyEvent(modifyEvent);
  CatalogPostModifyEvent postModifyEvent=mock(CatalogPostModifyEvent.class);
  when(postModifyEvent.getSource()).thenReturn(mockResourceInfo);
  listener.handlePostModifyEvent(postModifyEvent);
  ArgumentCaptor<GeoServerTileLayer> captor=ArgumentCaptor.forClass(GeoServerTileLayer.class);
  verify(mockMediator).save(captor.capture());
  GeoServerTileLayer saved=captor.getValue();
  assertNotNull(saved);
  assertNotNull(saved.getInfo());
  GeoServerTileLayerInfo savedInfo=saved.getInfo();
  assertSame(info,savedInfo);
  assertEquals(newPrefixedName,savedInfo.getName());
}
