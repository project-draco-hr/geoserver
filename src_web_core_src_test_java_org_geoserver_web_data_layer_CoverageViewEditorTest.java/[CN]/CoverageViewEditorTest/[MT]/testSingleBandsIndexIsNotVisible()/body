{
  login();
  CoverageViewNewPage newPage=new CoverageViewNewPage(MockData.DEFAULT_PREFIX,"timeranges",null,null);
  tester.startPage(newPage);
  tester.assertComponent("form:coverages:outputBandsChoice",ListMultipleChoice.class);
  tester.assertComponent("form",Form.class);
  tester.assertComponent("form:name",TextField.class);
  tester.assertComponent("form:coverages",CoverageViewEditor.class);
  tester.assertComponent("form:coverages:coveragesChoice",ListMultipleChoice.class);
  tester.assertComponent("form:coverages:outputBandsChoice",ListMultipleChoice.class);
  tester.assertComponent("form:coverages:addBand",Button.class);
  CoverageViewEditor coverageViewEditor=(CoverageViewEditor)tester.getComponentFromLastRenderedPage("form:coverages");
  coverageViewEditor.setModelObject(null);
  ListMultipleChoice availableBands=(ListMultipleChoice)tester.getComponentFromLastRenderedPage("form:coverages:coveragesChoice");
  ListMultipleChoice selectedBands=(ListMultipleChoice)tester.getComponentFromLastRenderedPage("form:coverages:outputBandsChoice");
  FormTester formTester=tester.newFormTester("form");
  formTester.selectMultiple("coverages:coveragesChoice",new int[]{0});
  tester.executeAjaxEvent("form:coverages:addBand","click");
  assertThat(availableBands.getChoices().size(),is(1));
  assertThat(availableBands.getChoices().get(0),is("time_domainsRanges"));
  assertThat(selectedBands.getChoices().size(),is(1));
  CoverageView.CoverageBand selectedBand=(CoverageView.CoverageBand)selectedBands.getChoices().get(0);
  assertThat(selectedBand.getDefinition(),is("time_domainsRanges"));
  formTester.setValue("name","bands_index_coverage_test");
  formTester.submit("save");
}
