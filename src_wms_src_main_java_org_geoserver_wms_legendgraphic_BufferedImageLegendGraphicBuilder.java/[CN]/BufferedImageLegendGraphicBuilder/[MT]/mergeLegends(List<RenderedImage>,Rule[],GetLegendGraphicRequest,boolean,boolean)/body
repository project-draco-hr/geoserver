{
  Font labelFont=LegendUtils.getLabelFont(req);
  boolean useAA=LegendUtils.isFontAntiAliasing(req);
  if (imageStack.size() == 0) {
    return null;
  }
  final BufferedImage finalLegend;
  if (imageStack.size() == 1 && (!forceLabelsOn || rules == null)) {
    finalLegend=(BufferedImage)imageStack.get(0);
  }
 else {
    final int imgCount=imageStack.size();
    final String[] labels=new String[imgCount];
    BufferedImage img=((BufferedImage)imageStack.get(0));
    int totalHeight=0;
    int totalWidth=0;
    int[] rowHeights=new int[imgCount];
    BufferedImage labelsGraphics[]=new BufferedImage[imgCount];
    for (int i=0; i < imgCount; i++) {
      img=(BufferedImage)imageStack.get(i);
      if (forceLabelsOff || rules == null) {
        totalWidth=(int)Math.ceil(Math.max(img.getWidth(),totalWidth));
        rowHeights[i]=img.getHeight();
        totalHeight+=img.getHeight();
      }
 else {
        Rule rule=rules[i];
        final Description description=rule.getDescription();
        Locale locale=req.getLocale();
        if (description != null && description.getTitle() != null) {
          final InternationalString title=description.getTitle();
          if (locale != null) {
            labels[i]=title.toString(locale);
          }
 else {
            labels[i]=title.toString();
          }
        }
 else         if (rule.getName() != null) {
          labels[i]=rule.getName();
        }
 else {
          labels[i]="";
        }
        if (labels[i] != null && labels[i].length() > 0) {
          final BufferedImage renderedLabel=getRenderedLabel(img,labels[i],req);
          labelsGraphics[i]=renderedLabel;
          final Rectangle2D bounds=new Rectangle2D.Double(0,0,renderedLabel.getWidth(),renderedLabel.getHeight());
          totalWidth=(int)Math.ceil(Math.max(img.getWidth() + bounds.getWidth(),totalWidth));
          rowHeights[i]=(int)Math.ceil(Math.max(img.getHeight(),bounds.getHeight()));
        }
 else {
          totalWidth=(int)Math.ceil(Math.max(img.getWidth(),totalWidth));
          rowHeights[i]=(int)Math.ceil(img.getHeight());
          labelsGraphics[i]=null;
        }
        totalHeight+=rowHeights[i];
      }
    }
    totalWidth+=2;
    final boolean transparent=req.isTransparent();
    final Color backgroundColor=LegendUtils.getBackgroundColor(req);
    final Map<RenderingHints.Key,Object> hintsMap=new HashMap<RenderingHints.Key,Object>();
    finalLegend=ImageUtils.createImage(totalWidth,totalHeight,(IndexColorModel)null,transparent);
    Graphics2D finalGraphics=ImageUtils.prepareTransparency(transparent,backgroundColor,finalLegend,hintsMap);
    int topOfRow=0;
    for (int i=0; i < imgCount; i++) {
      img=(BufferedImage)imageStack.get(i);
      int y=topOfRow;
      if (img.getHeight() < rowHeights[i]) {
        y+=(int)((rowHeights[i] - img.getHeight()) / 2d);
      }
      finalGraphics.drawImage(img,0,y,null);
      if (forceLabelsOff || rules == null) {
        topOfRow+=rowHeights[i];
        continue;
      }
      finalGraphics.setFont(labelFont);
      if (useAA) {
        finalGraphics.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
      }
 else {
        finalGraphics.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);
      }
      if (labels[i] != null && labels[i].length() > 0) {
        final BufferedImage renderedLabel=labelsGraphics[i];
        y=topOfRow;
        if (renderedLabel.getHeight() < rowHeights[i]) {
          y+=(int)((rowHeights[i] - renderedLabel.getHeight()) / 2d);
        }
        finalGraphics.drawImage(renderedLabel,img.getWidth(),y,null);
        renderedLabel.flush();
        labelsGraphics[i]=null;
      }
      topOfRow+=rowHeights[i];
    }
    finalGraphics.dispose();
  }
  return finalLegend;
}
