{
  List<RenderedImage> layersImages=new ArrayList<RenderedImage>();
  List<FeatureType> layers=request.getLayers();
  List<Style> styles=request.getStyles();
  List<String> rules=request.getRules();
  boolean forceLabelsOn=false;
  boolean forceLabelsOff=false;
  if (request.getLegendOptions().get("forceLabels") instanceof String) {
    String forceLabelsOpt=(String)request.getLegendOptions().get("forceLabels");
    if (forceLabelsOpt.equalsIgnoreCase("on")) {
      forceLabelsOn=true;
    }
 else     if (forceLabelsOpt.equalsIgnoreCase("off")) {
      forceLabelsOff=true;
    }
  }
  boolean forceTitlesOff=false;
  if (request.getLegendOptions().get("forceTitles") instanceof String) {
    String forceTitlesOpt=(String)request.getLegendOptions().get("forceTitles");
    if (forceTitlesOpt.equalsIgnoreCase("off")) {
      forceTitlesOff=true;
    }
  }
  for (int pos=0; pos < layers.size(); pos++) {
    FeatureType layer=layers.get(pos);
    Style gt2Style=styles.get(pos);
    String ruleName=null;
    if (gt2Style == null) {
      throw new NullPointerException("request.getStyle()");
    }
    if (rules.size() > 0) {
      ruleName=rules.get(pos);
    }
    if (ruleName != null && ruleName.equals("")) {
      ruleName=null;
    }
    int w=request.getWidth();
    int h=request.getHeight();
    double dpi=RendererUtilities.getDpi(request.getLegendOptions());
    double standardDpi=RendererUtilities.getDpi(Collections.emptyMap());
    if (dpi != standardDpi) {
      double scaleFactor=dpi / standardDpi;
      w=(int)Math.round(w * scaleFactor);
      h=(int)Math.round(h * scaleFactor);
      DpiRescaleStyleVisitor dpiVisitor=new DpiRescaleStyleVisitor(scaleFactor);
      dpiVisitor.visit(gt2Style);
      gt2Style=(Style)dpiVisitor.getCopy();
    }
    if (request.getScale() > 0) {
      double pixelsPerMeters=RendererUtilities.calculatePixelsPerMeterRatio(request.getScale(),request.getLegendOptions());
      UomRescaleStyleVisitor rescaleVisitor=new UomRescaleStyleVisitor(pixelsPerMeters);
      rescaleVisitor.visit(gt2Style);
      gt2Style=(Style)rescaleVisitor.getCopy();
    }
    boolean strict=request.isStrict();
    final boolean transparent=request.isTransparent();
    RenderedImage titleImage=null;
    if (layers.size() > 1 && !forceTitlesOff) {
      titleImage=getLayerTitle(layer,w,h,transparent,request);
    }
    boolean hasVectorTransformation=false;
    boolean hasRasterTransformation=false;
    List<FeatureTypeStyle> ftsList=gt2Style.featureTypeStyles();
    for (int i=0; i < ftsList.size(); i++) {
      FeatureTypeStyle fts=ftsList.get(i);
      Expression exp=fts.getTransformation();
      if (exp != null) {
        ProcessFunction processFunction=(ProcessFunction)exp;
        Name processName=processFunction.getProcessName();
        Map<String,Parameter<?>> outputs=Processors.getResultInfo(processName,null);
        if (outputs.isEmpty()) {
          continue;
        }
        Parameter<?> output=outputs.values().iterator().next();
        if (SimpleFeatureCollection.class.isAssignableFrom(output.getType())) {
          hasVectorTransformation=true;
          break;
        }
 else         if (GridCoverage2D.class.isAssignableFrom(output.getType())) {
          hasRasterTransformation=true;
          break;
        }
      }
    }
    final boolean buildRasterLegend=(!strict && layer == null && LegendUtils.checkRasterSymbolizer(gt2Style)) || (LegendUtils.checkGridLayer(layer) && !hasVectorTransformation) || hasRasterTransformation;
    if (buildRasterLegend) {
      final RasterLayerLegendHelper rasterLegendHelper=new RasterLayerLegendHelper(request,gt2Style,ruleName);
      final BufferedImage image=rasterLegendHelper.getLegend();
      if (image != null) {
        if (titleImage != null) {
          layersImages.add(titleImage);
        }
        layersImages.add(image);
      }
    }
 else {
      final Feature sampleFeature;
      if (layer == null || hasVectorTransformation) {
        sampleFeature=createSampleFeature();
      }
 else {
        sampleFeature=createSampleFeature(layer);
      }
      final FeatureTypeStyle[] ftStyles=gt2Style.featureTypeStyles().toArray(new FeatureTypeStyle[0]);
      final double scaleDenominator=request.getScale();
      final Rule[] applicableRules;
      if (ruleName != null) {
        Rule rule=LegendUtils.getRule(ftStyles,ruleName);
        if (rule == null) {
          throw new ServiceException("Specified style does not contains a rule named " + ruleName);
        }
        applicableRules=new Rule[]{rule};
      }
 else {
        applicableRules=LegendUtils.getApplicableRules(ftStyles,scaleDenominator);
      }
      final NumberRange<Double> scaleRange=NumberRange.create(scaleDenominator,scaleDenominator);
      final int ruleCount=applicableRules.length;
      final List<RenderedImage> legendsStack=new ArrayList<RenderedImage>(ruleCount);
      final SLDStyleFactory styleFactory=new SLDStyleFactory();
      double minimumSymbolSize=MINIMUM_SYMBOL_SIZE;
      if (request.getLegendOptions().get("minSymbolSize") instanceof String) {
        String minSymbolSizeOpt=(String)request.getLegendOptions().get("minSymbolSize");
        try {
          minimumSymbolSize=Double.parseDouble(minSymbolSizeOpt);
        }
 catch (        NumberFormatException e) {
          throw new IllegalArgumentException("Invalid minSymbolSize value: should be a number");
        }
      }
      double symbolScale=calcSymbolScale(w,h,layer,sampleFeature,applicableRules,minimumSymbolSize);
      for (int i=0; i < ruleCount; i++) {
        final RenderedImage image=ImageUtils.createImage(w,h,(IndexColorModel)null,transparent);
        final Map<RenderingHints.Key,Object> hintsMap=new HashMap<RenderingHints.Key,Object>();
        final Graphics2D graphics=ImageUtils.prepareTransparency(transparent,LegendUtils.getBackgroundColor(request),image,hintsMap);
        graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
        Feature sample=getSampleFeatureForRule(layer,sampleFeature,applicableRules[i]);
        FilterFactory ff=CommonFactoryFinder.getFilterFactory();
        final Symbolizer[] symbolizers=applicableRules[i].getSymbolizers();
        final GraphicLegend legend=applicableRules[i].getLegend();
        if (legend != null) {
          if (this.samplePoint == null) {
            Coordinate coord=new Coordinate(w / 2,h / 2);
            try {
              this.samplePoint=new LiteShape2(geomFac.createPoint(coord),null,null,false);
            }
 catch (            Exception e) {
              this.samplePoint=null;
            }
          }
          shapePainter.paint(graphics,this.samplePoint,legend,scaleDenominator,false);
        }
 else {
          for (int sIdx=0; sIdx < symbolizers.length; sIdx++) {
            Symbolizer symbolizer=symbolizers[sIdx];
            if (symbolizer instanceof RasterSymbolizer) {
              throw new IllegalStateException("It is not legal to have a RasterSymbolizer here");
            }
 else {
              if (symbolScale > 1.0 && symbolizer instanceof PointSymbolizer) {
                PointSymbolizer pointSymbolizer=cloneSymbolizer(symbolizer);
                if (pointSymbolizer.getGraphic() != null) {
                  double size=getPointSymbolizerSize(sample,pointSymbolizer,Math.min(w,h) - 4);
                  pointSymbolizer.getGraphic().setSize(ff.literal(size / symbolScale + minimumSymbolSize));
                  symbolizer=pointSymbolizer;
                }
              }
              Style2D style2d=styleFactory.createStyle(sample,symbolizer,scaleRange);
              LiteShape2 shape=getSampleShape(symbolizer,w,h);
              if (style2d != null) {
                shapePainter.paint(graphics,shape,style2d,scaleDenominator);
              }
            }
          }
        }
        if (image != null && titleImage != null) {
          layersImages.add(titleImage);
          titleImage=null;
        }
        legendsStack.add(image);
        graphics.dispose();
      }
      BufferedImage image=mergeLegends(legendsStack,applicableRules,request,forceLabelsOn,forceLabelsOff);
      if (image != null) {
        layersImages.add(image);
      }
    }
  }
  BufferedImage finalLegend=mergeLegends(layersImages,null,request,forceLabelsOn,forceLabelsOff);
  if (finalLegend == null) {
    throw new IllegalArgumentException("no legend passed");
  }
  return finalLegend;
}
