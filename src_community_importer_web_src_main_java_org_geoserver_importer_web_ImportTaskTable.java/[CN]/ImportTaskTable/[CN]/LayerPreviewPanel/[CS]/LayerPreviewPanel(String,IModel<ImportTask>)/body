{
  super(id);
  LayerInfo layer=model.getObject().getLayer();
  PreviewLayer preview=new PreviewLayer(layer);
  List<PreviewLink> links=new ArrayList<PreviewLink>();
  links.add(new PreviewLink("layerPreview",preview.getWmsLink() + "&format=application/openlayers"));
  String gxpLink=System.getProperty("opengeo.geoexplorer.url","/geoexplorer");
  gxpLink=gxpLink.endsWith("/") ? gxpLink.substring(0,gxpLink.length() - 1) : gxpLink;
  gxpLink+="/composer/?layers=" + urlEncode(layer.getResource().getStore().getWorkspace().getName() + ":" + layer.getName());
  try {
    ReferencedEnvelope e=layer.getResource().getLatLonBoundingBox().transform(EPSG_3857(),true);
    if (e != null) {
      gxpLink+="&bbox=" + String.format("%f,%f,%f,%f",e.getMinX(),e.getMinY(),e.getMaxX(),e.getMaxY());
    }
  }
 catch (  Exception e) {
    LOGGER.log(Level.WARNING,"Unable to reproject " + layer.getName() + " to spherical mercator",e);
  }
  links.add(new PreviewLink("geoexplorer",gxpLink));
  links.add(new PreviewLink("googleearth","../wms/kml?layers=" + layer.getName()));
  add(new DropDownChoice<PreviewLink>("links",new Model(links.get(0)),links,new ChoiceRenderer<PreviewLink>(){
    @Override public Object getDisplayValue(    PreviewLink object){
      return new ParamResourceModel(object.id,ImportTaskTable.this,object.id).getString();
    }
    @Override public String getIdValue(    PreviewLink object,    int index){
      return object.href;
    }
  }
).setNullValid(false).setOutputMarkupId(true));
  add(new ExternalLink("go","#").add(new AttributeModifier("onclick",new Model("go(document.getElementById('" + get("links").getMarkupId() + "'));"))));
}
