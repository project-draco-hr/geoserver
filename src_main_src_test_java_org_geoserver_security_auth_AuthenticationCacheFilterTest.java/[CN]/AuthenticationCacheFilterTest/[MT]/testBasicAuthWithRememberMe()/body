{
  BasicAuthenticationFilterConfig config=new BasicAuthenticationFilterConfig();
  config.setClassName(GeoServerBasicAuthenticationFilter.class.getName());
  config.setUseRememberMe(true);
  config.setName(testFilterName5);
  getSecurityManager().saveFilter(config);
  prepareFilterChain(pattern,testFilterName5,GeoServerSecurityFilterChain.REMEMBER_ME_FILTER);
  SecurityContextHolder.getContext().setAuthentication(null);
  MockHttpServletRequest request=createRequest("/foo/bar");
  request.setupAddParameter("_spring_security_remember_me","yes");
  MockHttpServletResponse response=new MockHttpServletResponse();
  MockFilterChain chain=new MockFilterChain();
  getProxy().doFilter(request,response,chain);
  assertEquals(0,response.getCookies().length);
  String tmp=response.getHeader("WWW-Authenticate");
  assertNotNull(tmp);
  request=createRequest("/foo/bar");
  request.setupAddParameter("_spring_security_remember_me","yes");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.addHeader("Authorization","Basic " + new String(Base64.encodeBytes(("abc@xyz.com:abc").getBytes())));
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
  Authentication auth=getAuth(testFilterName5,"abc@xyz.com",null,null);
  assertNotNull(auth);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  checkForAuthenticatedRole(auth);
  assertEquals(1,response.getCookies().length);
  Cookie cookie=(Cookie)response.getCookies()[0];
  request=createRequest("/foo/bar");
  request.setupAddParameter("_spring_security_remember_me","yes");
  request.addCookie(cookie);
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
  auth=getAuth(testFilterName5,"abc@xyz.com",null,null);
  assertNotNull(auth);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  checkForAuthenticatedRole(auth);
  assertEquals("abc@xyz.com",((UserDetails)auth.getPrincipal()).getUsername());
  request=createRequest("/foo/bar");
  request.setupAddParameter("_spring_security_remember_me","yes");
  request.addCookie(cookie);
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.addHeader("Authorization","Basic " + new String(Base64.encodeBytes(("abc@xyz.com:abc").getBytes())));
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
  auth=getAuth(testFilterName5,"abc@xyz.com",null,null);
  assertNotNull(auth);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  checkForAuthenticatedRole(auth);
  assertEquals("abc@xyz.com",((UserDetails)auth.getPrincipal()).getUsername());
  request=createRequest("/foo/bar");
  request.setupAddParameter("_spring_security_remember_me","yes");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.addHeader("Authorization","Basic " + new String(Base64.encodeBytes((GeoServerUser.ROOT_USERNAME + ":" + getMasterPassword()).getBytes())));
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
  auth=getAuth(testFilterName5,GeoServerUser.ROOT_USERNAME,null,null);
  assertNull(auth);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  assertEquals(0,response.getCookies().length);
  updateUser("ug1","abc@xyz.com",false);
  request=createRequest("/foo/bar");
  request.setupAddParameter("_spring_security_remember_me","yes");
  request.addCookie(cookie);
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_UNAUTHORIZED,response.getErrorCode());
  assertEquals(1,response.getCookies().length);
  Cookie cancelCookie=(Cookie)response.getCookies()[0];
  assertNull(cancelCookie.getValue());
  updateUser("ug1","abc@xyz.com",true);
}
