{
  FeatureTypeInfo ftInfo=getFeatureTypeInfo(c);
  c=remapCollectionSchema(c,null);
  SimpleFeatureType schema=c.getSchema();
  String fileName=new FileNameSource(getClass()).getShapeName(ftInfo,null);
  if (!fileName.equals(schema.getTypeName())) {
    SimpleFeatureTypeBuilder tb=new SimpleFeatureTypeBuilder();
    tb.init(c.getSchema());
    tb.setName(fileName);
    SimpleFeatureType renamed=tb.buildFeatureType();
    c=new RetypingFeatureCollection(c,renamed);
  }
  SimpleFeatureStore fstore=null;
  ShapefileDataStore dstore=null;
  try {
    Map<String,String> attributeMappings=createAttributeMappings(c.getSchema());
    SimpleFeatureCollection remapped=new RemappingFeatureCollection(c,attributeMappings);
    SimpleFeatureType remappedSchema=(SimpleFeatureType)remapped.getSchema();
    dstore=buildStore(tempDir,charset,remappedSchema);
    fstore=(SimpleFeatureStore)dstore.getFeatureSource();
    SimpleFeatureCollection retyped=new RetypingFeatureCollection(remapped,fstore.getSchema());
    fstore.addFeatures(retyped);
    changeWKTFormatIfFileFormatIsESRI(tempDir,request,fileName,remappedSchema);
  }
 catch (  FactoryException fe) {
    LOGGER.log(Level.WARNING,"Error while getting EPSG code from FeatureType",fe);
    throw new ServiceException(fe);
  }
catch (  IOException ioe) {
    LOGGER.log(Level.WARNING,"Error while writing featuretype '" + schema.getTypeName() + "' to shapefile.",ioe);
    throw new ServiceException(ioe);
  }
 finally {
    if (dstore != null) {
      dstore.dispose();
    }
  }
}
