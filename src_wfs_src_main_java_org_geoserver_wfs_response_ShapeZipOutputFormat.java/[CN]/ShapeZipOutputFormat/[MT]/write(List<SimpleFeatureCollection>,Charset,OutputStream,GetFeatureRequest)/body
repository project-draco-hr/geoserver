{
  final File tempDir=IOUtils.createTempDirectory("shpziptemp");
  ShapefileDumper dumper=new ShapefileDumper(tempDir){
    @Override protected String getShapeName(    SimpleFeatureType schema,    String geometryType){
      FeatureTypeInfo ftInfo=getFeatureTypeInfo(schema);
      String fileName=new FileNameSource(getClass()).getShapeName(ftInfo,geometryType);
      return fileName;
    }
    @Override protected void shapefileDumped(    String fileName,    SimpleFeatureType remappedSchema) throws IOException {
      try {
        changeWKTFormatIfFileFormatIsESRI(tempDir,request,fileName,remappedSchema);
      }
 catch (      FactoryException e) {
        throw new IOException("Failed to write out the ESRI style prj file",e);
      }
    }
  }
;
  dumper.setMaxDbfSize(maxDbfSize);
  dumper.setMaxShpSize(maxShpSize);
  dumper.setCharset(charset);
  try {
    boolean shapefileCreated=false;
    for (    SimpleFeatureCollection collection : collections) {
      shapefileCreated|=dumper.dump(collection);
    }
    if (!shapefileCreated) {
      createEmptyZipWarning(tempDir);
    }
    createRequestDump(tempDir,request,collections.get(0));
    final FilenameFilter filter=new FilenameFilter(){
      public boolean accept(      File dir,      String name){
        name=name.toLowerCase();
        return name.endsWith(".shp") || name.endsWith(".shx") || name.endsWith(".dbf")|| name.endsWith(".prj")|| name.endsWith(".cst")|| name.endsWith(".txt");
      }
    }
;
    ZipOutputStream zipOut=new ZipOutputStream(output);
    IOUtils.zipDirectory(tempDir,zipOut,filter);
    zipOut.finish();
  }
  finally {
    try {
      FileUtils.deleteDirectory(tempDir);
    }
 catch (    IOException e) {
      LOGGER.warning("Could not delete temp directory: " + tempDir.getAbsolutePath() + " due to: "+ e.getMessage());
    }
  }
}
