{
  JobExecution jobExecution=stepExecution.getJobExecution();
  this.xstream=xStreamPersisterFactory.createXMLPersister();
  if (backupFacade.getRestoreExecutions() != null && !backupFacade.getRestoreExecutions().isEmpty() && backupFacade.getRestoreExecutions().containsKey(jobExecution.getId())) {
    this.currentJobExecution=backupFacade.getRestoreExecutions().get(jobExecution.getId());
    this.catalog=((RestoreExecutionAdapter)currentJobExecution).getRestoreCatalog();
    this.isNew=true;
  }
 else {
    this.currentJobExecution=backupFacade.getBackupExecutions().get(jobExecution.getId());
    this.catalog=backupFacade.getCatalog();
    this.xstream.setExcludeIds();
    this.isNew=false;
  }
  Assert.notNull(this.catalog,"catalog must be set");
  this.xstream.setCatalog(this.catalog);
  this.xstream.setReferenceByName(true);
  this.xp=this.xstream.getXStream();
  Assert.notNull(this.xp,"xStream persister should not be NULL");
  JobParameters jobParameters=this.currentJobExecution.getJobParameters();
  this.dryRun=Boolean.parseBoolean(jobParameters.getString(Backup.PARAM_DRY_RUN_MODE,"false"));
  this.bestEffort=Boolean.parseBoolean(jobParameters.getString(Backup.PARAM_BEST_EFFORT_MODE,"false"));
  final String cql=jobParameters.getString("filter",null);
  if (cql != null && cql.contains("name")) {
    try {
      this.filter=ECQL.toFilter(cql);
    }
 catch (    CQLException e) {
      throw new IllegalArgumentException("Filter is not valid!",e);
    }
  }
 else {
    this.filter=null;
  }
  initialize(stepExecution);
}
