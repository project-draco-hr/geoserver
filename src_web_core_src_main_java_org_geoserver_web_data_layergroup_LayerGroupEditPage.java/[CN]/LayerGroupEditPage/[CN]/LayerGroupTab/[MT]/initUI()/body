{
  final WebMarkupContainer rootLayerPanelContainer=new WebMarkupContainer("rootLayerContainer");
  rootLayerPanelContainer.setOutputMarkupId(true);
  add(rootLayerPanelContainer);
  rootLayerPanel=new RootLayerEntryPanel("rootLayer",getPublishedInfo().getWorkspace(),myModel);
  rootLayerPanelContainer.add(rootLayerPanel);
  updateRootLayerPanel(getPublishedInfo().getMode());
  TextField<String> name=new TextField<String>("name");
  name.setRequired(true);
  add(name);
  final DropDownChoice<LayerGroupInfo.Mode> modeChoice=new DropDownChoice<LayerGroupInfo.Mode>("mode",new LayerGroupModeModel(),new LayerGroupModeChoiceRenderer());
  modeChoice.setNullValid(false);
  modeChoice.setRequired(true);
  modeChoice.add(new OnChangeAjaxBehavior(){
    private static final long serialVersionUID=8819356789334465887L;
    @Override protected void onUpdate(    AjaxRequestTarget target){
      LayerGroupInfo.Mode mode=modeChoice.getModelObject();
      updateRootLayerPanel(mode);
      target.add(rootLayerPanelContainer);
    }
  }
);
  add(modeChoice);
  queryableCheckBox=new CheckBox("queryable",new Model<Boolean>(!getPublishedInfo().isQueryDisabled()));
  add(queryableCheckBox);
  add(new TextField<String>("title"));
  add(new TextArea<String>("abstract"));
  DropDownChoice<WorkspaceInfo> wsChoice=new DropDownChoice<WorkspaceInfo>("workspace",new WorkspacesModel(),new WorkspaceChoiceRenderer());
  wsChoice.setNullValid(true);
  if (!isAuthenticatedAsAdmin()) {
    wsChoice.setNullValid(false);
    wsChoice.setRequired(true);
  }
  add(wsChoice);
  add(envelopePanel=new EnvelopePanel("bounds"));
  envelopePanel.setRequired(true);
  envelopePanel.setCRSFieldVisible(true);
  envelopePanel.setCrsRequired(true);
  envelopePanel.setOutputMarkupId(true);
  add(new GeoServerAjaxFormLink("generateBounds"){
    private static final long serialVersionUID=-5290731459036222837L;
    @Override public void onClick(    AjaxRequestTarget target,    Form form){
      LayerGroupInfo lg=getCatalog().getFactory().createLayerGroup();
      for (      LayerGroupEntry entry : lgEntryPanel.getEntries()) {
        lg.getLayers().add(entry.getLayer());
        lg.getStyles().add(entry.getStyle());
      }
      try {
        CoordinateReferenceSystem crs=envelopePanel.getCoordinateReferenceSystem();
        if (crs != null) {
          new CatalogBuilder(getCatalog()).calculateLayerGroupBounds(lg,crs);
        }
 else {
          new CatalogBuilder(getCatalog()).calculateLayerGroupBounds(lg);
        }
        envelopePanel.setModelObject(lg.getBounds());
        target.add(envelopePanel);
      }
 catch (      Exception e) {
        throw new WicketRuntimeException(e);
      }
    }
  }
);
  add(new GeoServerAjaxFormLink("generateBoundsFromCRS"){
    private static final long serialVersionUID=-7907583302556368270L;
    @Override protected void onClick(    AjaxRequestTarget target,    Form form){
      LOGGER.log(Level.FINE,"Computing bounds for LG based off CRS");
      LayerGroupInfo lg=getPublishedInfo();
      CoordinateReferenceSystem crs=envelopePanel.getCoordinateReferenceSystem();
      new CatalogBuilder(getCatalog()).calculateLayerGroupBoundsFromCRS(lg,crs);
      envelopePanel.modelChanged();
      target.add(envelopePanel);
    }
  }
);
  add(lgEntryPanel=new LayerGroupEntryPanel("layers",getPublishedInfo()));
  add(new MetadataLinkEditor("metadataLinks",myModel));
  if (!isAuthenticatedAsAdmin()) {
    if (isNew) {
      List<WorkspaceInfo> ws=getCatalog().getWorkspaces();
      if (!ws.isEmpty()) {
        wsChoice.setModelObject(ws.get(0));
      }
    }
 else {
      wsChoice.setEnabled(false);
    }
  }
}
