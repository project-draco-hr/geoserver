{
  List<Property<CoverageDimensionInfo>> result=new ArrayList<Property<CoverageDimensionInfo>>();
  result.add(new BeanProperty<CoverageDimensionInfo>("band","name"));
  result.add(new AbstractProperty<CoverageDimensionInfo>("dimensionType"){
    @Override public Object getPropertyValue(    CoverageDimensionInfo item){
      SampleDimensionType type=item.getDimensionType();
      if (type == null) {
        return "-";
      }
 else {
        String name=type.name();
        try {
          String key=CoverageBandsConfigurationPanel.class.getSimpleName() + "." + name;
          ParamResourceModel rm=new ParamResourceModel(key,null);
          return rm.getString();
        }
 catch (        Exception e) {
          return name;
        }
      }
    }
  }
);
  result.add(new AbstractProperty<CoverageDimensionInfo>("nullValues"){
    @Override public Object getPropertyValue(    CoverageDimensionInfo item){
      return new IModel<List<Double>>(){
        @Override public void detach(){
        }
        @Override public List<Double> getObject(){
          return item.getNullValues();
        }
        @Override public void setObject(        List<Double> object){
          List<Double> values=item.getNullValues();
          values.clear();
          values.addAll(object);
        }
      }
;
    }
  }
);
  result.add(new AbstractProperty<CoverageDimensionInfo>("minRange"){
    @Override public Object getPropertyValue(    final CoverageDimensionInfo item){
      return new IModel<Double>(){
        @Override public void detach(){
        }
        @Override public Double getObject(){
          if (item.getRange() == null) {
            return null;
          }
          return item.getRange().getMinimum(true);
        }
        @Override public void setObject(        Double min){
          if (min != null) {
            NumberRange range=item.getRange();
            NumberRange<Double> newRange=NumberRange.create(min,range != null ? range.getMaximum() : min);
            item.setRange(newRange);
          }
        }
      }
;
    }
  }
);
  result.add(new AbstractProperty<CoverageDimensionInfo>("maxRange"){
    @Override public Object getPropertyValue(    final CoverageDimensionInfo item){
      return new IModel<Double>(){
        @Override public void detach(){
        }
        @Override public Double getObject(){
          if (item.getRange() == null) {
            return null;
          }
          return item.getRange().getMaximum();
        }
        @Override public void setObject(        Double max){
          if (max != null) {
            NumberRange range=item.getRange();
            NumberRange<Double> newRange=NumberRange.create(range != null ? range.getMinimum() : max,max);
            item.setRange(newRange);
          }
        }
      }
;
    }
  }
);
  result.add(new BeanProperty<CoverageDimensionInfo>("unit","unit"));
  return result;
}
