{
  try {
    final StoreInfo store=resource.getStore();
    final NamespaceInfo namespace=resource.getNamespace();
    if (store == null) {
      return logValidationExceptions((T)resource,null);
    }
    final Class storeClazz=(store instanceof DataStoreInfo ? DataStoreInfo.class : CoverageStoreInfo.class);
    final StoreInfo ds=this.getCatalog().getStoreByName(store.getName(),storeClazz);
    if (ds != null) {
      resource.setStore(ds);
    }
 else {
      return logValidationExceptions((T)resource,null);
    }
    ResourceInfo existing=getCatalog().getResourceByStore(store,resource.getName(),ResourceInfo.class);
    if (existing != null && !existing.getId().equals(resource.getId())) {
      final String msg="Resource named '" + resource.getName() + "' already exists in store: '"+ store.getName()+ "'";
      return logValidationExceptions((T)resource,new RuntimeException(msg));
    }
    existing=getCatalog().getResourceByName(namespace,resource.getName(),ResourceInfo.class);
    if (existing != null && !existing.getId().equals(resource.getId())) {
      final String msg="Resource named '" + resource.getName() + "' already exists in namespace: '"+ namespace.getPrefix()+ "'";
      return logValidationExceptions((T)resource,new RuntimeException(msg));
    }
    return true;
  }
 catch (  Exception e) {
    LOGGER.warning("Could not validate the resource " + resource + " due to the following issue: "+ e.getLocalizedMessage());
    return logValidationExceptions((T)resource,e);
  }
}
