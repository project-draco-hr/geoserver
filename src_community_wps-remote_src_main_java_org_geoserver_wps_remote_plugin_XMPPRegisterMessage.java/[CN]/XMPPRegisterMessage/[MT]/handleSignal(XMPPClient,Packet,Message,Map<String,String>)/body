{
  final String serviceName[]=signalArgs.get("service").split("\\.");
  if (serviceName.length <= 1)   return;
  final Name name=new NameImpl(serviceName[0],serviceName[1]);
  try {
    String serviceDescriptorString=URLDecoder.decode(signalArgs.get("message"),"UTF-8");
    JSONObject serviceDescriptorJSON=(JSONObject)JSONSerializer.toJSON(serviceDescriptorString);
    final String title=(String)serviceDescriptorJSON.get("title");
    final String description=(String)serviceDescriptorJSON.get("description");
    JSONArray input=(JSONArray)serviceDescriptorJSON.get("input");
    JSONArray output=(JSONArray)serviceDescriptorJSON.get("output");
    Map<String,Parameter<?>> inputs=new HashMap<String,Parameter<?>>();
    if (input != null) {
      for (int ii=0; ii < input.size(); ii++) {
        final Object obj=input.get(ii);
        if (obj instanceof JSONArray) {
          final JSONArray jsonArray=(JSONArray)obj;
          final String paramName=(String)jsonArray.get(0);
          String ss=((String)jsonArray.get(1));
          ss=ss.substring(1,ss.length() - 1);
          final JSONObject paramType=(JSONObject)JSONSerializer.toJSON(ss);
          final String className=(String)paramType.get("type");
          final ParameterTemplate paramTemplate=xmppClient.convertToJavaClass(className,XMPPClient.class.getClassLoader(),paramType.get("default"));
          final InternationalString inputTitle=(paramType.get("title") != null && paramType.get("title") instanceof String ? Text.text((String)paramType.get("title")) : Text.text(paramName));
          final InternationalString inputDescription=(paramType.get("description") != null && paramType.get("description") instanceof String ? Text.text((String)paramType.get("description")) : Text.text(paramName));
          inputs.put(paramName,new Parameter(paramName,paramTemplate.getClazz(),inputTitle,inputDescription,paramType.get("min") == null || (Integer)paramType.get("min") > 0,paramType.get("min") != null ? (Integer)paramType.get("min") : 1,paramType.get("max") != null ? (Integer)paramType.get("max") : -1,paramTemplate.getDefaultValue(),null));
        }
      }
    }
    Map<String,Parameter<?>> outputs=new HashMap<String,Parameter<?>>();
    if (output != null) {
      for (int oo=0; oo < output.size(); oo++) {
        Object obj=output.get(oo);
        if (obj instanceof JSONArray) {
          final JSONArray jsonArray=(JSONArray)obj;
          final String paramName=(String)jsonArray.get(0);
          String ss=((String)jsonArray.get(1));
          ss=ss.substring(1,ss.length() - 1);
          final JSONObject paramType=(JSONObject)JSONSerializer.toJSON(ss);
          final String className=(String)paramType.get("type");
          ParameterTemplate paramTemplate=xmppClient.convertToJavaClass(className,XMPPClient.class.getClassLoader(),paramType.get("default"));
          final String choosenOutputMimeTypeParam=paramName + "OutputMimeType";
          if (paramTemplate.getMeta() != null && paramTemplate.getMeta().get("mimeTypes") != null && (paramType.get("output_mime_type") instanceof String)) {
            paramTemplate.getMeta().put("chosenMimeType",choosenOutputMimeTypeParam);
            final Parameter outputChoosenMimeTypeParam=new Parameter(choosenOutputMimeTypeParam,String.class,Text.text(""),Text.text(""),false,0,1,paramType.get("output_mime_type").toString(),null);
            inputs.put(choosenOutputMimeTypeParam,outputChoosenMimeTypeParam);
          }
          final InternationalString outputTitle=(paramType.get("title") != null && paramType.get("title") instanceof String ? Text.text((String)paramType.get("title")) : Text.text(paramName));
          final InternationalString outputDescription=(paramType.get("description") != null && paramType.get("description") instanceof String ? Text.text((String)paramType.get("description")) : Text.text(paramName));
          outputs.put(paramName,new Parameter(paramName,paramTemplate.getClazz(),outputTitle,outputDescription,paramType.get("min") == null || (Integer)paramType.get("min") > 0,paramType.get("min") != null ? (Integer)paramType.get("min") : 1,paramType.get("max") != null ? (Integer)paramType.get("max") : 0,paramTemplate.getDefaultValue(),paramTemplate.getMeta()));
        }
      }
    }
    Map<String,Object> metadata=new HashMap<String,Object>();
    metadata.put("serviceJID",packet.getFrom());
    for (    RemoteProcessFactoryListener listener : xmppClient.getRemoteFactoryListeners()) {
      listener.registerProcess(new RemoteServiceDescriptor(name,title,description,inputs,outputs,metadata));
    }
  }
 catch (  Exception e) {
    LOGGER.log(Level.SEVERE,e.getMessage(),e);
    final Set<RemoteProcessClientListener> remoteClientListeners=xmppClient.getRemoteClientListeners();
synchronized (remoteClientListeners) {
      for (      RemoteProcessClientListener listener : remoteClientListeners) {
        Map<String,Object> metadata=new HashMap<String,Object>();
        metadata.put("serviceJID",packet.getFrom());
        final String pID=(signalArgs != null ? signalArgs.get("id") : null);
        listener.exceptionOccurred(pID,e,metadata);
      }
    }
  }
}
