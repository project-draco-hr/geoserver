{
  if (!(o instanceof GetCapabilitiesType)) {
    throw new IllegalArgumentException(new StringBuffer("Not a GetCapabilitiesType: ").append(o).toString());
  }
  this.request=(GetCapabilitiesType)o;
  final long updateSequence=wcs.getGeoServer().getGlobal().getUpdateSequence();
  long requestedUpdateSequence=-1;
  if (request.getUpdateSequence() != null) {
    try {
      requestedUpdateSequence=Long.parseLong(request.getUpdateSequence());
    }
 catch (    NumberFormatException e) {
      throw new WcsException("Invalid update sequence number format, " + "should be an integer",WcsException.WcsExceptionCode.InvalidUpdateSequence,"updateSequence");
    }
    if (requestedUpdateSequence > updateSequence) {
      throw new WcsException("Invalid update sequence value, it's higher " + "than the current value, " + updateSequence,WcsException.WcsExceptionCode.InvalidUpdateSequence,"updateSequence");
    }
  }
  boolean allSections;
  List<String> sections;
  if (request.getSections() == null) {
    sections=Collections.emptyList();
    allSections=true;
  }
 else {
    sections=request.getSections().getSection();
    allSections=sections.contains(SECTIONS.All.name());
    for (    String section : sections) {
      if (!SECTIONS.names.contains(section))       throw new WcsException("Unknown section " + section,WcsException.WcsExceptionCode.InvalidParameterValue,"Sections");
    }
  }
  final AttributesImpl attributes=new AttributesImpl();
  attributes.addAttribute("","version","version","",CUR_VERSION);
  attributes.addAttribute("","xmlns:wcs","xmlns:wcs","",WCS_URI);
  attributes.addAttribute("","xmlns:xlink","xmlns:xlink","","http://www.w3.org/1999/xlink");
  attributes.addAttribute("","xmlns:ogc","xmlns:ogc","","http://www.opengis.net/ogc");
  attributes.addAttribute("","xmlns:ows","xmlns:ows","","http://www.opengis.net/ows/2.0");
  attributes.addAttribute("","xmlns:gml","xmlns:gml","","http://www.opengis.net/gml");
  final String prefixDef=new StringBuffer("xmlns:").append(XSI_PREFIX).toString();
  attributes.addAttribute("",prefixDef,prefixDef,"",XSI_URI);
  final String locationAtt=new StringBuffer(XSI_PREFIX).append(":schemaLocation").toString();
  final String locationDef=buildSchemaURL(baseUrl,"wcs/2.0/wcsGetCapabilities.xsd");
  attributes.addAttribute("",locationAtt,locationAtt,"",locationDef);
  attributes.addAttribute("","updateSequence","updateSequence","",String.valueOf(updateSequence));
  start("wcs:Capabilities",attributes);
  if (requestedUpdateSequence < updateSequence) {
    if (allSections || sections.contains(SECTIONS.ServiceIdentification.name()))     handleServiceIdentification();
    if (allSections || sections.contains(SECTIONS.ServiceProvider.name()))     handleServiceProvider();
    if (allSections || sections.contains(SECTIONS.OperationsMetadata.name()))     handleOperationsMetadata();
    if (allSections || sections.contains(SECTIONS.Contents.name()))     handleContents();
    if (allSections || sections.contains(SECTIONS.Languages.name()))     handleLanguages();
  }
  end("wcs:Capabilities");
}
