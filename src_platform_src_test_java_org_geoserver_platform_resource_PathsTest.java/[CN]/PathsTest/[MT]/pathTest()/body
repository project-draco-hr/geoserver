{
  assertEquals(2,names("a/b").size());
  assertEquals(1,names("a/").size());
  assertEquals(1,names("a").size());
  assertEquals(0,names("").size());
  assertEquals(BASE,path(""));
  assertEquals("directory/file.txt",path("directory","file.txt"));
  assertEquals("directory/folder/file3.txt",path("directory/folder","file3.txt"));
  assertNull(path((String)null));
  assertEquals("foo",path("foo/"));
  try {
    assertEquals("foo",path(".","foo"));
    fail(". invalid relative path");
  }
 catch (  IllegalArgumentException expected) {
  }
  try {
    assertEquals("foo",path("foo/bar",".."));
    fail(".. invalid relative path");
  }
 catch (  IllegalArgumentException expected) {
  }
  if (Paths.STRICT_PATH == true) {
    try {
      assertEquals("foo?",path("foo?"));
      fail("? invalid character");
    }
 catch (    IllegalArgumentException expected) {
    }
  }
}
