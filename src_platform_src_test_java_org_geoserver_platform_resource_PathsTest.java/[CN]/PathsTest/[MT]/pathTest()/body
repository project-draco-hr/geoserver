{
  assertEquals(2,names("a/b").size());
  assertEquals(1,names("a/").size());
  assertEquals(1,names("a").size());
  assertEquals(0,names("").size());
  assertEquals(BASE,path(""));
  assertEquals("directory/file.txt",path("directory","file.txt"));
  assertEquals("directory/folder/file3.txt",path("directory/folder","file3.txt"));
  assertNull(path((String)null));
  assertEquals("foo",path("foo/"));
  try {
    assertEquals("foo",path(".","foo"));
    fail(". invalid relative path");
  }
 catch (  IllegalArgumentException expected) {
  }
  try {
    assertEquals("foo",path("foo/bar",".."));
    fail(".. invalid relative path");
  }
 catch (  IllegalArgumentException expected) {
  }
  for (  String name : new String[]{"foo","foo.txt","directory/bar"}) {
    assertEquals(name,Paths.path(true,name));
    assertEquals(name,Paths.path(false,name));
  }
  for (  String name : new String[]{".","..","foo\\"}) {
    try {
      assertEquals(name,Paths.path(true,name));
      fail("invalid: " + name);
    }
 catch (    IllegalArgumentException expected) {
    }
    try {
      assertEquals(name,Paths.path(false,name));
      fail("invalid: " + name);
    }
 catch (    IllegalArgumentException expected) {
    }
  }
  for (  char c : "*:,'&?\"<>|".toCharArray()) {
    for (    String prefix : new String[]{"foo",""}) {
      for (      String suffix : new String[]{"bar",""}) {
        String name=prefix + c + suffix;
        try {
          assertEquals(name,Paths.path(true,name));
          fail("invalid: " + name);
        }
 catch (        IllegalArgumentException expected) {
        }
        assertEquals(name,Paths.path(false,name));
      }
    }
  }
}
