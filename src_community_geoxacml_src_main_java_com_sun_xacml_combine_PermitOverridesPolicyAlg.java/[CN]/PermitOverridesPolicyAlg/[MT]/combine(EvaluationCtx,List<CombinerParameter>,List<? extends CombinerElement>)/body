{
  boolean atLeastOneError=false;
  boolean atLeastOneDeny=false;
  Set<Obligation> denyObligations=new HashSet<Obligation>();
  Status firstIndeterminateStatus=null;
  Iterator<? extends CombinerElement> it=policyElements.iterator();
  while (it.hasNext()) {
    AbstractPolicy policy=((PolicyCombinerElement)(it.next())).getPolicy();
    MatchResult match=policy.match(context);
    if (match.getResult() == MatchResult.INDETERMINATE) {
      atLeastOneError=true;
      if (firstIndeterminateStatus == null)       firstIndeterminateStatus=match.getStatus();
    }
 else     if (match.getResult() == MatchResult.MATCH) {
      Result result=policy.evaluate(context);
      int effect=result.getDecision();
      if (effect == Result.DECISION_PERMIT)       return result;
      if (effect == Result.DECISION_DENY) {
        atLeastOneDeny=true;
        denyObligations.addAll(result.getObligations());
      }
 else       if (effect == Result.DECISION_INDETERMINATE) {
        atLeastOneError=true;
        if (firstIndeterminateStatus == null)         firstIndeterminateStatus=result.getStatus();
      }
    }
  }
  if (atLeastOneDeny)   return new Result(Result.DECISION_DENY,context.getResourceId().encode(),denyObligations);
  if (atLeastOneError)   return new Result(Result.DECISION_INDETERMINATE,firstIndeterminateStatus,context.getResourceId().encode());
  return new Result(Result.DECISION_NOT_APPLICABLE,context.getResourceId().encode());
}
