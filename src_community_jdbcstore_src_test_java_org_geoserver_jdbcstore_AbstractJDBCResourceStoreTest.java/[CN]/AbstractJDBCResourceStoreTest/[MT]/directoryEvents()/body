{
  standardData();
  ResourceStore store=new JDBCResourceStore(support.getDataSource(),getConfig(false,false));
  Resource fileA=store.get("FileA");
  Resource fileD=store.get("DirC/FileD");
  TestResourceListener listener=new TestResourceListener();
  store.get("DirC").addListener(listener);
  long before=fileD.lastmodified();
  try (OutputStream out=fileD.out()){
    out.write(1234);
  }
   long after=fileD.lastmodified();
  assertTrue(after > before);
  assertNotNull(listener.getNotify());
  assertEquals(Kind.ENTRY_MODIFY,listener.getNotify().getKind());
  assertEquals(1,listener.getNotify().events().size());
  assertEquals("DirC",listener.getNotify().getPath());
  long timeStamp=listener.getNotify().getTimestamp();
  assertTrue(timeStamp > before);
  Event e=listener.getNotify().events().get(0);
  assertEquals(Kind.ENTRY_MODIFY,e.getKind());
  assertEquals("DirC/FileD",e.getPath());
  listener.reset();
  store.get("DirC").removeListener(listener);
  store.get(Paths.BASE).addListener(listener);
  fileA.delete();
  assertNotNull(listener.getNotify());
  assertEquals(Kind.ENTRY_MODIFY,listener.getNotify().getKind());
  assertEquals(1,listener.getNotify().events().size());
  assertEquals(Paths.BASE,listener.getNotify().getPath());
  e=listener.getNotify().events().get(0);
  assertEquals(Kind.ENTRY_DELETE,e.getKind());
  assertEquals("FileA",e.getPath());
  listener.reset();
  try (OutputStream out=fileA.out()){
    assertEquals(Kind.ENTRY_MODIFY,listener.getNotify().getKind());
    assertEquals(1,listener.getNotify().events().size());
    assertEquals(Paths.BASE,listener.getNotify().getPath());
    e=listener.getNotify().events().get(0);
    assertEquals(Kind.ENTRY_CREATE,e.getKind());
    assertEquals("FileA",e.getPath());
  }
   store.get(Paths.BASE).removeListener(listener);
}
