{
  FeatureTypeInfo fti=getCatalog().getFeatureTypeByName(getLayerId(MockData.POLYGONS));
  FeatureSource fs=fti.getFeatureSource(null,null);
  SimpleFeatureCollection fc=(SimpleFeatureCollection)fs.getFeatures();
  final AtomicInteger openIterators=new AtomicInteger(0);
  FeatureCollection decorated=new org.geotools.feature.collection.DecoratingSimpleFeatureCollection(fc){
    @Override public SimpleFeatureIterator features(){
      openIterators.incrementAndGet();
      final SimpleFeature f=DataUtilities.first(delegate);
      return new SimpleFeatureIterator(){
        @Override public SimpleFeature next() throws NoSuchElementException {
          return f;
        }
        @Override public boolean hasNext(){
          return true;
        }
        @Override public void close(){
          openIterators.decrementAndGet();
        }
      }
;
    }
  }
;
  FeatureCollectionType response=WfsFactory.eINSTANCE.createFeatureCollectionType();
  response.getFeature().add(decorated);
  FeatureCollectionResponse fcResponse=FeatureCollectionResponse.adapt(response);
  WFSKMLOutputFormat outputFormat=GeoServerExtensions.bean(WFSKMLOutputFormat.class);
  FilterOutputStream fos=new FilterOutputStream(new ByteArrayOutputStream()){
    int count=0;
    @Override public void write(    byte[] b) throws IOException {
      write(b,0,b.length);
    }
    @Override public void write(    byte[] b,    int off,    int len) throws IOException {
      for (int i=off; i < len; i++) {
        write(b[i]);
      }
    }
    @Override public void write(    int b) throws IOException {
      count++;
      if (count > 100) {
        throw new IOException("Simularing client shutting down connection");
      }
      super.write(b);
    }
  }
;
  try {
    outputFormat.write(fcResponse,fos,null);
  }
 catch (  Exception e) {
  }
  assertEquals(0,openIterators.get());
}
