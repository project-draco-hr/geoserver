{
  NamespaceInfo namespace;
  if (namespaceURI == null || XMLConstants.DEFAULT_NS_PREFIX.equals(namespaceURI)) {
    namespace=getCatalog().getDefaultNamespace();
  }
 else {
    namespace=getCatalog().getNamespaceByURI(namespaceURI);
  }
  final FeatureTypeInfo typeInfo=getCatalog().getFeatureTypeByName(namespace,typeName);
  final List<LayerInfo> layers=getCatalog().getLayers(typeInfo);
  Set<String> affectedLayers=new HashSet<String>();
  for (  LayerInfo layer : layers) {
    final String tileLayerName=tileLayerName(layer);
    if (tileLayerExists(tileLayerName)) {
      affectedLayers.add(tileLayerName);
    }
  }
  List<Filter> filters=new ArrayList<>();
  for (  LayerInfo layer : layers) {
    filters.add(ff.equal(ff.property("layers.id"),ff.literal(layer.getId()),true,MatchAction.ANY));
    filters.add(ff.equal(ff.property("rootLayer.id"),ff.literal(layer.getId())));
  }
  Or groupFilter=ff.or(filters);
  List<LayerGroupInfo> groups=new ArrayList<>();
  try (CloseableIterator<LayerGroupInfo> it=getCatalog().list(LayerGroupInfo.class,groupFilter)){
    while (it.hasNext()) {
      LayerGroupInfo lg=it.next();
      groups.add(lg);
    }
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,"Failed to load groups associated to feature type " + typeName,e);
  }
  loadGroupParents(groups);
  for (  LayerGroupInfo lgi : groups) {
    final String tileLayerName=tileLayerName(lgi);
    if (!tileLayerExists(tileLayerName)) {
      continue;
    }
    affectedLayers.add(tileLayerName);
  }
  return affectedLayers;
}
