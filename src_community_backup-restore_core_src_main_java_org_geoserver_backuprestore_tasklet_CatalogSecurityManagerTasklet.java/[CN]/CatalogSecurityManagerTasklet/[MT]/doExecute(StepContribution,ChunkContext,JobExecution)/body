{
  final GeoServerDataDirectory dd=backupFacade.getGeoServerDataDirectory();
  final Resource security=dd.getSecurity(Paths.BASE);
  if (!isNew()) {
    final String outputFolderURL=jobExecution.getJobParameters().getString(Backup.PARAM_OUTPUT_FILE_PATH);
    final Resource targetBackupFolder=Resources.fromURL(outputFolderURL);
    final Resource securityTargetResource=BackupUtils.dir(targetBackupFolder,SECURITY_RESOURCE_NAME);
    try {
      Resources.copy(security,securityTargetResource);
    }
 catch (    IOException e) {
      logValidationExceptions((ValidationResult)null,new UnexpectedJobExecutionException("Exception occurred while storing GeoServer security and services settings!",e));
    }
    GeoServerSecurityManager testGssm=null;
    try {
      testGssm=new GeoServerSecurityManager(new GeoServerDataDirectory(targetBackupFolder.dir()));
      testGssm.setApplicationContext(Backup.getContext());
      testGssm.reload();
    }
 catch (    Exception e) {
      logValidationExceptions((ValidationResult)null,new UnexpectedJobExecutionException("Exception occurred while storing GeoServer security and services settings!",e));
    }
 finally {
      if (testGssm != null) {
        try {
          testGssm.destroy();
        }
 catch (        Exception e) {
          LOGGER.log(Level.WARNING,"Test GeoServerSecurityManager Destry Error!",e);
        }
      }
    }
  }
 else {
    final String inputFolderURL=jobExecution.getJobParameters().getString(Backup.PARAM_INPUT_FILE_PATH);
    final Resource sourceRestoreFolder=Resources.fromURL(inputFolderURL);
    final Resource sourceSecurityResource=BackupUtils.dir(sourceRestoreFolder,SECURITY_RESOURCE_NAME);
    GeoServerSecurityManager testGssm=null;
    try {
      testGssm=new GeoServerSecurityManager(new GeoServerDataDirectory(new GeoServerResourceLoader(sourceRestoreFolder.dir())));
      testGssm.setApplicationContext(Backup.getContext());
      testGssm.reload();
    }
 catch (    Exception e) {
      logValidationExceptions((ValidationResult)null,new UnexpectedJobExecutionException("Exception occurred while storing GeoServer security and services settings!",e));
    }
 finally {
      if (testGssm != null) {
        try {
          testGssm.destroy();
        }
 catch (        Exception e) {
          LOGGER.log(Level.WARNING,"Test GeoServerSecurityManager Destry Error!",e);
        }
      }
    }
    Resource tmpDir=BackupUtils.tmpDir();
    try {
      Resources.copy(security,tmpDir);
    }
 catch (    IOException e) {
      logValidationExceptions((ValidationResult)null,new UnexpectedJobExecutionException("Exception occurred while storing GeoServer security and services settings!",new IOException("It was not possible to backup the original Security folder!",e)));
    }
    if (Resources.exists(security) && !security.delete()) {
      try {
        Resources.copy(tmpDir,security);
      }
 catch (      IOException e) {
        logValidationExceptions((ValidationResult)null,new UnexpectedJobExecutionException("Exception occurred while storing GeoServer security and services settings!",new IOException("It was not possible to fully restore the original Security folder!",e)));
      }
      logValidationExceptions((ValidationResult)null,new UnexpectedJobExecutionException("Exception occurred while storing GeoServer security and services settings!",new IOException("It was not possible to cleanup the target security folder!")));
    }
    if (!isDryRun()) {
      try {
        Resources.copy(sourceSecurityResource,security);
      }
 catch (      IOException e) {
        try {
          Resources.copy(tmpDir,security);
        }
 catch (        IOException e1) {
          logValidationExceptions((ValidationResult)null,new UnexpectedJobExecutionException("Exception occurred while storing GeoServer security and services settings!",new IOException("It was not possible to fully restore the original Security folder!",e1)));
        }
        logValidationExceptions((ValidationResult)null,new UnexpectedJobExecutionException("Exception occurred while storing GeoServer security and services settings!",e));
      }
      GeoServerSecurityManager securityContext=GeoServerExtensions.bean(GeoServerSecurityManager.class);
      securityContext.reload();
      for (      SecurityManagerListener listener : GeoServerExtensions.extensions(SecurityManagerListener.class)) {
        listener.handlePostChanged(securityContext);
      }
    }
 else {
      if (Resources.exists(security) && !security.delete()) {
        logValidationExceptions((ValidationResult)null,new UnexpectedJobExecutionException("Exception occurred while storing GeoServer security and services settings!",new IOException("It was not possible to cleanup the target security folder!")));
      }
      try {
        Resources.copy(tmpDir,security);
      }
 catch (      IOException e) {
        logValidationExceptions((ValidationResult)null,new UnexpectedJobExecutionException("Exception occurred while storing GeoServer security and services settings!",new IOException("It was not possible to fully restore the original Security folder!",e)));
      }
    }
  }
  return RepeatStatus.FINISHED;
}
