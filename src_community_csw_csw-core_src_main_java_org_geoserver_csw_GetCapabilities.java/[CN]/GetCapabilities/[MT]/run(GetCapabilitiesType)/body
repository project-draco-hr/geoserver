{
  SectionsType sections=null;
  List<String> provided=Collections.singletonList(CatalogCapabilities.getVersion());
  List<String> accepted=null;
  if (request.getAcceptVersions() != null)   accepted=request.getAcceptVersions().getVersion();
  String version=RequestUtils.getVersionOws11(provided,accepted);
  if (!CatalogCapabilities.getVersion().equals(version)) {
    throw new CSWException("Could not understand version:" + version);
  }
  if (request.getSections() != null) {
    sections=request.getSections();
  }
  CapabilitiesType caps=cswf.createCapabilitiesType();
  caps.setVersion(CatalogCapabilities.getVersion());
  if (sections == null || requestedSection("ServiceIdentification",sections)) {
    ServiceIdentificationType si=owsf.createServiceIdentificationType();
    caps.setServiceIdentification(si);
    si.setTitle(csw.getTitle());
    si.setAbstract(csw.getAbstract());
    KeywordsType kw=null;
    List<KeywordInfo> keywords=csw.getKeywords();
    if (keywords != null && keywords.size() > 0) {
      kw=owsf.createKeywordsType();
      for (      KeywordInfo keyword : keywords) {
        kw.getKeyword().add(keyword.getValue());
      }
    }
    if (kw != null) {
      si.getKeywords().add(kw);
    }
    CodeType CSW=owsf.createCodeType();
    CSW.setValue("CSW");
    si.setServiceType(CSW);
    si.setServiceTypeVersion(CatalogCapabilities.getVersion());
    si.setFees(csw.getFees());
    if (csw.getAccessConstraints() != null) {
      si.setAccessConstraints(csw.getAccessConstraints());
    }
  }
  if (sections == null || requestedSection("ServiceProvider",sections)) {
    ServiceProviderType sp=owsf.createServiceProviderType();
    caps.setServiceProvider(sp);
    final ContactInfo contact=csw.getGeoServer().getGlobal().getSettings().getContact();
    sp.setProviderName((contact.getContactOrganization() != null ? contact.getContactOrganization() : ""));
    OnlineResourceType providerSite=owsf.createOnlineResourceType();
    sp.setProviderSite(providerSite);
    providerSite.setHref((csw.getOnlineResource() != null ? csw.getOnlineResource() : ""));
    ResponsiblePartySubsetType serviceContact=owsf.createResponsiblePartySubsetType();
    sp.setServiceContact(serviceContact);
    serviceContact.setIndividualName(contact.getContactPerson());
    serviceContact.setPositionName(contact.getContactPosition());
    ContactType contactInfo=owsf.createContactType();
    serviceContact.setContactInfo(contactInfo);
    AddressType address=owsf.createAddressType();
    contactInfo.setAddress(address);
    address.setAdministrativeArea(contact.getAddressState());
    address.setCity(contact.getAddressCity());
    address.setCountry(contact.getAddressCountry());
    address.setDeliveryPoint(null);
    address.setElectronicMailAddress(contact.getContactEmail());
    address.setPostalCode(contact.getAddressPostalCode());
    contactInfo.setContactInstructions(null);
    contactInfo.setHoursOfService(null);
    OnlineResourceType onlineResource=owsf.createOnlineResourceType();
    contactInfo.setOnlineResource(onlineResource);
    onlineResource.setHref(contact.getOnlineResource());
    TelephoneType telephone=owsf.createTelephoneType();
    contactInfo.setPhone(telephone);
    telephone.setFacsimile(contact.getContactFacsimile());
    telephone.setVoice(contact.getContactVoice());
    serviceContact.setRole(null);
  }
  if (sections == null || requestedSection("OperationsMetadata",sections)) {
    final String baseUrl=(String)EMFUtils.get(request,"baseUrl");
    if (baseUrl == null) {
      throw new IllegalArgumentException("Request object" + request + " has no 'baseUrl' property.");
    }
    OperationsMetadataType operationsMetadata=owsf.createOperationsMetadataType();
    caps.setOperationsMetadata(operationsMetadata);
    OperationMetadata_GetCapabilities(owsf,baseUrl,operationsMetadata);
    OperationMetadata_DescribeRecord(owsf,baseUrl,operationsMetadata);
    OperationMetadata_GetDomain(owsf,baseUrl,operationsMetadata);
    OperationMetadata_GetRecords(owsf,baseUrl,operationsMetadata);
    OperationMetadata_GetRecordById(owsf,baseUrl,operationsMetadata);
    if (store.getCapabilities().supportsTransactions()) {
      OperationMetadata_Transaction(owsf,baseUrl,operationsMetadata);
    }
    for (    DomainType param : CatalogCapabilities.operationParameters.get("OperationsMetadata")) {
      operationsMetadata.getParameter().add(param);
    }
    for (    DomainType constraint : CatalogCapabilities.operationConstraints.get("OperationsMetadata")) {
      operationsMetadata.getConstraint().add(constraint);
    }
  }
  if (sections == null || requestedSection("OperationsMetadata",sections)) {
    final FilterFactory2 ffFactory=CommonFactoryFinder.getFilterFactory2(GeoTools.getDefaultHints());
    SpatialCapabilities spatialCapabilities=new CSWSpatialCapabilities();
    Operator[] operators=new Operator[]{ffFactory.operator("EqualTo"),ffFactory.operator("Like"),ffFactory.operator("LessThan"),ffFactory.operator("GreaterThan"),ffFactory.operator("LessThanEqualTo"),ffFactory.operator("GreaterThanEqualTo"),ffFactory.operator("NotEqualTo"),ffFactory.operator("Between"),ffFactory.operator("NullCheck")};
    ComparisonOperators comparisonOperators=ffFactory.comparisonOperators(operators);
    ArithmeticOperators arithmeticOperators=ffFactory.arithmeticOperators(true,null);
    ScalarCapabilities scalarCapabilities=ffFactory.scalarCapabilities(comparisonOperators,arithmeticOperators,logicalOperators);
    ((ScalarCapabilitiesImpl)scalarCapabilities).setArithmeticOperators(null);
    IdCapabilities id=ffFactory.idCapabilities(eid,fid);
    FilterCapabilities filterCapabilities=ffFactory.capabilities("1.1.0",scalarCapabilities,spatialCapabilities,id);
    ((FilterCapabilitiesImpl)filterCapabilities).setScalar(scalarCapabilities);
    ((FilterCapabilitiesImpl)filterCapabilities).setSpatial(spatialCapabilities);
    ((FilterCapabilitiesImpl)filterCapabilities).setId(id);
    caps.setFilterCapabilities(filterCapabilities);
  }
  return caps;
}
