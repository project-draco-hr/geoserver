{
  if (options.get("fontsize") != null) {
    try {
      this.fontSize=Float.parseFloat(options.get("fontsize"));
    }
 catch (    Exception e) {
      this.LOGGER.log(Level.WARNING,"'fontsize' must be a float.",e);
    }
  }
  if (options.get("dpi") != null) {
    try {
      this.dpi=Float.parseFloat(options.get("dpi"));
    }
 catch (    Exception e) {
      this.LOGGER.log(Level.WARNING,"'dpi' must be a float.",e);
    }
  }
  if (options.get("strokewidth") != null) {
    try {
      this.strokeWidth=Float.parseFloat(options.get("strokeWidth"));
    }
 catch (    Exception e) {
      this.LOGGER.log(Level.WARNING,"'strokewidth' must be a float.",e);
    }
  }
  Color tmp=MapDecorationLayout.parseColor(options.get("bgcolor"));
  if (tmp != null)   bgcolor=tmp;
  tmp=MapDecorationLayout.parseColor(options.get("fgcolor"));
  if (tmp != null)   fgcolor=tmp;
  if (options.get("transparent") != null) {
    try {
      this.transparent=Boolean.parseBoolean(options.get("transparent"));
    }
 catch (    Exception e) {
      this.LOGGER.log(Level.WARNING,"'transparent' must be a boolean.",e);
    }
  }
  if (options.get("measurement-system") != null) {
    try {
      LOGGER.log(Level.INFO,options.get("measurement-system"));
      this.measurementSystem=MeasurementSystem.mapToEnum(options.get("measurement-system"));
    }
 catch (    Exception e) {
      this.LOGGER.log(Level.WARNING,"'measurement-system' must be one of 'metric', 'imperial' or 'both'.",e);
    }
  }
}
