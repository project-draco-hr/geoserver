{
  Charset charSet=wms.getCharSet();
  OutputStreamWriter osw=new OutputStreamWriter(out,charSet);
  PrintWriter writer=new PrintWriter(osw);
  int featuresPrinted=0;
  int maxfeatures=request.getFeatureCount();
  FeatureIterator reader=null;
  try {
    final List collections=results.getFeature();
    final int size=collections.size();
    FeatureCollection fr;
    SimpleFeature f;
    SimpleFeatureType schema;
    List<AttributeDescriptor> types;
    for (int i=0; i < size; i++) {
      fr=(FeatureCollection)collections.get(i);
      reader=fr.features();
      boolean startFeat=true;
      while (reader.hasNext()) {
        Feature feature=reader.next();
        if (startFeat) {
          writer.println("Results for FeatureType '" + fr.getSchema().getName() + "':");
          startFeat=false;
        }
        if (featuresPrinted < maxfeatures) {
          writer.println("--------------------------------------------");
          if (feature instanceof SimpleFeature) {
            f=(SimpleFeature)feature;
            schema=(SimpleFeatureType)f.getType();
            types=schema.getAttributeDescriptors();
            for (            AttributeDescriptor descriptor : types) {
              final Name name=descriptor.getName();
              if (Geometry.class.isAssignableFrom(descriptor.getType().getBinding())) {
                Geometry g=(Geometry)f.getAttribute(name);
                writer.println(name + " = [GEOMETRY (" + g.getGeometryType()+ ") with "+ g.getNumPoints()+ " points]");
              }
 else {
                writer.println(name + " = " + f.getAttribute(name));
              }
            }
          }
 else {
            writer.println(feature.toString());
          }
        }
        writer.println("--------------------------------------------");
        featuresPrinted++;
      }
    }
  }
 catch (  Exception ife) {
    LOGGER.log(Level.WARNING,"Error generating getFeaturInfo, HTML format",ife);
    writer.println("Unable to generate information " + ife);
  }
 finally {
    if (reader != null) {
      reader.close();
    }
  }
  if (featuresPrinted == 0) {
    writer.println("no features were found");
  }
  writer.flush();
}
