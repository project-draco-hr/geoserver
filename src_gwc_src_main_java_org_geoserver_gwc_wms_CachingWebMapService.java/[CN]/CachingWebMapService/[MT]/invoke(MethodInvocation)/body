{
  if (!gwc.getConfig().isDirectWMSIntegrationEnabled()) {
    return (WebMap)invocation.proceed();
  }
  final Method method=invocation.getMethod();
  Assert.isTrue(method.getDeclaringClass().equals(WebMapService.class));
  Assert.isTrue("getMap".equals(method.getName()));
  final Object[] arguments=invocation.getArguments();
  Assert.isTrue(arguments.length == 1);
  Assert.isInstanceOf(GetMapRequest.class,arguments[0]);
  final GetMapRequest request=(GetMapRequest)arguments[0];
  boolean tiled=request.isTiled();
  if (!tiled) {
    return (WebMap)invocation.proceed();
  }
  ConveyorTile cachedTile=gwc.dispatch(request);
  if (cachedTile != null) {
    if (LOGGER.isLoggable(Level.FINEST)) {
      LOGGER.finest("GetMap request intercepted, serving cached content: " + request);
    }
    final byte[] tileBytes;
{
      final Resource mapContents=cachedTile.getBlob();
      if (mapContents instanceof ByteArrayResource) {
        tileBytes=((ByteArrayResource)mapContents).getContents();
      }
 else {
        ByteArrayOutputStream out=new ByteArrayOutputStream();
        mapContents.transferTo(Channels.newChannel(out));
        tileBytes=out.toByteArray();
      }
    }
    final String ifNoneMatch=request.getHttpRequestHeader("If-None-Match");
    final byte[] hash=MessageDigest.getInstance("MD5").digest(tileBytes);
    final String etag=toHexString(hash);
    if (etag.equals(ifNoneMatch)) {
      LOGGER.finer("ETag matches, returning 304");
      throw new HttpErrorCodeException(HttpServletResponse.SC_NOT_MODIFIED);
    }
    LOGGER.finer("No matching ETag, returning cached tile");
    final String mimeType=cachedTile.getMimeType().getMimeType();
    RawMap map=new RawMap(null,tileBytes,mimeType);
    map.setResponseHeader("Cache-Control","no-cache");
    map.setResponseHeader("ETag",etag);
    map.setResponseHeader("geowebcache-tile-index",Arrays.toString(cachedTile.getTileIndex()));
    map.setContentDispositionHeader(null,"." + cachedTile.getMimeType().getFileExtension());
    return map;
  }
  return (WebMap)invocation.proceed();
}
