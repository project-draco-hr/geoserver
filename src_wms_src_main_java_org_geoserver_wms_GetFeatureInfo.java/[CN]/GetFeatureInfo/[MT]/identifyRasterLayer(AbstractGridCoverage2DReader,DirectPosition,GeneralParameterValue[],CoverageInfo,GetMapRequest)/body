{
  final MathTransform worldToGrid=reader.getOriginalGridToWorld(PixelInCell.CELL_CORNER).inverse();
  final DirectPosition rasterMid=worldToGrid.transform(position,null);
  final Rectangle2D.Double rasterArea=new Rectangle2D.Double();
  rasterArea.setFrameFromCenter(rasterMid.getOrdinate(0),rasterMid.getOrdinate(1),rasterMid.getOrdinate(0) + 10,rasterMid.getOrdinate(1) + 10);
  final Rectangle integerRasterArea=rasterArea.getBounds();
  final GridEnvelope gridEnvelope=reader.getOriginalGridRange();
  final Rectangle originalArea=(gridEnvelope instanceof GridEnvelope2D) ? (GridEnvelope2D)gridEnvelope : new Rectangle();
  XRectangle2D.intersect(integerRasterArea,originalArea,integerRasterArea);
  if (integerRasterArea.isEmpty()) {
    return null;
  }
  for (int k=0; k < parameters.length; k++) {
    if (!(parameters[k] instanceof Parameter<?>))     continue;
    final Parameter<?> parameter=(Parameter<?>)parameters[k];
    if (parameter.getDescriptor().getName().equals(AbstractGridFormat.READ_GRIDGEOMETRY2D.getName())) {
      parameter.setValue(new GridGeometry2D(new GridEnvelope2D(integerRasterArea),reader.getOriginalGridToWorld(PixelInCell.CELL_CENTER),reader.getCrs()));
    }
  }
  final GridCoverage2D coverage=(GridCoverage2D)reader.read(parameters);
  if (coverage == null) {
    if (LOGGER.isLoggable(Level.FINE))     LOGGER.fine("Unable to load raster data for this request.");
    return null;
  }
  FeatureCollection pixel=null;
  try {
    final double[] pixelValues=coverage.evaluate(position,(double[])null);
    pixel=wrapPixelInFeatureCollection(coverage,pixelValues,cinfo.getQualifiedName());
  }
 catch (  PointOutsideCoverageException e) {
  }
 finally {
    RenderedImage ri=coverage.getRenderedImage();
    coverage.dispose(true);
    if (ri instanceof PlanarImage) {
      ImageUtilities.disposePlanarImageChain((PlanarImage)ri);
    }
  }
  return pixel;
}
