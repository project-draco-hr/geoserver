{
  final GeoServerEnvironment gsEnvironment=GeoServerExtensions.bean(GeoServerEnvironment.class);
  DataStoreInfo ds=getCatalog().getFactory().createDataStore();
  ds.getConnectionParameters().put("host","${jdbc.host}");
  ds.getConnectionParameters().put("port","${jdbc.port}");
  try {
    final String dsName="GS-ENV-TEST-DS";
    ds.setName(dsName);
    getCatalog().save(ds);
    ds=getCatalog().getDataStoreByName(dsName);
    DataStoreInfo expandedDs=getCatalog().getResourcePool().clone(ds,true);
    assertTrue(ds.getConnectionParameters().get("host").equals("${jdbc.host}"));
    assertTrue(ds.getConnectionParameters().get("port").equals("${jdbc.port}"));
    if (GeoServerEnvironment.ALLOW_ENV_PARAMETRIZATION) {
      assertTrue(expandedDs.getConnectionParameters().get("host").equals(gsEnvironment.resolveValue("${jdbc.host}")));
      assertTrue(expandedDs.getConnectionParameters().get("port").equals(gsEnvironment.resolveValue("${jdbc.port}")));
    }
 else {
      assertTrue(expandedDs.getConnectionParameters().get("host").equals("${jdbc.host}"));
      assertTrue(expandedDs.getConnectionParameters().get("port").equals("${jdbc.port}"));
    }
  }
  finally {
    getCatalog().remove(ds);
  }
}
