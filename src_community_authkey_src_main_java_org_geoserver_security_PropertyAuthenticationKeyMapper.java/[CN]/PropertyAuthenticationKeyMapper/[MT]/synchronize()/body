{
  checkProperties();
  File propFile=new File(getSecurityManager().getUserGroupRoot(),getUserGroupServiceName());
  propFile=new File(propFile,AUTHKEYS_FILE);
  File backupFile=new File(getSecurityManager().getUserGroupRoot(),getUserGroupServiceName());
  backupFile=new File(backupFile,AUTHKEYS_FILE + ".backup");
  if (backupFile.exists())   throw new IOException("The file: " + backupFile.getCanonicalPath() + " has to be removed first");
  authKeyProps=new Properties();
  Properties oldProps=new Properties();
  if (propFile.exists()) {
    propFile.renameTo(backupFile);
    oldProps.load(new FileInputStream(backupFile));
  }
  Map<Object,Object> reverseMap=new HashMap<Object,Object>();
  for (  Entry<Object,Object> entry : oldProps.entrySet()) {
    reverseMap.put(entry.getValue(),entry.getKey());
  }
  GeoServerUserGroupService service=getUserGroupService();
  int counter=0;
  for (  GeoServerUser user : service.getUsers()) {
    if (reverseMap.containsKey(user.getUsername())) {
      authKeyProps.put(reverseMap.get(user.getUsername()),user.getUsername());
    }
 else {
      authKeyProps.put(createAuthKey(),user.getUsername());
      counter++;
    }
  }
  authKeyProps.store(new FileOutputStream(propFile,false),"Format is authkey=username");
  if (backupFile.exists())   backupFile.delete();
  fileWatcher=new PropertyFileWatcher(propFile);
  return counter;
}
