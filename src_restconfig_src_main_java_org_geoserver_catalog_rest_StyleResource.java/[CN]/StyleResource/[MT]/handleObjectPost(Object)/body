{
  String workspace=getAttribute("workspace");
  String layer=getAttribute("layer");
  if (object instanceof StyleInfo) {
    StyleInfo style=(StyleInfo)object;
    if (layer != null) {
      StyleInfo existing=catalog.getStyleByName(style.getName());
      if (existing == null) {
        throw new RestletException("No such style: " + style.getName(),Status.CLIENT_ERROR_NOT_FOUND);
      }
      LayerInfo l=catalog.getLayerByName(layer);
      l.getStyles().add(existing);
      String def=getRequest().getResourceRef().getQueryAsForm().getFirstValue("default");
      if ("true".equals(def)) {
        l.setDefaultStyle(existing);
      }
      catalog.save(l);
      LOGGER.info("POST style " + style.getName() + " to layer "+ layer);
    }
 else {
      if (workspace != null) {
        style.setWorkspace(catalog.getWorkspaceByName(workspace));
      }
      catalog.add(style);
      LOGGER.info("POST style " + style.getName());
    }
    return style.getName();
  }
 else   if (getRequest().getEntity().getMediaType().equals(MediaType.APPLICATION_ZIP) && object instanceof InputStream) {
    File directory=null;
    try {
      directory=unzipSldPackage((InputStream)object);
      File uploadedFile=retrieveSldFile(directory);
      Style styleSld=parseSld(uploadedFile);
      String name=getRequest().getResourceRef().getQueryAsForm().getFirstValue("name");
      if (name == null) {
        name=findNameFromObject(styleSld);
      }
      if (catalog.getStyleByName(workspace,name) != null) {
        throw new RestletException("Style " + name + " already exists.",Status.CLIENT_ERROR_FORBIDDEN);
      }
      saveImageResources(directory,workspace);
      StyleInfo styleInfo=catalog.getFactory().createStyle();
      styleInfo.setName(name);
      styleInfo.setFilename(name + ".sld");
      if (workspace != null) {
        styleInfo.setWorkspace(catalog.getWorkspaceByName(workspace));
      }
      Resource style=dataDir.style(styleInfo);
      if (dataDir.style(styleInfo).getType() != Resource.Type.UNDEFINED) {
        String msg="Style resource " + styleInfo.getFilename() + " already exists.";
        throw new RestletException(msg,Status.CLIENT_ERROR_FORBIDDEN);
      }
      serializeSldFileInCatalog(style,uploadedFile);
      catalog.add(styleInfo);
      LOGGER.info("POST Style Package: " + name + ", workspace: "+ workspace);
      return name;
    }
 catch (    RestletException e) {
      throw e;
    }
catch (    Exception e) {
      e.printStackTrace();
      LOGGER.severe("Error processing the style package (POST): " + e.getMessage());
      throw new RestletException("Error processing the style",Status.SERVER_ERROR_INTERNAL,e);
    }
 finally {
      FileUtils.deleteQuietly(directory);
    }
  }
 else   if (object instanceof Style || object instanceof InputStream) {
    String name=getRequest().getResourceRef().getQueryAsForm().getFirstValue("name");
    ;
    if (name == null) {
      name=findNameFromObject(object);
    }
    if (catalog.getStyleByName(workspace,name) != null) {
      throw new RestletException("Style " + name + " already exists.",Status.CLIENT_ERROR_FORBIDDEN);
    }
    StyleHandler styleFormat=((StyleFormat)getFormatPostOrPut()).getHandler();
    StyleInfo sinfo=catalog.getFactory().createStyle();
    sinfo.setName(name);
    sinfo.setFilename(name + "." + styleFormat.getFileExtension());
    sinfo.setFormat(styleFormat.getFormat());
    sinfo.setFormatVersion(styleFormat.versionForMimeType(getRequest().getEntity().getMediaType().getName()));
    if (workspace != null) {
      sinfo.setWorkspace(catalog.getWorkspaceByName(workspace));
    }
    GeoServerDataDirectory dataDir=new GeoServerDataDirectory(catalog.getResourceLoader());
    if (dataDir.style(sinfo).getType() != Resource.Type.UNDEFINED) {
      String msg="Style resource " + sinfo.getFilename() + " already exists.";
      throw new RestletException(msg,Status.CLIENT_ERROR_FORBIDDEN);
    }
    ResourcePool resourcePool=catalog.getResourcePool();
    try {
      if (object instanceof Style) {
        resourcePool.writeStyle(sinfo,(Style)object);
      }
 else {
        resourcePool.writeStyle(sinfo,(InputStream)object);
      }
    }
 catch (    IOException e) {
      throw new RestletException("Error writing style",Status.SERVER_ERROR_INTERNAL,e);
    }
    catalog.add(sinfo);
    LOGGER.info("POST Style " + name);
    return name;
  }
  return null;
}
