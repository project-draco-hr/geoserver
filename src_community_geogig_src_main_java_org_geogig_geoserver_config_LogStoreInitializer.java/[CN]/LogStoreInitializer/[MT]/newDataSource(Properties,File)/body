{
  final String driverName=properties.getProperty(PROP_DRIVER_CLASS);
  checkNotNull(driverName,"driverName not provided in properties file %s",configFile);
  try {
    Class.forName(driverName);
  }
 catch (  ClassNotFoundException e) {
    throw new IllegalArgumentException(String.format("JDBC Driver '%s' does not exist in the classpath",driverName));
  }
  final String jdbcUrl=properties.getProperty(PROP_URL);
  checkArgument(jdbcUrl != null,"url not provided in properties file %s",configFile);
  final String username=properties.getProperty(PROP_USER);
  final String password=properties.getProperty(PROP_PASSWORD);
  final String maxConnectionsProp=properties.getProperty(PROP_MAX_CONNECTIONS);
  int maxConnections=10;
  if (maxConnectionsProp != null) {
    try {
      maxConnections=Integer.parseInt(maxConnectionsProp);
      checkArgument(maxConnections > 0,"maxConnections must be an integer > 0: %s",maxConnections);
    }
 catch (    NumberFormatException e) {
      throw new IllegalArgumentException("Can't parse maxConnections as an int: " + maxConnectionsProp,e);
    }
  }
  DataSource dataSource;
  if (jdbcUrl.startsWith("jdbc:sqlite")) {
    Connection connection;
    try {
      connection=DriverManager.getConnection(jdbcUrl);
    }
 catch (    SQLException e) {
      throw Throwables.propagate(e);
    }
    dataSource=new SingleConnectionDataSource(connection);
  }
 else {
    HikariConfig config=new HikariConfig();
    config.setJdbcUrl(jdbcUrl);
    config.setUsername(username);
    config.setPassword(password);
    config.setMaximumPoolSize(maxConnections);
    dataSource=new HikariDataSource(config);
  }
  return dataSource;
}
