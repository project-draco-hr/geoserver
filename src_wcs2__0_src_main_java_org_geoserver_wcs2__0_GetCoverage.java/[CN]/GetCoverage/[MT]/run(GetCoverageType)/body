{
  final LayerInfo linfo=NCNameResourceCodec.getCoverage(catalog,request.getCoverageId());
  if (linfo == null) {
    throw new WCS20Exception("Could not locate coverage " + request.getCoverageId(),WCS20Exception.WCS20ExceptionCode.NoSuchCoverage,"coverageId");
  }
  final CoverageInfo cinfo=(CoverageInfo)linfo.getResource();
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.fine("Executing GetCoverage request on coverage :" + linfo.toString());
  }
  GridCoverage coverage=null;
  try {
    Map<String,ExtensionItemType> extensions=extractExtensions(request);
    final Hints hints=GeoTools.getDefaultHints();
    hints.add(WCSUtils.getReaderHints(wcs));
    hints.add(new RenderingHints(JAI.KEY_BORDER_EXTENDER,BorderExtender.createInstance(BorderExtender.BORDER_COPY)));
    final GridCoverage2DReader reader=(GridCoverage2DReader)cinfo.getGridCoverageReader(new DefaultProgressListener(),hints);
    WCSDimensionsSubsetHelper helper=parseGridCoverageRequest(cinfo,reader,request,extensions);
    GridCoverageRequest gcr=helper.getGridCoverageRequest();
    final GridCoverageFactory coverageFactory=CoverageFactoryFinder.getGridCoverageFactory(hints);
    if (reader instanceof StructuredGridCoverage2DReader && formatSupportMDOutput(request.getFormat())) {
      final List<GridCoverageRequest> requests=helper.splitRequest();
      if (requests == null || requests.isEmpty()) {
        throw new IllegalArgumentException("Splitting requests returned nothing");
      }
 else {
        if (LOGGER.isLoggable(Level.FINE)) {
          LOGGER.fine("Splitting request generated " + requests.size() + " sub requests");
        }
      }
      final List<DimensionBean> dimensions=helper.setupDimensions();
      final String nativeName=cinfo.getNativeCoverageName();
      final String coverageName=nativeName != null ? nativeName : reader.getGridCoverageNames()[0];
      final GranuleStackImpl stack=new GranuleStackImpl(coverageName,reader.getCoordinateReferenceSystem(),dimensions);
      long outputLimit=wcs.getMaxOutputMemory() * 1024;
      long inputLimit=wcs.getMaxInputMemory() * 1024;
      ImageSizeRecorder incrementalOutputSize=new ImageSizeRecorder(outputLimit,false);
      ImageSizeRecorder incrementalInputSize=new ImageSizeRecorder(inputLimit,true);
      int numRequests=requests.size();
      GridCoverageRequest firstRequest=requests.remove(0);
      GridCoverage2D firstCoverage=setupCoverage(helper,firstRequest,request,reader,hints,extensions,dimensions,incrementalOutputSize,incrementalInputSize,coverageFactory);
      long actual=incrementalInputSize.finalSize();
      long estimatedSize=actual * numRequests;
      if (outputLimit > 0 && estimatedSize > outputLimit) {
        throw new WcsException("This request is trying to generate too much data, " + "the limit is " + formatBytes(outputLimit) + " but the estimated amount of bytes to be "+ "written in the output is "+ formatBytes(estimatedSize));
      }
      stack.addCoverage(firstCoverage);
      for (      GridCoverageRequest subRequest : requests) {
        GridCoverage2D singleCoverage=setupCoverage(helper,subRequest,request,reader,hints,extensions,dimensions,incrementalOutputSize,incrementalInputSize,coverageFactory);
        stack.addCoverage(singleCoverage);
      }
      coverage=stack;
    }
 else {
      coverage=setupCoverage(helper,gcr,request,reader,hints,extensions,null,null,null,coverageFactory);
    }
  }
 catch (  ServiceException e) {
    throw e;
  }
catch (  Exception e) {
    throw new WCS20Exception("Failed to read the coverage " + request.getCoverageId(),e);
  }
 finally {
    if (coverage != null) {
      CoverageCleanerCallback.addCoverages(coverage);
    }
  }
  return coverage;
}
