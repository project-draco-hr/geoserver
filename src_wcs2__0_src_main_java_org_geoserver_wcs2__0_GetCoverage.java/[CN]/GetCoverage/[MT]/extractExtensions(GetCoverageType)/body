{
  Utilities.ensureNonNull("request",request);
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.fine("Extracting extensions from provided request");
  }
  final ExtensionType extension=request.getExtension();
  final Map<String,ExtensionItemType> parsedExtensions=new HashMap<String,ExtensionItemType>();
  if (extension != null) {
    final EList<ExtensionItemType> extensions=extension.getContents();
    for (    final ExtensionItemType extensionItem : extensions) {
      final String extensionName=extensionItem.getName();
      if (extensionName == null || extensionName.length() <= 0) {
        throw new WCS20Exception("Null extension");
      }
      if (LOGGER.isLoggable(Level.FINE)) {
        LOGGER.fine("Parsing extension " + extensionName);
      }
      if (extensionName.equals("subsettingCrs")) {
        parsedExtensions.put("subsettingCrs",extensionItem);
        if (LOGGER.isLoggable(Level.FINE)) {
          LOGGER.fine("Added extension subsettingCrs");
        }
      }
 else       if (extensionName.equals("outputCrs")) {
        parsedExtensions.put("outputCrs",extensionItem);
        if (LOGGER.isLoggable(Level.FINE)) {
          LOGGER.fine("Added extension outputCrs");
        }
      }
 else       if (extensionName.equals("Scaling")) {
        parsedExtensions.put("Scaling",extensionItem);
        if (LOGGER.isLoggable(Level.FINE)) {
          LOGGER.fine("Added extension Scaling");
        }
      }
 else       if (extensionName.equals("Interpolation")) {
        parsedExtensions.put("Interpolation",extensionItem);
        if (LOGGER.isLoggable(Level.FINE)) {
          LOGGER.fine("Added extension Interpolation");
        }
      }
 else       if (extensionName.equals("rangeSubset") || extensionName.equals("RangeSubset")) {
        parsedExtensions.put("rangeSubset",extensionItem);
        if (LOGGER.isLoggable(Level.FINE)) {
          LOGGER.fine("Added extension rangeSubset");
        }
      }
 else       if (extensionName.equals(WCS20Const.OVERVIEW_POLICY_EXTENSION)) {
        parsedExtensions.put(WCS20Const.OVERVIEW_POLICY_EXTENSION,extensionItem);
        if (LOGGER.isLoggable(Level.FINE)) {
          LOGGER.fine("Added extension overviewPolicy ");
        }
      }
    }
  }
 else   if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.fine("No extensions found in provided request");
  }
  return parsedExtensions;
}
