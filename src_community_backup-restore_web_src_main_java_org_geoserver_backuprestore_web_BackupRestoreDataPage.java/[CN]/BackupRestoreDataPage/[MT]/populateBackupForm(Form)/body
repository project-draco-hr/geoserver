{
  form.add(new CheckBox("backupOptOverwirte",new Model<Boolean>(false)));
  form.add(new CheckBox("backupOptBestEffort",new Model<Boolean>(false)));
  form.add(statusLabel=new Label("status",new Model()).setOutputMarkupId(true));
  form.add(new AjaxSubmitLink("newBackupStart",form){
    @Override protected void disableLink(    ComponentTag tag){
      super.disableLink(tag);
      tag.setName("a");
      tag.addBehavior(AttributeModifier.replace("class","disabled"));
    }
    protected void onError(    AjaxRequestTarget target,    Form<?> form){
      target.add(feedbackPanel);
    }
    protected void onSubmit(    AjaxRequestTarget target,    final Form<?> form){
      statusLabel.add(AttributeModifier.replace("class","working-link"));
      statusLabel.setDefaultModelObject("Working");
      target.add(statusLabel);
      Component cancel=form.get("cancel");
      cancel.setEnabled(true);
      target.add(cancel);
      setEnabled(false);
      target.add(this);
      final AjaxSubmitLink self=this;
      final Long jobid;
      try {
        jobid=launchBackupExecution(form);
      }
 catch (      Exception e) {
        error(e);
        LOGGER.log(Level.WARNING,"Error starting a new Backup",e);
        return;
      }
 finally {
        resetButtons(form,target,"newBackupStart");
        target.add(feedbackPanel);
      }
      cancel.setDefaultModelObject(jobid);
      this.add(new AbstractAjaxTimerBehavior(Duration.milliseconds(100)){
        @Override protected void onTimer(        AjaxRequestTarget target){
          Backup backupFacade=BackupRestoreWebUtils.backupFacade();
          BackupExecutionAdapter exec=backupFacade.getBackupExecutions().get(jobid);
          if (!exec.isRunning()) {
            try {
              if (exec.getAllFailureExceptions() != null && !exec.getAllFailureExceptions().isEmpty()) {
                getSession().error(exec.getAllFailureExceptions().get(0));
                setResponsePage(BackupRestoreDataPage.class);
              }
 else               if (exec.isStopping()) {
              }
 else {
                PageParameters pp=new PageParameters();
                pp.add("id",exec.getId());
                pp.add("clazz",BackupExecutionAdapter.class.getSimpleName());
                setResponsePage(BackupRestorePage.class,pp);
              }
            }
 catch (            Exception e) {
              error(e);
              LOGGER.log(Level.WARNING,"",e);
            }
 finally {
              stop(null);
              resetButtons(form,target,"newBackupStart");
              target.add(feedbackPanel);
            }
            return;
          }
          String msg=exec != null ? exec.getStatus().toString() : "Working";
          statusLabel.setDefaultModelObject(msg);
          target.add(statusLabel);
        }
        @Override public boolean canCallListenerInterface(        Component component,        Method method){
          if (self.equals(component) && method.getDeclaringClass().equals(org.apache.wicket.behavior.IBehaviorListener.class) && method.getName().equals("onRequest")) {
            return true;
          }
          return super.canCallListenerInterface(component,method);
        }
      }
);
    }
    private Long launchBackupExecution(    Form<?> form) throws Exception {
      ResourceFilePanel panel=(ResourceFilePanel)newBackupRestorePanel.get("backupResource");
      Resource archiveFile=null;
      try {
        archiveFile=panel.getResource();
      }
 catch (      NullPointerException e) {
        throw new Exception("Backup Archive File is Mandatory!");
      }
      if (archiveFile == null || archiveFile.getType() == Type.DIRECTORY || FilenameUtils.getExtension(archiveFile.name()).isEmpty()) {
        throw new Exception("Backup Archive File is Mandatory and should not be a Directory or URI.");
      }
      Filter filter=null;
      WorkspaceInfo ws=(WorkspaceInfo)workspace.getObject();
      if (ws != null) {
        filter=ECQL.toFilter("name = '" + ws.getName() + "'");
      }
      Hints hints=new Hints(new HashMap(2));
      Boolean backupOptOverwirte=((CheckBox)form.get("backupOptOverwirte")).getModelObject();
      Boolean backupOptBestEffort=((CheckBox)form.get("backupOptBestEffort")).getModelObject();
      if (backupOptBestEffort) {
        hints.add(new Hints(new Hints.OptionKey(Backup.PARAM_BEST_EFFORT_MODE),Backup.PARAM_BEST_EFFORT_MODE));
      }
      Backup backupFacade=BackupRestoreWebUtils.backupFacade();
      return backupFacade.runBackupAsync(archiveFile,backupOptOverwirte,filter,hints).getId();
    }
  }
);
  form.add(new AjaxLink<Long>("cancel",new Model<Long>()){
    protected void disableLink(    ComponentTag tag){
      super.disableLink(tag);
      tag.setName("a");
      tag.addBehavior(AttributeModifier.replace("class","disabled"));
    }
    @Override public void onClick(    AjaxRequestTarget target){
      Long jobid=getModelObject();
      if (jobid != null) {
        try {
          BackupRestoreWebUtils.backupFacade().stopExecution(jobid);
          setResponsePage(BackupRestoreDataPage.class);
        }
 catch (        NoSuchJobExecutionException|JobExecutionNotRunningException e) {
          LOGGER.log(Level.WARNING,"",e);
        }
      }
      setEnabled(false);
      target.add(this);
    }
  }
.setOutputMarkupId(true).setEnabled(false));
  backupRestoreExecutionsTable=new BackupRestoreExecutionsTable("backups",new BackupRestoreExecutionsProvider(true,BackupExecutionAdapter.class){
    @Override protected List<org.geoserver.web.wicket.GeoServerDataProvider.Property<AbstractExecutionAdapter>> getProperties(){
      return Arrays.asList(ID,STATE,STARTED,PROGRESS,ARCHIVEFILE,OPTIONS);
    }
  }
,true,BackupExecutionAdapter.class){
    protected void onSelectionUpdate(    AjaxRequestTarget target){
    }
  }
;
  backupRestoreExecutionsTable.setOutputMarkupId(true);
  backupRestoreExecutionsTable.setFilterable(false);
  backupRestoreExecutionsTable.setSortable(false);
  form.add(backupRestoreExecutionsTable);
}
