{
  wpsInfo=getGeoServer().getService(WPSInfo.class);
  Form form=new Form("form",new CompoundPropertyModel(wpsInfo));
  processFactories=cloneFactoryInfos(wpsInfo.getProcessGroups());
  ProcessFactoryInfoProvider provider=new ProcessFactoryInfoProvider(processFactories,getLocale());
  GeoServerRoleService roleService=getSecurityManager().getActiveRoleService();
  try {
    for (    GeoServerRole r : roleService.getRoles()) {
      availableRoles.add(r.getAuthority());
    }
  }
 catch (  IOException e1) {
    LOGGER.log(Level.FINER,e1.getMessage(),e1);
  }
  final AutoCompleteSettings settings=new AutoCompleteSettings();
  settings.setShowCompleteListOnFocusGain(false);
  settings.setShowListOnEmptyInput(true);
  settings.setShowListOnFocusGain(true);
  settings.setMaxHeightInPx(100);
  GeoServerTablePanel<ProcessGroupInfo> processFilterEditor=new GeoServerTablePanel<ProcessGroupInfo>("processFilterTable",provider){
    @Override protected Component getComponentForProperty(    String id,    final IModel itemModel,    Property<ProcessGroupInfo> property){
      if (property.getName().equals("enabled")) {
        Fragment fragment=new Fragment(id,"enabledFragment",WPSAccessRulePage.this);
        CheckBox enabled=new CheckBox("enabled",property.getModel(itemModel));
        enabled.setOutputMarkupId(true);
        fragment.add(enabled);
        return fragment;
      }
 else       if (property.getName().equals("prefix")) {
        return new Label(id,property.getModel(itemModel));
      }
 else       if (property.getName().equals("title")) {
        return new Label(id,property.getModel(itemModel));
      }
 else       if (property.getName().equals("summary")) {
        return new Label(id,property.getModel(itemModel));
      }
 else       if (property.getName().equals("roles")) {
        Fragment fragment=new Fragment(id,"rolesFragment",WPSAccessRulePage.this);
        TextArea<String> roles=new TextArea<String>("roles",property.getModel(itemModel)){
          public org.apache.wicket.util.convert.IConverter getConverter(          java.lang.Class<?> type){
            return new RolesConverter(availableRoles);
          }
        }
;
        StringBuilder selectedRoles=new StringBuilder();
        IAutoCompleteRenderer<String> roleRenderer=new RolesRenderer(selectedRoles);
        AutoCompleteBehavior<String> b=new RolesAutoCompleteBehavior(roleRenderer,settings,selectedRoles,availableRoles);
        roles.setOutputMarkupId(true);
        roles.add(b);
        fragment.add(roles);
        return fragment;
      }
 else       if (property.getName().equals("edit")) {
        Fragment fragment=new Fragment(id,"linkFragment",WPSAccessRulePage.this);
        Link link=new Link("link"){
          @Override public void onClick(){
            ProcessGroupInfo pfi=(ProcessGroupInfo)itemModel.getObject();
            setResponsePage(new ProcessSelectionPage(WPSAccessRulePage.this,pfi));
          }
        }
;
        fragment.add(link);
        return fragment;
      }
      return null;
    }
  }
;
  processFilterEditor.setFilterable(false);
  processFilterEditor.setPageable(false);
  processFilterEditor.setOutputMarkupId(true);
  form.add(processFilterEditor);
  form.add(new AjaxLink("processAccessModeHelp"){
    @Override public void onClick(    AjaxRequestTarget target){
      dialog.showInfo(target,new StringResourceModel("processAccessModeHelp.title",getPage(),null),new StringResourceModel("processAccessModeHelp.message",getPage(),null));
    }
  }
);
  catalogModeChoice=new RadioChoice("processAccessMode",new PropertyModel<CatalogMode>(wpsInfo,"catalogMode"),CATALOG_MODES,new CatalogModeRenderer());
  catalogModeChoice.setSuffix(" ");
  form.add(catalogModeChoice);
  SubmitLink submit=new SubmitLink("submit",new StringResourceModel("save",(Component)null,null)){
    @Override public void onSubmit(){
      try {
        List<ProcessGroupInfo> factories=wpsInfo.getProcessGroups();
        factories.clear();
        factories.addAll(processFactories);
        getGeoServer().save(wpsInfo);
        doReturn();
      }
 catch (      Exception e) {
        error(e);
      }
    }
  }
;
  form.add(submit);
  Button cancel=new Button("cancel",new StringResourceModel("cancel",(Component)null,null)){
    public void onSubmit(){
      doReturn();
    }
  }
;
  form.add(cancel);
  add(form);
}
