{
  final String serviceJID=(message != null ? message.getFrom() : packet.getFrom());
  final String pID=signalArgs.get("id");
  final String msg=signalArgs.get("message");
  if (pID != null && pID.equalsIgnoreCase("master") && msg != null && msg.equals("loadavg")) {
    Map<String,Object> outputs=new HashMap<String,Object>();
    try {
      final List<RemoteMachineDescriptor> registeredProcessingMachines=xmppClient.getRegisteredProcessingMachines();
synchronized (registeredProcessingMachines) {
        RemoteMachineDescriptor registeredProcessingMachine=null;
        for (        RemoteMachineDescriptor node : registeredProcessingMachines) {
          if (serviceJID.equals(node.getNodeJID())) {
            registeredProcessingMachine=node;
            registeredProcessingMachine.setAvailable(true);
            break;
          }
        }
        if (registeredProcessingMachine != null) {
          for (          Entry<String,String> result : signalArgs.entrySet()) {
            if (result.getKey().startsWith("result_")) {
              final String key=result.getKey().substring("result_".length());
              final String serviceResultString=URLDecoder.decode(result.getValue(),"UTF-8");
              final JSONObject serviceResultJSON=(JSONObject)JSONSerializer.toJSON(serviceResultString);
              final Object output=xmppClient.unPickle(xmppClient.pickle(serviceResultJSON));
              if (output instanceof Map) {
                Map<String,Object> resultParams=(Map<String,Object>)output;
                try {
                  final Object value=(resultParams.get(key + "_value") != null ? resultParams.get(key + "_value") : null);
                  final String description=(resultParams.get(key + "_description") != null && resultParams.get(result.getKey() + "_description") instanceof String ? (String)resultParams.get(key + "_description") : null);
                  if ("vmem".equalsIgnoreCase(key)) {
                    registeredProcessingMachine.setMemPercUsed((Double)value);
                  }
                  if ("loadavg".equalsIgnoreCase(key)) {
                    registeredProcessingMachine.setLoadAverage((Double)value);
                  }
                }
 catch (                Exception e) {
                  LOGGER.log(Level.SEVERE,"Exception occurred while trying to produce the result:",e);
                }
              }
            }
          }
        }
      }
    }
 catch (    PickleException e) {
      LOGGER.log(Level.FINER,e.getMessage(),e);
    }
catch (    IOException e) {
      LOGGER.log(Level.FINER,e.getMessage(),e);
    }
catch (    Exception e) {
      LOGGER.log(Level.FINER,e.getMessage(),e);
    }
  }
}
