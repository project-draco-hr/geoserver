{
  ReadOnlyDataStore ro=new ReadOnlyDataStore(ds,WrapperPolicy.readOnlyChallenge(null));
  try {
    ro.createSchema(null);
    fail("Should have failed with a security exception");
  }
 catch (  Exception e) {
    if (ReadOnlyDataStoreTest.isSpringSecurityException(e) == false)     fail("Should have failed with a security exception");
  }
  try {
    ro.updateSchema((String)null,null);
    fail("Should have failed with a security exception");
  }
 catch (  Exception e) {
    if (ReadOnlyDataStoreTest.isSpringSecurityException(e) == false)     fail("Should have failed with a security exception");
  }
  try {
    ro.updateSchema((Name)null,null);
    fail("Should have failed with a security exception");
  }
 catch (  Exception e) {
    if (ReadOnlyDataStoreTest.isSpringSecurityException(e) == false)     fail("Should have failed with a security exception");
  }
  try {
    ro.getFeatureWriter("states",Transaction.AUTO_COMMIT);
    fail("Should have failed with a security exception");
  }
 catch (  Exception e) {
    if (ReadOnlyDataStoreTest.isSpringSecurityException(e) == false)     fail("Should have failed with a security exception");
  }
  try {
    ro.getFeatureWriter("states",Filter.INCLUDE,Transaction.AUTO_COMMIT);
    fail("Should have failed with a security exception");
  }
 catch (  Exception e) {
    if (ReadOnlyDataStoreTest.isSpringSecurityException(e) == false)     fail("Should have failed with a security exception");
  }
  try {
    ro.getFeatureWriterAppend("states",Transaction.AUTO_COMMIT);
    fail("Should have failed with a security exception");
  }
 catch (  Exception e) {
    if (ReadOnlyDataStoreTest.isSpringSecurityException(e) == false)     fail("Should have failed with a security exception");
  }
}
