{
  super.configureXStream(xstream);
  xstream.alias("script",Script.class);
  xstream.alias("scripts",List.class);
  final String name="script";
  xstream.registerConverter(new CollectionConverter(xstream.getMapper()){
    public boolean canConvert(    Class type){
      return Collection.class.isAssignableFrom(type);
    }
    @Override protected void writeItem(    Object item,    MarshallingContext context,    HierarchicalStreamWriter writer){
      writer.startNode(name);
      context.convertAnother(item);
      writer.endNode();
    }
  }
);
  xstream.registerConverter(new Converter(){
    public boolean canConvert(    Class type){
      return Script.class.isAssignableFrom(type);
    }
    public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
      String name=((Script)source).getName();
      writer.startNode("name");
      writer.setValue(name);
      writer.endNode();
      encodeLink(name,writer);
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      return null;
    }
  }
);
}
