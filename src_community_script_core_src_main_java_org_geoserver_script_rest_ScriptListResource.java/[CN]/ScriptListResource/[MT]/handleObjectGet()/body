{
  final String type=(String)getRequest().getAttributes().get("type");
  File dir=null;
  try {
    dir=scriptMgr.findScriptDir(path);
  }
 catch (  IOException e) {
    throw new RestletException(format("Error looking up script dir %s",path),Status.SERVER_ERROR_INTERNAL,e);
  }
  List<Script> scripts=Lists.newArrayList();
  if (dir != null) {
    FileFilter filter=type != null ? new FileFilter(){
      @Override public boolean accept(      File pathname){
        return type.equalsIgnoreCase(FilenameUtils.getExtension(pathname.getName()));
      }
    }
 : new FileFilter(){
      @Override public boolean accept(      File pathname){
        return true;
      }
    }
;
    for (    File f : dir.listFiles(filter)) {
      if (path.equals("apps")) {
        File mainScript=scriptMgr.findAppMainScript(f);
        String name=mainScript.getAbsolutePath().substring(f.getParentFile().getAbsolutePath().length() + 1).replace("\\","/");
        scripts.add(new Script(name));
      }
 else       if (path.equals("wps")) {
        if (f.isDirectory()) {
          String namespace=f.getName();
          File[] files=f.listFiles();
          for (          File file : files) {
            String name=namespace + ":" + file.getName();
            scripts.add(new Script(name));
          }
        }
 else {
          String name=f.getName();
          scripts.add(new Script(name));
        }
      }
 else {
        String name=f.getName();
        scripts.add(new Script(name));
      }
    }
  }
 else {
  }
  return scripts;
}
