{
  final String type=(String)getRequest().getAttributes().get("type");
  org.geoserver.platform.resource.Resource dir=scriptMgr.script(path);
  List<Script> scripts=Lists.newArrayList();
  if (dir != null) {
    Filter<org.geoserver.platform.resource.Resource> filter=type != null ? new Filter<org.geoserver.platform.resource.Resource>(){
      @Override public boolean accept(      org.geoserver.platform.resource.Resource pathname){
        return type.equalsIgnoreCase(FilenameUtils.getExtension(pathname.name()));
      }
    }
 : new Filter<org.geoserver.platform.resource.Resource>(){
      @Override public boolean accept(      org.geoserver.platform.resource.Resource pathname){
        return true;
      }
    }
;
    for (    org.geoserver.platform.resource.Resource f : Resources.list(dir,filter)) {
      if (path.equals("apps")) {
        org.geoserver.platform.resource.Resource mainScript=scriptMgr.findAppMainScript(f);
        if (mainScript != null) {
          String name=mainScript.path().substring(f.parent().path().length() + 1).replace("\\","/");
          scripts.add(new Script(name));
        }
      }
 else       if (path.equals("wps")) {
        if (f.getType() == Type.DIRECTORY) {
          String namespace=f.name();
          List<org.geoserver.platform.resource.Resource> files=f.list();
          for (          org.geoserver.platform.resource.Resource file : files) {
            String name=namespace + ":" + file.name();
            scripts.add(new Script(name));
          }
        }
 else {
          String name=f.name();
          scripts.add(new Script(name));
        }
      }
 else {
        String name=f.name();
        scripts.add(new Script(name));
      }
    }
  }
 else {
  }
  return scripts;
}
