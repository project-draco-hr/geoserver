{
  MockHttpServletResponse response=null;
  byte[] tiffContents=null;
  response=getAsServletResponse("wcs?request=GetCoverage&service=WCS&version=2.0.1" + "&coverageId=wcs__BlueMarble&overviewPolicy=IGNORE&scalesize=http://www.opengis.net/def/axis/OGC/1/i(180)," + "http://www.opengis.net/def/axis/OGC/1/j(180)");
  assertEquals("image/tiff",response.getContentType());
  tiffContents=getBinary(response);
  File fileNative=File.createTempFile("native","native.tiff",new File("./target"));
  FileUtils.writeByteArrayToFile(fileNative,tiffContents);
  response=getAsServletResponse("wcs?request=GetCoverage&service=WCS&version=2.0.1" + "&coverageId=wcs__BlueMarble&overviewPolicy=NEAREST&scalesize=http://www.opengis.net/def/axis/OGC/1/i(180)," + "http://www.opengis.net/def/axis/OGC/1/j(180)");
  assertEquals("image/tiff",response.getContentType());
  tiffContents=getBinary(response);
  File fileOverviewTS=File.createTempFile("overviewTS","overviewTS.tiff",new File("./target"));
  FileUtils.writeByteArrayToFile(fileOverviewTS,tiffContents);
  response=getAsServletResponse("wcs?request=GetCoverage&service=WCS&version=2.0.1" + "&coverageId=wcs__BlueMarble&overviewPolicy=NEAREST&SCALEFACTOR=0.5");
  assertEquals("image/tiff",response.getContentType());
  tiffContents=getBinary(response);
  File fileOverviewSF=File.createTempFile("overviewSF","overviewSF.tiff",new File("./target"));
  FileUtils.writeByteArrayToFile(fileOverviewSF,tiffContents);
  TIFFImageReaderSpi spi=new TIFFImageReaderSpi();
  TIFFImageReader readerNative=null;
  TIFFImageReader readerOverviewTS=null;
  TIFFImageReader readerOverviewSF=null;
  FileImageInputStream streamNative=null;
  FileImageInputStream streamOverviewTS=null;
  FileImageInputStream streamOverviewSF=null;
  try {
    streamNative=new FileImageInputStream(fileNative);
    readerNative=(TIFFImageReader)spi.createReaderInstance();
    readerNative.setInput(streamNative);
    streamOverviewTS=new FileImageInputStream(fileOverviewTS);
    readerOverviewTS=(TIFFImageReader)spi.createReaderInstance();
    readerOverviewTS.setInput(streamOverviewTS);
    streamOverviewSF=new FileImageInputStream(fileOverviewSF);
    readerOverviewSF=(TIFFImageReader)spi.createReaderInstance();
    readerOverviewSF.setInput(streamOverviewSF);
    RenderedImage riNative=readerNative.read(0);
    Raster rasterNative=riNative.getData();
    assertEquals(180,rasterNative.getWidth());
    assertEquals(180,rasterNative.getHeight());
    final int refX=11;
    final int refY=65;
    final int r1=rasterNative.getSample(refX,refY,0);
    final int g1=rasterNative.getSample(refX,refY,1);
    final int b1=rasterNative.getSample(refX,refY,2);
    final RenderedImage riOverviewTS=readerOverviewTS.read(0);
    final Raster rasterOverviewTS=riOverviewTS.getData();
    assertEquals(180,rasterOverviewTS.getWidth());
    assertEquals(180,rasterOverviewTS.getHeight());
    final int r2=rasterOverviewTS.getSample(refX,refY,0);
    final int g2=rasterOverviewTS.getSample(refX,refY,1);
    final int b2=rasterOverviewTS.getSample(refX,refY,2);
    final RenderedImage riOverviewSF=readerOverviewSF.read(0);
    final Raster rasterOverviewSF=riOverviewSF.getData();
    assertEquals(180,rasterOverviewSF.getWidth());
    assertEquals(180,rasterOverviewSF.getHeight());
    final int r3=rasterOverviewSF.getSample(refX,refY,0);
    final int g3=rasterOverviewSF.getSample(refX,refY,1);
    final int b3=rasterOverviewSF.getSample(refX,refY,2);
    assertTrue(r1 != r2);
    assertTrue(g1 != g2);
    assertTrue(b1 != b2);
    assertEquals(r2,r3);
    assertEquals(g2,g3);
    assertEquals(b2,b3);
  }
  finally {
    IOUtils.closeQuietly(streamOverviewTS);
    IOUtils.closeQuietly(streamOverviewSF);
    IOUtils.closeQuietly(streamNative);
    if (readerOverviewTS != null) {
      try {
        readerOverviewTS.dispose();
      }
 catch (      Throwable t) {
      }
    }
    if (readerOverviewSF != null) {
      try {
        readerOverviewSF.dispose();
      }
 catch (      Throwable t) {
      }
    }
    if (readerNative != null) {
      try {
        readerNative.dispose();
      }
 catch (      Throwable t) {
      }
    }
  }
}
