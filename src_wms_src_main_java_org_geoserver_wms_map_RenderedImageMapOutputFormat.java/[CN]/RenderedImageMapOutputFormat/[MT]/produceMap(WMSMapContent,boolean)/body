{
  Rectangle paintArea=new Rectangle(0,0,mapContent.getMapWidth(),mapContent.getMapHeight());
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.fine("setting up " + paintArea.width + "x"+ paintArea.height+ " image");
  }
  final GetMapRequest request=mapContent.getRequest();
  String antialias=(String)request.getFormatOptions().get("antialias");
  if (antialias != null)   antialias=antialias.toUpperCase();
  IndexColorModel potentialPalette=null;
  final boolean transparent=mapContent.isTransparent() && isTransparencySupported();
  final Color bgColor=mapContent.getBgColor();
  if (AA_NONE.equals(antialias)) {
    potentialPalette=mapContent.getPalette();
  }
 else   if (AA_NONE.equals(antialias)) {
    PaletteExtractor pe=new PaletteExtractor(transparent ? null : bgColor);
    List<Layer> layers=mapContent.layers();
    for (int i=0; i < layers.size(); i++) {
      pe.visit(layers.get(i).getStyle());
      if (!pe.canComputePalette())       break;
    }
    if (pe.canComputePalette())     potentialPalette=pe.getPalette();
  }
  final IndexColorModel palette=potentialPalette;
  long maxMemory=wms.getMaxRequestMemory() * KB;
  long memory=getDrawingSurfaceMemoryUse(paintArea.width,paintArea.height,palette,transparent);
  StreamingRenderer testRenderer=new StreamingRenderer();
  testRenderer.setMapContent(mapContent);
  memory+=testRenderer.getMaxBackBufferMemory(paintArea.width,paintArea.height);
  if (maxMemory > 0 && memory > maxMemory) {
    long kbUsed=memory / KB;
    long kbMax=maxMemory / KB;
    throw new ServiceException("Rendering request would use " + kbUsed + "KB, whilst the "+ "maximum memory allowed is "+ kbMax+ "KB");
  }
  final MapDecorationLayout layout=findDecorationLayout(request,tiled);
  RenderedImage image=null;
  if (DefaultWebMapService.isDirectRasterPathEnabled() && mapContent.layers().size() == 1 && mapContent.getAngle() == 0.0 && (layout == null || layout.isEmpty())) {
    List<GridCoverage2D> renderedCoverages=new ArrayList<GridCoverage2D>(2);
    try {
      Interpolation interpolation=null;
      if (request.getInterpolations() != null && request.getInterpolations().size() > 0) {
        interpolation=request.getInterpolations().get(0);
      }
      image=directRasterRender(mapContent,0,renderedCoverages,interpolation);
    }
 catch (    Exception e) {
      throw new ServiceException("Error rendering coverage on the fast path",e);
    }
    if (image != null) {
      return buildMap(mapContent,image);
    }
  }
  boolean useAlpha=transparent || MetatileMapOutputFormat.isRequestTiled(request,this);
  final RenderedImage preparedImage=prepareImage(paintArea.width,paintArea.height,palette,useAlpha);
  final Map<RenderingHints.Key,Object> hintsMap=new HashMap<RenderingHints.Key,Object>();
  final Graphics2D graphic=getGraphics(transparent,bgColor,preparedImage,hintsMap);
  if (AA_NONE.equals(antialias)) {
    hintsMap.put(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_OFF);
    if (preparedImage.getColorModel() instanceof IndexColorModel) {
      hintsMap.put(RenderingHints.KEY_DITHERING,RenderingHints.VALUE_DITHER_DISABLE);
    }
  }
 else   if (AA_TEXT.equals(antialias)) {
    hintsMap.put(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_OFF);
    hintsMap.put(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
  }
 else {
    if (antialias != null && !AA_FULL.equals(antialias)) {
      LOGGER.warning("Unrecognized antialias setting '" + antialias + "', valid values are "+ AA_SETTINGS);
    }
    hintsMap.put(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  }
  hintsMap.put(RenderingHints.KEY_FRACTIONALMETRICS,RenderingHints.VALUE_FRACTIONALMETRICS_ON);
  hintsMap.put(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_PURE);
  if (wms != null) {
    if (WMSInterpolation.Nearest.equals(wms.getInterpolation())) {
      hintsMap.put(JAI.KEY_INTERPOLATION,NN_INTERPOLATION);
      hintsMap.put(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);
    }
 else     if (WMSInterpolation.Bilinear.equals(wms.getInterpolation())) {
      hintsMap.put(JAI.KEY_INTERPOLATION,BIL_INTERPOLATION);
      hintsMap.put(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
    }
 else     if (WMSInterpolation.Bicubic.equals(wms.getInterpolation())) {
      hintsMap.put(JAI.KEY_INTERPOLATION,BIC_INTERPOLATION);
      hintsMap.put(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BICUBIC);
    }
  }
  graphic.setRenderingHints(hintsMap);
  RenderingHints hints=new RenderingHints(hintsMap);
  StreamingRenderer renderer=new StreamingRenderer();
  renderer.setThreadPool(DefaultWebMapService.getRenderingPool());
  renderer.setMapContent(mapContent);
  renderer.setJava2DHints(hints);
  Map<Object,Object> rendererParams=new HashMap<Object,Object>();
  rendererParams.put("optimizedDataLoadingEnabled",new Boolean(true));
  rendererParams.put("renderingBuffer",new Integer(mapContent.getBuffer()));
  rendererParams.put("maxFiltersToSendToDatastore",DefaultWebMapService.getMaxFilterRules());
  rendererParams.put(StreamingRenderer.SCALE_COMPUTATION_METHOD_KEY,mapContent.getRendererScaleMethod());
  if (AA_NONE.equals(antialias)) {
    rendererParams.put(StreamingRenderer.TEXT_RENDERING_KEY,StreamingRenderer.TEXT_RENDERING_STRING);
  }
 else {
    rendererParams.put(StreamingRenderer.TEXT_RENDERING_KEY,StreamingRenderer.TEXT_RENDERING_OUTLINE);
  }
  if (DefaultWebMapService.isLineWidthOptimizationEnabled()) {
    rendererParams.put(StreamingRenderer.LINE_WIDTH_OPTIMIZATION_KEY,true);
  }
  if (wms.isAdvancedProjectionHandlingEnabled()) {
    rendererParams.put(StreamingRenderer.ADVANCED_PROJECTION_HANDLING_KEY,true);
    if (wms.isContinuousMapWrappingEnabled()) {
      rendererParams.put(StreamingRenderer.CONTINUOUS_MAP_WRAPPING,true);
    }
  }
  if (getFormatOptionAsBoolean(request,ADV_PROJECTION_HANDLING_FORMAT_OPTION) == false) {
    rendererParams.put(StreamingRenderer.ADVANCED_PROJECTION_HANDLING_KEY,false);
    rendererParams.put(StreamingRenderer.CONTINUOUS_MAP_WRAPPING,false);
  }
  if (getFormatOptionAsBoolean(request,MAP_WRAPPING_FORMAT_OPTION) == false) {
    rendererParams.put(StreamingRenderer.CONTINUOUS_MAP_WRAPPING,false);
  }
  if (request.getFormatOptions().get("dpi") != null) {
    rendererParams.put(StreamingRenderer.DPI_KEY,(request.getFormatOptions().get("dpi")));
  }
  boolean kmplacemark=false;
  if (request.getFormatOptions().get("kmplacemark") != null)   kmplacemark=((Boolean)request.getFormatOptions().get("kmplacemark")).booleanValue();
  if (kmplacemark) {
    KMLStyleFilteringVisitor dupVisitor=new KMLStyleFilteringVisitor();
    List<Layer> layers=mapContent.layers();
    for (int i=0; i < layers.size(); i++) {
      if (layers.get(i) instanceof StyleLayer) {
        StyleLayer layer=(StyleLayer)layers.get(i);
        Style style=layer.getStyle();
        style.accept(dupVisitor);
        Style copy=(Style)dupVisitor.getCopy();
        layer.setStyle(copy);
      }
    }
  }
  if (request.getInterpolations() != null && !request.getInterpolations().isEmpty()) {
    int count=0;
    List<Interpolation> interpolations=request.getInterpolations();
    for (    Layer layer : mapContent.layers()) {
      if (count < interpolations.size()) {
        Interpolation interpolation=interpolations.get(count);
        if (interpolation != null) {
          layer.getUserData().put(StreamingRenderer.BYLAYER_INTERPOLATION,interpolation);
        }
      }
      count++;
    }
  }
  renderer.setRendererHints(rendererParams);
  int maxErrors=wms.getMaxRenderingErrors();
  MaxErrorEnforcer errorChecker=new MaxErrorEnforcer(renderer,maxErrors);
  final RenderExceptionStrategy nonIgnorableExceptionListener;
  nonIgnorableExceptionListener=new RenderExceptionStrategy(renderer);
  renderer.addRenderListener(nonIgnorableExceptionListener);
  onBeforeRender(renderer);
  int localMaxRenderingTime=0;
  Object timeoutOption=request.getFormatOptions().get("timeout");
  if (timeoutOption != null) {
    try {
      localMaxRenderingTime=Integer.parseInt(timeoutOption.toString());
    }
 catch (    NumberFormatException e) {
      LOGGER.log(Level.WARNING,"Could not parse format_option \"timeout\": " + timeoutOption,e);
    }
  }
  int maxRenderingTime=getMaxRenderingTime(localMaxRenderingTime);
  ServiceException serviceException=null;
  boolean saveMap=(request.getRawKvp() != null && WMSServiceExceptionHandler.isPartialMapExceptionType(request.getRawKvp().get("EXCEPTIONS")));
  RenderingTimeoutEnforcer timeout=new RenderingTimeoutEnforcer(maxRenderingTime,renderer,graphic,saveMap){
    /** 
 * Save the map before disposing of the graphics
 */
    @Override public void saveMap(){
      this.map=optimizeAndBuildMap(palette,preparedImage,mapContent);
    }
  }
;
  timeout.start();
  try {
    renderer.paint(graphic,paintArea,mapContent.getRenderingArea(),mapContent.getRenderingTransform());
    if (layout != null) {
      try {
        layout.paint(graphic,paintArea,mapContent);
      }
 catch (      Exception e) {
        throw new ServiceException("Problem occurred while trying to watermark data",e);
      }
    }
    timeout.stop();
    if (errorChecker.exceedsMaxErrors()) {
      serviceException=new ServiceException("More than " + maxErrors + " rendering errors occurred, bailing out.",errorChecker.getLastException(),"internalError");
    }
    if (timeout.isTimedOut()) {
      serviceException=new ServiceException("This request used more time than allowed and has been forcefully stopped. " + "Max rendering time is " + (maxRenderingTime / 1000.0) + "s");
    }
    if (nonIgnorableExceptionListener.exceptionOccurred()) {
      Exception renderError=nonIgnorableExceptionListener.getException();
      serviceException=new ServiceException("Rendering process failed",renderError,"internalError");
    }
    if (serviceException == null) {
      return optimizeAndBuildMap(palette,preparedImage,mapContent);
    }
 else     if (saveMap) {
      RenderedImageMap map=(RenderedImageMap)timeout.getMap();
      if (map == null) {
        map=optimizeAndBuildMap(palette,preparedImage,mapContent);
      }
      serviceException=new WMSPartialMapException(serviceException,map);
    }
  }
  finally {
    timeout.stop();
    graphic.dispose();
  }
  throw serviceException;
}
