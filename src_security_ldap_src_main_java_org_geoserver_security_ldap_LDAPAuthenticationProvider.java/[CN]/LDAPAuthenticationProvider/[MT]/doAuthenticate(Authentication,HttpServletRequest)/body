{
  UsernamePasswordAuthenticationToken auth=(UsernamePasswordAuthenticationToken)super.doAuthenticate(authentication,request);
  if (auth == null)   return null;
  boolean hasNoAuthenticatedRole=auth.getAuthorities().contains(GeoServerRole.AUTHENTICATED_ROLE) == false;
  boolean hasAdminRole=adminRole != null && !adminRole.equals("") && !auth.getAuthorities().contains(GeoServerRole.ADMIN_ROLE);
  boolean hasGroupAdminRole=groupAdminRole != null && !groupAdminRole.equals("") && !auth.getAuthorities().contains(GeoServerRole.GROUP_ADMIN_ROLE);
  if (hasNoAuthenticatedRole || hasAdminRole || hasGroupAdminRole) {
    List<GrantedAuthority> roles=new ArrayList<GrantedAuthority>();
    roles.addAll(auth.getAuthorities());
    if (hasNoAuthenticatedRole) {
      roles.add(GeoServerRole.AUTHENTICATED_ROLE);
    }
    if (hasAdminRole || hasGroupAdminRole) {
      for (      GrantedAuthority authority : auth.getAuthorities()) {
        if (authority.getAuthority().equalsIgnoreCase("ROLE_" + adminRole)) {
          roles.add(GeoServerRole.ADMIN_ROLE);
        }
        if (authority.getAuthority().equalsIgnoreCase("ROLE_" + groupAdminRole)) {
          roles.add(GeoServerRole.GROUP_ADMIN_ROLE);
        }
      }
    }
    UsernamePasswordAuthenticationToken newAuth=new UsernamePasswordAuthenticationToken(auth.getPrincipal(),auth.getCredentials(),roles);
    newAuth.setDetails(auth.getDetails());
    return newAuth;
  }
  return auth;
}
