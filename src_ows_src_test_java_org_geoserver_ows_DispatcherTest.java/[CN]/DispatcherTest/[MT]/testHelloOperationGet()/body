{
  URL url=getClass().getResource("applicationContext.xml");
  FileSystemXmlApplicationContext context=new FileSystemXmlApplicationContext(url.toString());
  Dispatcher dispatcher=(Dispatcher)context.getBean("dispatcher");
  MockHttpServletRequest request=new MockHttpServletRequest(){
    String encoding;
    public int getServerPort(){
      return 8080;
    }
    public String getCharacterEncoding(){
      return encoding;
    }
    public void setCharacterEncoding(    String encoding){
      this.encoding=encoding;
    }
  }
;
  request.setScheme("http");
  request.setServerName("localhost");
  request.setContextPath("/geoserver");
  request.setMethod("GET");
  MockHttpServletResponse response=new MockHttpServletResponse();
  request.setupAddParameter("service","hello");
  request.setupAddParameter("request","Hello");
  request.setupAddParameter("version","1.0.0");
  request.setupAddParameter("message","Hello world!");
  request.setRequestURI("http://localhost/geoserver/ows?service=hello&request=hello&message=HelloWorld");
  request.setQueryString("service=hello&request=hello&message=HelloWorld");
  dispatcher.callbacks.add(new AbstractDispatcherCallback(){
    @Override public Object operationExecuted(    Request request,    Operation operation,    Object result){
      Operation op=Dispatcher.REQUEST.get().getOperation();
      assertNotNull(op);
      assertTrue(op.getService().getService() instanceof HelloWorld);
      assertTrue(op.getParameters()[0] instanceof Message);
      return result;
    }
  }
);
  dispatcher.handleRequest(request,response);
  assertEquals("Hello world!",response.getOutputStreamContent());
}
