{
  final int metaFactor=key.getMetaFactor();
  final RenderedImage[] tiles=new RenderedImage[key.getMetaFactor() * key.getMetaFactor()];
  final int tileSize=key.getTileSize();
  int type=0;
  if (metaTile instanceof PlanarImage) {
    type=1;
  }
 else   if (metaTile instanceof BufferedImage) {
    type=2;
  }
  if (LOGGER.isLoggable(Level.FINER)) {
    LOGGER.finer("Metatile type " + type);
  }
  try {
    if (DEBUG) {
      writeRenderedImage(metaTile,"metaTile");
    }
    for (int i=0; i < metaFactor; i++) {
      for (int j=0; j < metaFactor; j++) {
        int x=j * tileSize;
        int y=(tileSize * (metaFactor - 1)) - (i * tileSize);
        RenderedImage tile;
switch (type) {
case 0:
          if (LOGGER.isLoggable(Level.FINER)) {
            LOGGER.finer("Metatile split on RenderedImage");
          }
        metaTile=PlanarImage.wrapRenderedImage(metaTile);
case 1:
      if (LOGGER.isLoggable(Level.FINER)) {
        LOGGER.finer("Metatile split on PlanarImage");
      }
    final PlanarImage pImage=(PlanarImage)metaTile;
  final WritableRaster wTile=WritableRaster.createWritableRaster(pImage.getSampleModel().createCompatibleSampleModel(tileSize,tileSize),new Point(x,y));
Rectangle sourceArea=new Rectangle(x,y,tileSize,tileSize);
sourceArea=sourceArea.intersection(pImage.getBounds());
pImage.copyData(wTile);
if (wTile.getMinX() != 0 || wTile.getMinY() != 0) {
tile=new BufferedImage(pImage.getColorModel(),(WritableRaster)wTile.createTranslatedChild(0,0),pImage.getColorModel().isAlphaPremultiplied(),null);
}
 else {
tile=new BufferedImage(pImage.getColorModel(),wTile,pImage.getColorModel().isAlphaPremultiplied(),null);
}
break;
case 2:
if (LOGGER.isLoggable(Level.FINER)) {
LOGGER.finer("Metatile split on BufferedImage");
}
final BufferedImage image=(BufferedImage)metaTile;
final BufferedImage subimage=image.getSubimage(x,y,tileSize,tileSize);
tile=new BufferedImageAdapter(subimage);
break;
default :
throw new IllegalStateException(Errors.format(ErrorKeys.ILLEGAL_ARGUMENT_$2,"metaTile class",metaTile.getClass().toString()));
}
tiles[(i * key.getMetaFactor()) + j]=tile;
if (DEBUG) {
writeRenderedImage(tile,"tile" + i + "-"+ j);
}
}
}
}
  finally {
RasterCleaner.addImage(metaTile);
}
return tiles;
}
