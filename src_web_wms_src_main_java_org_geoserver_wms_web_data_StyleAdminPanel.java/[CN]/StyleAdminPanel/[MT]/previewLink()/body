{
  return new GeoServerAjaxFormLink("preview",stylePage.styleForm){
    private static final long serialVersionUID=7404304424029960594L;
    @Override protected void onClick(    AjaxRequestTarget target,    Form<?> form){
      stylePage.editor.processInput();
      wsChoice.processInput();
      clearFeedbackMessages();
      legendImg.setVisible(false);
      URLConnection conn=legendPanel.getExternalGraphic(target,form);
      String onlineResource=legendPanel.getOnlineResource();
      if (onlineResource != null && !onlineResource.isEmpty()) {
        if (conn != null) {
          try {
            legendImage=ImageIO.read(conn.getInputStream());
            legendImg.setVisible(true);
          }
 catch (          IOException e) {
            LOGGER.log(Level.WARNING,"Failed to render external legend graphic",e);
            legendContainer.error("Failed to render external legend graphic");
          }
        }
      }
 else {
        GeoServerDataDirectory dd=GeoServerExtensions.bean(GeoServerDataDirectory.class,stylePage.getGeoServerApplication().getApplicationContext());
        StyleInfo si=new StyleInfoImpl(stylePage.getCatalog());
        String styleName="tmp" + UUID.randomUUID().toString();
        String styleFileName=styleName + ".sld";
        si.setFilename(styleFileName);
        si.setName(styleName);
        si.setWorkspace(stylePage.styleModel.getObject().getWorkspace());
        Resource styleResource=null;
        try {
          styleResource=dd.style(si);
          try (OutputStream os=styleResource.out()){
            IOUtils.write(stylePage.editor.getInput(),os);
          }
           Style style=dd.parsedStyle(si);
          if (style != null) {
            GetLegendGraphicRequest request=new GetLegendGraphicRequest();
            request.setLayer(null);
            request.setStyle(style);
            request.setStrict(false);
            Map<String,String> legendOptions=new HashMap<String,String>();
            legendOptions.put("forceLabels","on");
            legendOptions.put("fontAntiAliasing","true");
            request.setLegendOptions(legendOptions);
            BufferedImageLegendGraphicBuilder builder=new BufferedImageLegendGraphicBuilder();
            legendImage=builder.buildLegendGraphic(request);
            legendImg.setVisible(true);
          }
        }
 catch (        IOException e) {
          throw new WicketRuntimeException(e);
        }
catch (        Exception e) {
          legendImg.setVisible(false);
          legendContainer.error("Failed to build legend preview. Check to see if the style is valid.");
          LOGGER.log(Level.WARNING,"Failed to build legend preview",e);
        }
 finally {
          if (styleResource != null) {
            styleResource.delete();
          }
        }
      }
      target.add(legendContainer);
    }
    @Override protected void updateAjaxAttributes(    AjaxRequestAttributes attributes){
      super.updateAjaxAttributes(attributes);
      attributes.getAjaxCallListeners().add(stylePage.editor.getSaveDecorator());
    }
  }
;
}
