{
  if (attributes.containsKey("layer")) {
    final String layerName=(String)attributes.get("layer");
    final String property=form.getFirstValue("attribute");
    final String method=form.getFirstValue("method","equalInterval");
    final String intervals=form.getFirstValue("intervals","2");
    final String intervalsForUnique=form.getFirstValue("intervals","-1");
    final String open=form.getFirstValue("open","false");
    final String colorRamp=form.getFirstValue("ramp","red");
    final boolean reverse=Boolean.parseBoolean(form.getFirstValue("reverse"));
    final boolean normalize=Boolean.parseBoolean(form.getFirstValue("normalize"));
    if (property != null && property.length() > 0) {
      try {
        LayerInfo layerInfo=catalog.getLayerByName(layerName);
        if (layerInfo != null) {
          ResourceInfo obj=layerInfo.getResource();
          if (obj instanceof FeatureTypeInfo) {
            final FeatureType ftType=((FeatureTypeInfo)obj).getFeatureType();
            final FeatureCollection ftCollection=((FeatureTypeInfo)obj).getFeatureSource(new NullProgressListener(),null).getFeatures();
            List<Rule> rules=null;
            Class<?> propertyType=ftType.getDescriptor(property).getType().getBinding();
            if ("equalInterval".equals(method)) {
              rules=builder.equalIntervalClassification(ftCollection,property,propertyType,Integer.parseInt(intervals),Boolean.parseBoolean(open),normalize);
            }
 else             if ("uniqueInterval".equals(method)) {
              rules=builder.uniqueIntervalClassification(ftCollection,property,propertyType,Integer.parseInt(intervalsForUnique),normalize);
            }
 else             if ("quantile".equals(method)) {
              rules=builder.quantileClassification(ftCollection,property,propertyType,Integer.parseInt(intervals),Boolean.parseBoolean(open),normalize);
            }
 else             if ("jenks".equals(method)) {
              rules=builder.jenksClassification(ftCollection,property,propertyType,Integer.parseInt(intervals),Boolean.parseBoolean(open),normalize);
            }
            if (colorRamp != null && colorRamp.length() > 0) {
              ColorRamp ramp=null;
              if (colorRamp.equalsIgnoreCase("random"))               ramp=new RandomColorRamp();
 else               if (colorRamp.equalsIgnoreCase("red"))               ramp=new RedColorRamp();
 else               if (colorRamp.equalsIgnoreCase("blue"))               ramp=new BlueColorRamp();
 else               if (colorRamp.equalsIgnoreCase("jet"))               ramp=new JetColorRamp();
 else               if (colorRamp.equalsIgnoreCase("gray"))               ramp=new GrayColorRamp();
 else               if (colorRamp.equalsIgnoreCase("custom")) {
                Color startColor=Color.decode(form.getFirst("startColor").getValue());
                Color endColor=Color.decode(form.getFirst("endColor").getValue());
                Color midColor=(form.contains("midColor") ? Color.decode(form.getFirst("midColor").getValue()) : null);
                if (startColor != null && endColor != null) {
                  CustomColorRamp tramp=new CustomColorRamp();
                  tramp.setStartColor(startColor);
                  tramp.setEndColor(endColor);
                  if (midColor != null)                   tramp.setMid(midColor);
                  ramp=tramp;
                }
              }
              final Class geomT=ftType.getGeometryDescriptor().getType().getBinding();
              if (geomT == LineString.class || geomT == MultiLineString.class) {
                builder.lineStyle(rules,ramp,reverse);
              }
 else               if (geomT == Point.class || geomT == MultiPoint.class) {
                builder.pointStyle(rules,ramp,reverse);
              }
 else               if (geomT == MultiPolygon.class || geomT == Polygon.class) {
                builder.polygonStyle(rules,ramp,reverse);
              }
            }
            return rules;
          }
        }
      }
 catch (      NoSuchElementException e) {
        if (LOGGER.isLoggable(Level.FINE))         LOGGER.log(Level.FINE,"The following exception has occurred " + e.getLocalizedMessage(),e);
        return null;
      }
catch (      IOException e) {
        if (LOGGER.isLoggable(Level.FINE))         LOGGER.log(Level.FINE,"The following exception has occurred " + e.getLocalizedMessage(),e);
        return null;
      }
    }
 else     return null;
  }
 else   return null;
  return null;
}
