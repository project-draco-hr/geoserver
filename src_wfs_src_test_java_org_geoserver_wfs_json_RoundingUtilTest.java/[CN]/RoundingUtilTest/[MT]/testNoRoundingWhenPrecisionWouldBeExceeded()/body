{
  assertThat(RoundingUtil.round(1.01234567890123456E12,1),is(equalTo(1.0123456789012E12)));
  assertThat(RoundingUtil.round(1.01234567890123456E12,2),is(equalTo(1.01234567890123E12)));
  assertThat(RoundingUtil.round(1.01234567890123456E13,1),is(equalTo(1.01234567890123E13)));
  assertThat(RoundingUtil.round(1.01234567890123456E13,2),is(equalTo(1.012345678901235E13)));
  assertThat(RoundingUtil.round(1.01234567890123456E14,1),is(equalTo(1.012345678901235E14)));
  assertThat(RoundingUtil.round(1.01234567890123456E14,2),is(equalTo(1.0123456789012346E14)));
  assertThat(RoundingUtil.round(1.01234567890123456E15,1),is(equalTo(1.0123456789012345E15)));
  assertThat(RoundingUtil.round(1.01234567890123456E15,2),is(equalTo(1.0123456789012345E15)));
  assertThat(RoundingUtil.round(1.01234567890123456E16,1),is(equalTo(1.0123456789012346E16)));
  assertThat(RoundingUtil.round(1.01234567890123456E16,2),is(equalTo(1.0123456789012346E16)));
  assertThat(RoundingUtil.round(1.0123456789012345E17,1),is(equalTo(1.0123456789012345E17)));
  assertThat(RoundingUtil.round(1.0123456789012345E18,1),is(equalTo(1.0123456789012345E18)));
  assertThat(RoundingUtil.round(1.01234567890123451E19,1),is(equalTo(1.0123456789012345E19)));
  assertThat(RoundingUtil.round(Double.MIN_VALUE,15),is(equalTo(0d)));
  assertThat(RoundingUtil.round(Double.MAX_VALUE,1),is(equalTo(Double.MAX_VALUE)));
}
