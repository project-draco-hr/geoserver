{
  if (archiveFile.file().exists()) {
    if (!overwrite && FileUtils.sizeOf(archiveFile.file()) > 0) {
      throw new IOException("The target archive file already exists. Use 'overwrite=TRUE' if you want to overwrite it.");
    }
 else {
      FileUtils.forceDelete(archiveFile.file());
    }
  }
 else {
    if (!archiveFile.file().getParentFile().exists()) {
      try {
        archiveFile.file().getParentFile().mkdirs();
      }
  finally {
        if (!archiveFile.file().getParentFile().exists()) {
          throw new IOException("The path to target archive file is unreachable.");
        }
      }
    }
  }
  FileUtils.touch(archiveFile.file());
  Resource tmpDir=BackupUtils.tmpDir();
  JobParametersBuilder paramsBuilder=new JobParametersBuilder();
  if (filter != null) {
    paramsBuilder.addString("filter",ECQL.toCQL(filter));
  }
  paramsBuilder.addString(PARAM_JOB_NAME,BACKUP_JOB_NAME).addString(PARAM_OUTPUT_FILE_PATH,BackupUtils.getArchiveURLProtocol(tmpDir) + tmpDir.path()).addLong(PARAM_TIME,System.currentTimeMillis());
  parseParams(params,paramsBuilder);
  JobParameters jobParameters=paramsBuilder.toJobParameters();
  BackupExecutionAdapter backupExecution;
  try {
    if (getRestoreRunningExecutions().isEmpty() && getBackupRunningExecutions().isEmpty()) {
synchronized (jobOperator) {
        JobExecution jobExecution=jobLauncher.run(backupJob,jobParameters);
        backupExecution=new BackupExecutionAdapter(jobExecution,totalNumberOfBackupSteps);
        backupExecutions.put(backupExecution.getId(),backupExecution);
        backupExecution.setArchiveFile(archiveFile);
        backupExecution.setOverwrite(overwrite);
        backupExecution.setFilter(filter);
        backupExecution.getOptions().add("OVERWRITE=" + overwrite);
        for (        Entry jobParam : jobParameters.toProperties().entrySet()) {
          if (!PARAM_OUTPUT_FILE_PATH.equals(jobParam.getKey()) && !PARAM_INPUT_FILE_PATH.equals(jobParam.getKey()) && !PARAM_TIME.equals(jobParam.getKey())) {
            backupExecution.getOptions().add(jobParam.getKey() + "=" + jobParam.getValue());
          }
        }
        return backupExecution;
      }
    }
 else {
      throw new IOException("Could not start a new Backup Job Execution since there are currently Running jobs.");
    }
  }
 catch (  JobExecutionAlreadyRunningException|JobRestartException|JobInstanceAlreadyCompleteException|JobParametersInvalidException e) {
    throw new IOException("Could not start a new Backup Job Execution: ",e);
  }
 finally {
  }
}
