{
  super.onSetUp(testData);
  addUser("cite_readfilter","cite",null,Arrays.asList("ROLE_DUMMY"));
  addUser("cite_readatts","cite",null,Arrays.asList("ROLE_DUMMY"));
  NamespaceSupport ns=new NamespaceSupport();
  Map nsMap=((FeatureChainingMockData)testData).getNamespaces();
  for (Iterator it=nsMap.entrySet().iterator(); it.hasNext(); ) {
    Map.Entry entry=(Entry)it.next();
    String prefix=(String)entry.getKey();
    String namespace=(String)entry.getValue();
    ns.declarePrefix(prefix,namespace);
  }
  Hints hints=new Hints();
  hints.put(FeaturePropertyAccessorFactory.NAMESPACE_CONTEXT,ns);
  FilterFactory ff=CommonFactoryFinder.getFilterFactory(hints);
  TestResourceAccessManager tam=(TestResourceAccessManager)applicationContext.getBean("testResourceAccessManager");
  Catalog catalog=getCatalog();
  FeatureTypeInfo gu=catalog.getFeatureTypeByName("gsml:GeologicUnit");
  Filter f=ff.equal(new AttributeExpressionImpl("gsml:purpose",ns),ff.literal("instance"),false);
  tam.putLimits("cite_readfilter",gu,new VectorAccessLimits(CatalogMode.HIDE,null,f,null,null));
  List<PropertyName> readAtts=Arrays.asList(ff.property("gsml:composition"),ff.property("gsml:outcropCharacter"));
  tam.putLimits("cite_readatts",gu,new VectorAccessLimits(CatalogMode.HIDE,readAtts,f,null,null));
}
