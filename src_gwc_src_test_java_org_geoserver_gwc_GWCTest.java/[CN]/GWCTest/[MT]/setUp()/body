{
  System.setProperty("ALLOW_ENV_PARAMETRIZATION","true");
  System.setProperty("TEST_ENV_PROPERTY","H2");
  catalog=mock(Catalog.class);
  layer=mockLayer("testLayer",new String[]{"style1","style2"},PublishedType.RASTER);
  layerGroup=mockGroup("testGroup",layer);
  mockCatalog();
  defaults=GWCConfig.getOldDefaults();
  gwcConfigPersister=mock(GWCConfigPersister.class);
  when(gwcConfigPersister.getConfig()).thenReturn(defaults);
  storageBroker=mock(StorageBroker.class);
  gridSetBroker=new GridSetBroker(true,true);
  tileLayerInfo=TileLayerInfoUtil.loadOrCreate(layer,defaults);
  tileLayerGroupInfo=TileLayerInfoUtil.loadOrCreate(layerGroup,defaults);
  tileLayer=new GeoServerTileLayer(layer,gridSetBroker,tileLayerInfo);
  tileLayerGroup=new GeoServerTileLayer(layerGroup,gridSetBroker,tileLayerGroupInfo);
  tld=mock(TileLayerDispatcher.class);
  mockTileLayerDispatcher();
  config=mock(Configuration.class);
  tileBreeder=mock(TileBreeder.class);
  quotaStore=mock(QuotaStore.class);
  diskQuotaMonitor=mock(DiskQuotaMonitor.class);
  when(diskQuotaMonitor.getQuotaStore()).thenReturn(quotaStore);
  owsDispatcher=mock(Dispatcher.class);
  diskQuotaStoreProvider=mock(ConfigurableQuotaStoreProvider.class);
  when(diskQuotaMonitor.getQuotaStoreProvider()).thenReturn(diskQuotaStoreProvider);
  storageFinder=mock(DefaultStorageFinder.class);
  jdbcStorage=createMock(JDBCConfigurationStorage.class);
  xmlConfig=mock(XMLConfiguration.class);
  GeoWebCacheEnvironment genv=createMockBuilder(GeoWebCacheEnvironment.class).withConstructor().createMock();
  ApplicationContext appContext=createMock(ApplicationContext.class);
  expect(appContext.getBeanNamesForType(GeoWebCacheEnvironment.class)).andReturn(new String[]{"geoWebCacheEnvironment"}).anyTimes();
  Map<String,GeoWebCacheEnvironment> genvMap=new HashMap<>();
  genvMap.put("geoWebCacheEnvironment",genv);
  expect(appContext.getBeansOfType(GeoWebCacheEnvironment.class)).andReturn(genvMap).anyTimes();
  expect(appContext.getBean("geoWebCacheEnvironment")).andReturn(genv).anyTimes();
  expect(appContext.getBeanNamesForType(XMLConfiguration.class)).andReturn(new String[]{"geoWebCacheXMLConfiguration"}).anyTimes();
  Map<String,XMLConfiguration> xmlConfMap=new HashMap();
  xmlConfMap.put("geoWebCacheXMLConfiguration",xmlConfig);
  expect(appContext.getBeansOfType(XMLConfiguration.class)).andReturn(xmlConfMap).anyTimes();
  expect(appContext.getBean("geoWebCacheXMLConfiguration")).andReturn(xmlConfig).anyTimes();
  replay(appContext);
  GeoWebCacheExtensions gse=createMockBuilder(GeoWebCacheExtensions.class).createMock();
  gse.setApplicationContext(appContext);
  replay(gse);
  List<GeoWebCacheEnvironment> extensions=GeoWebCacheExtensions.extensions(GeoWebCacheEnvironment.class);
  assertNotNull(extensions);
  assertEquals(1,extensions.size());
  assertTrue(extensions.contains(genv));
  JDBCConfiguration jdbcConfiguration=new JDBCConfiguration();
  if (GeoWebCacheEnvironment.ALLOW_ENV_PARAMETRIZATION) {
    jdbcConfiguration.setDialect("${TEST_ENV_PROPERTY}");
  }
 else {
    jdbcConfiguration.setDialect("H2");
  }
  File jdbcConfigurationFile=File.createTempFile("jdbcConfigurationFile",".tmp",tmpDir().dir());
  jdbcConfiguration.store(jdbcConfiguration,jdbcConfigurationFile);
  JDBCConfiguration loadedConf=jdbcConfiguration.load(jdbcConfigurationFile);
  jdbcStorage.setApplicationContext(appContext);
  expect(jdbcStorage.getJDBCDiskQuotaConfig()).andReturn(loadedConf).anyTimes();
  replay(jdbcStorage);
  mediator=new GWC(gwcConfigPersister,storageBroker,tld,gridSetBroker,tileBreeder,diskQuotaMonitor,owsDispatcher,catalog,catalog,storageFinder,jdbcStorage);
  mediator.setApplicationContext(appContext);
  mediator=spy(mediator);
  when(mediator.getXmlConfiguration()).thenReturn(xmlConfig);
  GWC.set(mediator);
}
