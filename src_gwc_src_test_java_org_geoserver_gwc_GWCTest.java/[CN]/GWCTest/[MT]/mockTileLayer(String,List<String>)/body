{
  GeoServerTileLayer tileLayer=mock(GeoServerTileLayer.class);
  when(tld.layerExists(eq(layerName))).thenReturn(true);
  when(tld.getTileLayer(eq(layerName))).thenReturn(tileLayer);
  when(tileLayer.getName()).thenReturn(layerName);
  when(tileLayer.isEnabled()).thenReturn(true);
  final MimeType mimeType1=MimeType.createFromFormat("image/png");
  final MimeType mimeType2=MimeType.createFromFormat("image/jpeg");
  when(tileLayer.getMimeTypes()).thenReturn(ImmutableList.of(mimeType1,mimeType2));
  Map<String,GridSubset> subsets=Maps.newHashMap();
  Multimap<SRS,GridSubset> bySrs=LinkedHashMultimap.create();
  GridSetBroker broker=gridSetBroker;
  for (  String gsetName : gridSetNames) {
    GridSet gridSet=broker.get(gsetName);
    XMLGridSubset xmlGridSubset=new XMLGridSubset();
    String gridSetName=gridSet.getName();
    xmlGridSubset.setGridSetName(gridSetName);
    GridSubset gridSubSet=xmlGridSubset.getGridSubSet(broker);
    subsets.put(gsetName,gridSubSet);
    bySrs.put(gridSet.getSrs(),gridSubSet);
    when(tileLayer.getGridSubset(eq(gsetName))).thenReturn(gridSubSet);
  }
  for (  SRS srs : bySrs.keySet()) {
    List<GridSubset> list=ImmutableList.copyOf(bySrs.get(srs));
    when(tileLayer.getGridSubsetsForSRS(eq(srs))).thenReturn(list);
  }
  when(tileLayer.getGridSubsets()).thenReturn(subsets.keySet());
  for (  String gsetName : gridSetNames) {
    assertTrue(tileLayer.getGridSubsets().contains(gsetName));
    assertNotNull(tileLayer.getGridSubset(gsetName));
  }
  return tileLayer;
}
