{
  String request="<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<wps:Execute version=\"1.0.0\" service=\"WPS\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://www.opengis.net/wps/1.0.0\" xmlns:wfs=\"http://www.opengis.net/wfs\" xmlns:wps=\"http://www.opengis.net/wps/1.0.0\" xmlns:ows=\"http://www.opengis.net/ows/1.1\" xmlns:gml=\"http://www.opengis.net/gml\" xmlns:ogc=\"http://www.opengis.net/ogc\" xmlns:wcs=\"http://www.opengis.net/wcs/1.1.1\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xsi:schemaLocation=\"http://www.opengis.net/wps/1.0.0 http://schemas.opengis.net/wps/1.0.0/wpsAll.xsd\">\n" + "  <ows:Identifier>gs:Query</ows:Identifier>\n"+ "  <wps:DataInputs>\n"+ "    <wps:Input>\n"+ "      <ows:Identifier>features</ows:Identifier>\n"+ "      <wps:Reference mimeType=\"text/xml; subtype=wfs-collection/1.0\" "+ "        xlink:href=\"http://geoserver/wfs?request=GetFeatures&amp;service=WFS&amp;version=1.0.0&amp;typeName=" + getLayerId(MockData.BUILDINGS) + "\">\n"+ "        <wps:Body>\n"+ "          <wfs:GetFeature service=\"WFS\" version=\"1.0.0\" outputFormat=\"GML2\">\n"+ "            <wfs:Query typeName=\"topp:states\"/>\n"+ "          </wfs:GetFeature>\n"+ "        </wps:Body>\n"+ "      </wps:Reference>\n"+ "    </wps:Input>\n"+ "  </wps:DataInputs>\n"+ "  <wps:ResponseForm>\n"+ "    <wps:RawDataOutput mimeType=\"text/xml; subtype=wfs-collection/1.0\">\n"+ "      <ows:Identifier>result</ows:Identifier>\n"+ "    </wps:RawDataOutput>\n"+ "  </wps:ResponseForm>\n"+ "</wps:Execute>";
  Document d=postAsDOM(root(),request);
  FeatureTypeInfo fti=getCatalog().getFeatureTypeByName(getLayerId(MockData.BUILDINGS));
  FeatureCollection fc=fti.getFeatureSource(null,null).getFeatures();
  XpathEngine xpath=XMLUnit.newXpathEngine();
  assertEquals(xpath.getMatchingNodes("/wfs:FeatureCollection/gml:featureMember/feature:Buildings",d).getLength(),fc.size());
  final String base="/wfs:FeatureCollection/gml:featureMember/feature:Buildings[@fid=\"Buildings.1107531701010\"]";
  assertXpathEvaluatesTo("4","count(" + base + "/*)",d);
  assertXpathEvaluatesTo("1","count(" + base + "/feature:the_geom)",d);
  assertXpathEvaluatesTo("1","count(" + base + "/feature:FID)",d);
  assertXpathEvaluatesTo("1","count(" + base + "/feature:ADDRESS)",d);
}
