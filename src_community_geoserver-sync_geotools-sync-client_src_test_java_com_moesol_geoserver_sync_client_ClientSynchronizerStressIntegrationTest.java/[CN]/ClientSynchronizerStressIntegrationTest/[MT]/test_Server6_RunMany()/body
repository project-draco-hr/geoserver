{
  Feature[] serverFeatures=new Feature[]{f("F1",0),f("F2",1),f("F3",2),f("F4",3),f("F5",4),f("F6",5)};
  FeatureCollectionType client=make(f("F1",0),f("F2",1),f("F3",2),f("F4",3),f("F5",4),f("F6",5));
  Map<Identifier,FeatureAccessor> clientMap=asMap(client);
  GeoserverClientSynchronizer synchronizer=new GeoserverClientSynchronizer(makeConfiguration(),"url",SimulatedRequestBuilder.POST_TEMPLATE);
  RecordingFeatureChangeListener listener=new RecordingFeatureChangeListener(synchronizer.getListener());
  synchronizer.setListener(listener);
  long lastOutput=0;
  for (int i=0; i < 10000; i++) {
    Map<Identifier,FeatureAccessor> oldClientMap=new HashMap<Identifier,FeatureAccessor>(clientMap);
    UpdateRecords changed=randomlyChangeFeatures(serverFeatures);
    listener.reset();
    FeatureCollectionType server=make(serverFeatures);
    RequestBuilder builder=new SimulatedRequestBuilder(server);
    synchronizer.setRequestBuilder(builder);
    synchronizer.synchronize(clientMap);
    if (System.currentTimeMillis() - lastOutput > 1000) {
      System.out.println("desc: " + asString(clientMap) + " n: "+ synchronizer.getNumUpdates()+ " i: "+ i);
      lastOutput=System.currentTimeMillis();
    }
    assertEquals(6,clientMap.size());
    assertEquals("run: " + i,0,synchronizer.getNumCreates());
    assertEquals("run: " + i,0,synchronizer.getNumDeletes());
    if (changed.getFeaturesUpdated().size() != 4) {
      continue;
    }
    if (changed.getFeaturesUpdated().size() != synchronizer.getNumUpdates()) {
      System.out.println("run: " + i);
      System.out.println("changed: " + changed);
      System.out.println("old: " + asString(oldClientMap));
      System.out.println("new: " + asString(clientMap));
      System.out.println("listener: " + asString(listener));
      assertEquals("run: " + i + " changed: "+ changed+ " listener: "+ asString(listener),changed.getFeaturesUpdated().size(),synchronizer.getNumUpdates());
    }
  }
}
