{
  Configuration cfg=super.createConfiguration(data,clazz);
  cfg.setClassForTemplateLoading(getClass(),"templates");
  cfg.setObjectWrapper(new ObjectToMapWrapper<WCSInfo>(WCSInfo.class){
    @Override protected void wrapInternal(    Map properties,    SimpleHash model,    WCSInfo wcsInfo){
      WorkspaceInfo workspaceInfo=wcsInfo.getWorkspace();
      properties.put("workspaceName",workspaceInfo != null ? workspaceInfo.getName() : "NO_WORKSPACE");
      properties.put("enabled",wcsInfo.isEnabled() ? "true" : "false");
      properties.put("name",wcsInfo.getName());
      properties.put("title",wcsInfo.getTitle());
      properties.put("maintainer",wcsInfo.getMaintainer());
      properties.put("abstract",wcsInfo.getAbstract());
      properties.put("accessConstraints",wcsInfo.getAccessConstraints());
      properties.put("fees",wcsInfo.getFees());
      properties.put("versions",wcsInfo.getVersions());
      properties.put("keywords",wcsInfo.getKeywords());
      properties.put("metadataLink",wcsInfo.getMetadataLink());
      properties.put("citeCompliant",wcsInfo.isCiteCompliant() ? "true" : "false");
      properties.put("onlineResource",wcsInfo.getOnlineResource());
      properties.put("schemaBaseURL",wcsInfo.getSchemaBaseURL());
      properties.put("verbose",wcsInfo.isVerbose() ? "true" : "false");
      properties.put("isSubsamplingEnabled",wcsInfo.isSubsamplingEnabled() ? "true" : "false");
      properties.put("overviewPolicy",wcsInfo.getOverviewPolicy());
      properties.put("maxInputMemory",String.valueOf(wcsInfo.getMaxInputMemory()));
      properties.put("maxOutputMemory",String.valueOf(wcsInfo.getMaxOutputMemory()));
    }
  }
);
  return cfg;
}
