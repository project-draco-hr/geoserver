{
  final Catalog catalog=getCatalog();
  org.geoserver.catalog.FeatureTypeInfo typeInfo=catalog.getFeatureTypeByName(MockData.LAKES.getNamespaceURI(),MockData.LAKES.getLocalPart());
  Envelope env=typeInfo.getFeatureSource(null,null).getBounds();
  double shift=env.getWidth() / 6;
  env=new Envelope(env.getMinX() - shift,env.getMaxX() + shift,env.getMinY() - shift,env.getMaxY() + shift);
  GetMapRequest request=new GetMapRequest();
  final WMSMapContent map=new WMSMapContent();
  int w=400;
  int h=(int)Math.round((env.getHeight() * w) / env.getWidth());
  map.setMapWidth(w);
  map.setMapHeight(h);
  map.setBgColor(BG_COLOR);
  map.setTransparent(true);
  map.setRequest(request);
  addToMap(map,MockData.FORESTS);
  addToMap(map,MockData.LAKES);
  addToMap(map,MockData.STREAMS);
  addToMap(map,MockData.NAMED_PLACES);
  addToMap(map,MockData.ROAD_SEGMENTS);
  addToMap(map,MockData.PONDS);
  addToMap(map,MockData.BUILDINGS);
  addToMap(map,MockData.DIVIDED_ROUTES);
  addToMap(map,MockData.BRIDGES);
  addToMap(map,MockData.MAP_NEATLINE);
  map.getViewport().setBounds(new ReferencedEnvelope(env,DefaultGeographicCRS.WGS84));
  request.setFormat(getMapFormat());
  RenderedImageMap imageMap=this.rasterMapProducer.produceMap(map);
  BufferedImage image=(BufferedImage)imageMap.getImage();
  imageMap.dispose();
  assertNotBlank("testBlueLake",image);
}
