{
  GetMapRequest request=new GetMapRequest();
  CoordinateReferenceSystem crs=DefaultGeographicCRS.WGS84;
  ReferencedEnvelope bbox=new ReferencedEnvelope(new Envelope(-116.90673461649858211,-114.30988665660261461,32.07093728218402617,33.89032847348440214),crs);
  request.setBbox(bbox);
  request.setSRS("urn:x-ogc:def:crs:EPSG:4326");
  request.setFormat("image/png");
  final WMSMapContent map=new WMSMapContent(request);
  map.setMapWidth(300);
  map.setMapHeight(300);
  map.setTransparent(false);
  map.getViewport().setBounds(bbox);
  StyleBuilder styleBuilder=new StyleBuilder();
  Catalog catalog=getCatalog();
  CoverageInfo ci=catalog.getCoverageByName(SystemTestData.MULTIBAND.getPrefix(),SystemTestData.MULTIBAND.getLocalPart());
  GridCoverage2DReader reader=(GridCoverage2DReader)ci.getGridCoverageReader(null,null);
  reader.getCoordinateReferenceSystem();
  Layer sl=new CachedGridReaderLayer(reader,styleBuilder.createStyle(styleBuilder.createRasterSymbolizer()));
  map.addLayer(sl);
  RenderedImageMap srcImageMap=this.rasterMapProducer.produceMap(map);
  RenderedImage srcImage=srcImageMap.getImage();
  final InputCoverageBand ib0=new InputCoverageBand("multiband","2");
  final CoverageBand b0=new CoverageBand(Collections.singletonList(ib0),"multiband@2",0,CompositionType.BAND_SELECT);
  final InputCoverageBand ib1=new InputCoverageBand("multiband","1");
  final CoverageBand b1=new CoverageBand(Collections.singletonList(ib1),"multiband@1",1,CompositionType.BAND_SELECT);
  final InputCoverageBand ib2=new InputCoverageBand("multiband","0");
  final CoverageBand b2=new CoverageBand(Collections.singletonList(ib2),"multiband@0",2,CompositionType.BAND_SELECT);
  final InputCoverageBand ib3=new InputCoverageBand("multiband","0");
  final CoverageBand b3=new CoverageBand(Collections.singletonList(ib3),"multiband@0",0,CompositionType.BAND_SELECT);
  final InputCoverageBand ib4=new InputCoverageBand("multiband","1");
  final CoverageBand b4=new CoverageBand(Collections.singletonList(ib4),"multiband@1",1,CompositionType.BAND_SELECT);
  final InputCoverageBand ib5=new InputCoverageBand("multiband","2");
  final CoverageBand b5=new CoverageBand(Collections.singletonList(ib5),"multiband@2",2,CompositionType.BAND_SELECT);
  final List<CoverageBand> coverageBands=new ArrayList<CoverageBand>(1);
  coverageBands.add(b0);
  coverageBands.add(b1);
  coverageBands.add(b2);
  coverageBands.add(b3);
  coverageBands.add(b4);
  coverageBands.add(b5);
  CoverageView multiBandCoverageView=new CoverageView("multiband_select",coverageBands);
  CoverageStoreInfo storeInfo=catalog.getCoverageStoreByName("multiband");
  CatalogBuilder builder=new CatalogBuilder(catalog);
  CoverageInfo coverageInfo=multiBandCoverageView.createCoverageInfo("multiband_select",storeInfo,builder);
  coverageInfo.getParameters().put("USE_JAI_IMAGEREAD","false");
  catalog.add(coverageInfo);
  final LayerInfo layerInfoView=builder.buildLayer(coverageInfo);
  catalog.add(layerInfoView);
  final Envelope env=ci.boundingBox();
  LOGGER.info("about to create map ctx for BasicPolygons with bounds " + env);
  RasterSymbolizer symbolizer=styleBuilder.createRasterSymbolizer();
  ChannelSelection cs=new ChannelSelectionImpl();
  SelectedChannelType red=new SelectedChannelTypeImpl();
  SelectedChannelType green=new SelectedChannelTypeImpl();
  SelectedChannelType blue=new SelectedChannelTypeImpl();
  red.setChannelName("3");
  green.setChannelName("2");
  blue.setChannelName("1");
  cs.setRGBChannels(new SelectedChannelType[]{red,green,blue});
  symbolizer.setChannelSelection(cs);
  reader=(GridCoverage2DReader)coverageInfo.getGridCoverageReader(null,null);
  reader.getCoordinateReferenceSystem();
  Layer dl=new CachedGridReaderLayer(reader,styleBuilder.createStyle(symbolizer));
  map.removeLayer(sl);
  map.addLayer(dl);
  RenderedImageMap dstImageMap=this.rasterMapProducer.produceMap(map);
  RenderedImage destImage=dstImageMap.getImage();
  int dWidth=destImage.getWidth();
  int dHeight=destImage.getHeight();
  int[] destImageRowBand0=new int[dWidth * dHeight];
  int[] destImageRowBand1=new int[destImageRowBand0.length];
  int[] destImageRowBand2=new int[destImageRowBand0.length];
  destImage.getData().getSamples(0,0,dWidth,dHeight,0,destImageRowBand0);
  destImage.getData().getSamples(0,0,dWidth,dHeight,1,destImageRowBand1);
  destImage.getData().getSamples(0,0,dWidth,dHeight,2,destImageRowBand2);
  int sWidth=srcImage.getWidth();
  int sHeight=srcImage.getHeight();
  int[] srcImageRowBand0=new int[sWidth * sHeight];
  int[] srcImageRowBand2=new int[srcImageRowBand0.length];
  srcImage.getData().getSamples(0,0,sWidth,sHeight,0,srcImageRowBand0);
  Assert.assertTrue(Arrays.equals(destImageRowBand0,srcImageRowBand0));
  Assert.assertFalse(Arrays.equals(destImageRowBand0,srcImageRowBand2));
  srcImageMap.dispose();
  dstImageMap.dispose();
  map.dispose();
}
