{
  setMockCreator(new MockCreator(){
    @Override public GeoServerSecurityManager createSecurityManager(    MockTestData testData) throws Exception {
      GeoServerSecurityManager secMgr=createNiceMock(GeoServerSecurityManager.class);
      GeoServerUserGroupStore ugStore1=createUserGroupStore("test1",secMgr);
      addUsers(ugStore1,"user1","abc");
      addGroups(ugStore1,"group1");
      GeoServerUserGroupStore ugStore2=createUserGroupStore("test2",secMgr);
      addUsers(ugStore1,"user2","abc");
      addGroups(ugStore1,"group2");
      GeoServerRoleStore roleStore=createRoleStore("test",secMgr,"role1");
      expect(roleStore.getGroupNamesForRole(new GeoServerRole("role1"))).andReturn(new TreeSet<String>(Arrays.asList("group1","group2"))).anyTimes();
      replay(ugStore1,ugStore2,roleStore,secMgr);
      return secMgr;
    }
  }
);
  GeoServerSecurityManager secMgr=getSecurityManager();
  GeoServerUserGroupStore ugStore1=(GeoServerUserGroupStore)secMgr.loadUserGroupService("test1");
  GeoServerUserGroupStore ugStore2=(GeoServerUserGroupStore)secMgr.loadUserGroupService("test2");
  RoleStoreValidationWrapper store=new RoleStoreValidationWrapper((GeoServerRoleStore)secMgr.loadRoleService("test"),ugStore1,ugStore2);
  GeoServerRole role1=store.getRoleByName("role1");
  try {
    store.associateRoleToGroup(role1,"group3");
    fail("unkown group should throw exception");
  }
 catch (  IOException ex) {
    assertSecurityException(ex,GROUPNAME_NOT_FOUND_$1,"group3");
  }
  try {
    store.associateRoleToUser(role1,"user3");
    fail("unkown user should throw exception");
  }
 catch (  IOException ex) {
    assertSecurityException(ex,USERNAME_NOT_FOUND_$1,"user3");
  }
  try {
    store.getRolesForGroup("group3");
    fail("unkown group should throw exception");
  }
 catch (  IOException ex) {
    assertSecurityException(ex,GROUPNAME_NOT_FOUND_$1,"group3");
  }
  try {
    store.getRolesForUser("user3");
    fail("unkown user should throw exception");
  }
 catch (  IOException ex) {
    assertSecurityException(ex,USERNAME_NOT_FOUND_$1,"user3");
  }
  store.disAssociateRoleFromGroup(role1,"group1");
  store.disAssociateRoleFromGroup(role1,"group2");
  try {
    store.disAssociateRoleFromGroup(role1,"group3");
    fail("unkown group should throw exception");
  }
 catch (  IOException ex) {
    assertSecurityException(ex,GROUPNAME_NOT_FOUND_$1,"group3");
  }
  store.disAssociateRoleFromUser(role1,"user1");
  store.disAssociateRoleFromUser(role1,"user1");
  try {
    store.disAssociateRoleFromUser(role1,"user3");
    fail("unkown user should throw exception");
  }
 catch (  IOException ex) {
    assertSecurityException(ex,USERNAME_NOT_FOUND_$1,"user3");
  }
}
