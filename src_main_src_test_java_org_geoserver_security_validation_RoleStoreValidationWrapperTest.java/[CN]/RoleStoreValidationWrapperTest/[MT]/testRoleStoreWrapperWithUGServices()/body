{
  boolean failed;
  GeoServerUserGroupStore ugStore1=createUGStore("test1");
  ugStore1.addUser(ugStore1.createUserObject("user1","abc",true));
  ugStore1.addGroup(ugStore1.createGroupObject("group1",true));
  ugStore1.store();
  GeoServerUserGroupStore ugStore2=createUGStore("test2");
  ugStore2.addUser(ugStore1.createUserObject("user2","abc",true));
  ugStore2.addGroup(ugStore1.createGroupObject("group2",true));
  ugStore2.store();
  RoleStoreValidationWrapper store=createStore("test",null,null,ugStore1,ugStore2);
  GeoServerRole role1=store.createRoleObject("role1");
  store.addRole(role1);
  store.store();
  store.associateRoleToGroup(role1,"group1");
  store.associateRoleToGroup(role1,"group2");
  failed=false;
  try {
    store.associateRoleToGroup(role1,"group3");
  }
 catch (  IOException ex) {
    assertSecurityException(ex,GROUPNAME_NOT_FOUND_$1,"group3");
    failed=true;
  }
  assertTrue(failed);
  store.associateRoleToUser(role1,"user1");
  store.associateRoleToUser(role1,"user1");
  failed=false;
  try {
    store.associateRoleToUser(role1,"user3");
  }
 catch (  IOException ex) {
    assertSecurityException(ex,USERNAME_NOT_FOUND_$1,"user3");
    failed=true;
  }
  assertTrue(failed);
  assertEquals(1,store.getRolesForGroup("group1").size());
  assertEquals(1,store.getRolesForUser("user1").size());
  failed=false;
  try {
    store.getRolesForGroup("group3");
  }
 catch (  IOException ex) {
    assertSecurityException(ex,GROUPNAME_NOT_FOUND_$1,"group3");
    failed=true;
  }
  assertTrue(failed);
  failed=false;
  try {
    store.getRolesForUser("user3");
  }
 catch (  IOException ex) {
    assertSecurityException(ex,USERNAME_NOT_FOUND_$1,"user3");
    failed=true;
  }
  assertTrue(failed);
  store.disAssociateRoleFromGroup(role1,"group1");
  store.disAssociateRoleFromGroup(role1,"group2");
  failed=false;
  try {
    store.disAssociateRoleFromGroup(role1,"group3");
  }
 catch (  IOException ex) {
    assertSecurityException(ex,GROUPNAME_NOT_FOUND_$1,"group3");
    failed=true;
  }
  assertTrue(failed);
  store.disAssociateRoleFromUser(role1,"user1");
  store.disAssociateRoleFromUser(role1,"user1");
  failed=false;
  try {
    store.disAssociateRoleFromUser(role1,"user3");
  }
 catch (  IOException ex) {
    assertSecurityException(ex,USERNAME_NOT_FOUND_$1,"user3");
    failed=true;
  }
  assertTrue(failed);
  store.removeRole(role1);
}
