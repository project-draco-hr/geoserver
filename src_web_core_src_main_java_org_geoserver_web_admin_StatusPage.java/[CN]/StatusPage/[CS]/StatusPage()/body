{
  values=new HashMap<String,String>();
  updateModel();
  add(new Label("dataDir",new MapModel(values,KEY_DATA_DIR)));
  add(new Label("locks",new MapModel(values,KEY_LOCKS)));
  add(new Label("connections",new MapModel(values,KEY_CONNECTIONS)));
  add(new Label("memory",new MapModel(values,KEY_MEMORY)));
  add(new Label("jvm.version",new MapModel(values,KEY_JVM_VERSION)));
  add(new Label("jai.available",new MapModel(values,KEY_JAI_AVAILABLE)));
  add(new Label("jai.imageio.available",new MapModel(values,KEY_JAI_IMAGEIO_AVAILABLE)));
  add(new Label("jai.memory.available",new MapModel(values,KEY_JAI_MAX_MEM)));
  add(new Label("jai.memory.used",new MapModel(values,KEY_JAI_MEM_USAGE)));
  add(new Label("jai.memory.threshold",new MapModel(values,KEY_JAI_MEM_THRESHOLD)));
  add(new Label("jai.tile.threads",new MapModel(values,KEY_JAI_TILE_THREADS)));
  add(new Label("jai.tile.priority",new MapModel(values,KEY_JAI_TILE_THREAD_PRIORITY)));
  add(new Label("coverage.corepoolsize",new MapModel(values,KEY_COVERAGEACCESS_CORE_POOL_SIZE)));
  add(new Label("coverage.maxpoolsize",new MapModel(values,KEY_COVERAGEACCESS_MAX_POOL_SIZE)));
  add(new Label("coverage.keepalivetime",new MapModel(values,KEY_COVERAGEACCESS_KEEP_ALIVE_TIME)));
  add(new Label("updateSequence",new MapModel(values,KEY_UPDATE_SEQUENCE)));
  add(new Link("free.locks"){
    private static final long serialVersionUID=1L;
    public void onClick(){
      updateModel();
    }
  }
);
  add(new Link("free.memory"){
    private static final long serialVersionUID=1L;
    public void onClick(){
      System.gc();
      System.runFinalization();
      updateModel();
    }
  }
);
  add(new Link("free.memory.jai"){
    private static final long serialVersionUID=1L;
    public void onClick(){
      TileCache jaiCache=getGeoServer().getGlobal().getJAI().getTileCache();
      final long capacityBefore=jaiCache.getMemoryCapacity();
      jaiCache.flush();
      jaiCache.setMemoryCapacity(0);
      System.gc();
      System.runFinalization();
      jaiCache.setMemoryCapacity(capacityBefore);
      updateModel();
    }
  }
);
  int fontCount=GraphicsEnvironment.getLocalGraphicsEnvironment().getAllFonts().length;
  add(new Label("fontCount",new ParamResourceModel("StatusPage.fontCount",this,fontCount)));
  add(new BookmarkablePageLink("show.fonts",JVMFontsPage.class));
  add(new AjaxLink("clear.resourceCache"){
    @Override public void onClick(    AjaxRequestTarget target){
      try {
        getGeoServer().reset();
        info(getLocalizer().getString("resourceCacheClearedSuccessfully",this));
      }
 catch (      Throwable t) {
        LOGGER.log(Level.SEVERE,"Error resetting resource caches",t);
        error(t);
      }
      target.add(feedbackPanel);
    }
  }
);
  add(new AjaxLink("reload.catalogConfig"){
    @Override public void onClick(    AjaxRequestTarget target){
      try {
        getGeoServer().reload();
        info(getLocalizer().getString("catalogConfigReloadedSuccessfully",StatusPage.this));
      }
 catch (      Throwable t) {
        LOGGER.log(Level.SEVERE,"An error occurred while reloading the catalog",t);
        error(t);
      }
      target.add(feedbackPanel);
    }
  }
);
}
