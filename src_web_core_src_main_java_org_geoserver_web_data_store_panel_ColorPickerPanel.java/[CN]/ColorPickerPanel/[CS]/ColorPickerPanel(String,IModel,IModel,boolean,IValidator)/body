{
  super(id,paramVale);
  String requiredMark=required ? " *" : "";
  Label label=new Label("paramName",paramLabelModel.getObject() + requiredMark);
  add(label);
  ColorPickerField textField=new ColorPickerField("paramValue",paramVale){
    @SuppressWarnings("unchecked") @Override public <C>IConverter<C> getConverter(    Class<C> type){
      if (type.isAssignableFrom(String.class)) {
        return (IConverter<C>)new IConverter<String>(){
          public String convertToString(          String value,          Locale locale){
            String input=(String)value;
            if (input.startsWith("#")) {
              return input.substring(1);
            }
 else {
              return input;
            }
          }
          public String convertToObject(          String value,          Locale locale){
            if (value.equals(""))             return value;
            return "#" + value;
          }
        }
;
      }
      return super.getConverter(type);
    }
  }
;
  textField.setRequired(required);
  textField.setLabel(paramLabelModel);
  if (validators != null) {
    for (    IValidator validator : validators) {
      textField.add(validator);
    }
  }
  FormComponentFeedbackBorder feedback=new FormComponentFeedbackBorder("border");
  feedback.add(textField);
  add(feedback);
}
