{
  if (LOGGER.isLoggable(Level.FINEST)) {
    LOGGER.finest(new StringBuffer("execute CoverageRequest response. Called request is: ").append(request).toString());
  }
  WCSInfo wcs=getServiceInfo();
  CoverageInfo meta=null;
  GridCoverage2D coverage=null;
  try {
    CodeType identifier=request.getIdentifier();
    if (identifier == null)     throw new WcsException("Internal error, the coverage identifier must not be null",InvalidParameterValue,"identifier");
    meta=catalog.getCoverageByName(identifier.getValue());
    if (meta == null) {
      throw new WcsException("No such coverage: " + request.getIdentifier().getValue());
    }
    checkDomainSubset(meta,request.getDomainSubset(),wcs);
    checkRangeSubset(meta,request.getRangeSubset());
    checkOutput(meta,request.getOutput());
    final GridCoverage2DReader reader=(GridCoverage2DReader)meta.getGridCoverageReader(null,WCSUtils.getReaderHints(wcs));
    final GeneralEnvelope originalEnvelope=reader.getOriginalEnvelope();
    final BoundingBoxType bbox=request.getDomainSubset().getBoundingBox();
    final CoordinateReferenceSystem nativeCRS=originalEnvelope.getCoordinateReferenceSystem();
    final GeneralEnvelope requestedEnvelopeInNativeCRS;
    final GeneralEnvelope requestedEnvelope;
    if (bbox != null) {
      double[] lowerCorner=new double[bbox.getLowerCorner().size()];
      double[] upperCorner=new double[bbox.getUpperCorner().size()];
      for (int i=0; i < lowerCorner.length; i++) {
        lowerCorner[i]=(Double)bbox.getLowerCorner().get(i);
        upperCorner[i]=(Double)bbox.getUpperCorner().get(i);
      }
      requestedEnvelope=new GeneralEnvelope(lowerCorner,upperCorner);
      if (bbox.getCrs() == null) {
        requestedEnvelope.setCoordinateReferenceSystem(nativeCRS);
        requestedEnvelopeInNativeCRS=requestedEnvelope;
      }
 else {
        final CoordinateReferenceSystem bboxCRS=CRS.decode(bbox.getCrs());
        requestedEnvelope.setCoordinateReferenceSystem(bboxCRS);
        if (!CRS.equalsIgnoreMetadata(bboxCRS,nativeCRS)) {
          CoordinateOperationFactory of=CRS.getCoordinateOperationFactory(true);
          CoordinateOperation co=of.createOperation(bboxCRS,nativeCRS);
          requestedEnvelopeInNativeCRS=CRS.transform(co,requestedEnvelope);
        }
 else {
          requestedEnvelopeInNativeCRS=new GeneralEnvelope(requestedEnvelope);
        }
      }
    }
 else {
      requestedEnvelopeInNativeCRS=reader.getOriginalEnvelope();
      requestedEnvelope=requestedEnvelopeInNativeCRS;
    }
    final GridCrsType gridCRS=request.getOutput().getGridCRS();
    final CoordinateReferenceSystem targetCRS;
    if (gridCRS == null) {
      targetCRS=reader.getOriginalEnvelope().getCoordinateReferenceSystem();
    }
 else {
      targetCRS=CRS.decode(gridCRS.getGridBaseCRS());
    }
    int elevationLevels=0;
    double[] elevations=null;
    MathTransform gridToCRS=reader.getOriginalGridToWorld(PixelInCell.CELL_CENTER);
    final List<Date> timeValues=new LinkedList<Date>();
    TimeSequenceType temporalSubset=request.getDomainSubset().getTemporalSubset();
    if (temporalSubset != null && temporalSubset.getTimePosition() != null && temporalSubset.getTimePosition().size() > 0) {
      for (Iterator it=temporalSubset.getTimePosition().iterator(); it.hasNext(); ) {
        Date tp=(Date)it.next();
        timeValues.add(tp);
      }
    }
 else     if (temporalSubset != null && temporalSubset.getTimePeriod() != null && temporalSubset.getTimePeriod().size() > 0) {
      for (Iterator it=temporalSubset.getTimePeriod().iterator(); it.hasNext(); ) {
        TimePeriodType tp=(TimePeriodType)it.next();
        Date beginning=(Date)tp.getBeginPosition();
        Date ending=(Date)tp.getEndPosition();
        timeValues.add(beginning);
        timeValues.add(ending);
      }
    }
    final GeneralEnvelope intersectionEnvelopeInSourceCRS=new GeneralEnvelope(requestedEnvelopeInNativeCRS);
    intersectionEnvelopeInSourceCRS.intersect(originalEnvelope);
    final GridGeometry2D requestedGridGeometry=new GridGeometry2D(PixelInCell.CELL_CENTER,gridToCRS,intersectionEnvelopeInSourceCRS,null);
    final ParameterValueGroup readParametersDescriptor=reader.getFormat().getReadParameters();
    GeneralParameterValue[] readParameters=CoverageUtils.getParameters(readParametersDescriptor,meta.getParameters());
    readParameters=(readParameters != null ? readParameters : new GeneralParameterValue[0]);
    final ParameterValue requestedGridGeometryParam=new DefaultParameterDescriptor(AbstractGridFormat.READ_GRIDGEOMETRY2D.getName().toString(),GeneralGridGeometry.class,null,requestedGridGeometry).createValue();
    final List<GeneralParameterDescriptor> parameterDescriptors=readParametersDescriptor.getDescriptor().descriptors();
    ParameterValue time=null;
    boolean hasTime=timeValues.size() > 0;
    ParameterValue elevation=null;
    boolean hasElevation=elevations != null && !Double.isNaN(elevations[0]);
    if (hasElevation || hasTime) {
      for (      GeneralParameterDescriptor pd : parameterDescriptors) {
        final String code=pd.getName().getCode();
        if (code.equalsIgnoreCase("TIME")) {
          time=(ParameterValue)pd.createValue();
          time.setValue(timeValues);
        }
        if (code.equalsIgnoreCase("ELEVATION")) {
          elevation=(ParameterValue)pd.createValue();
          elevation.setValue(elevations[0]);
        }
        if ((hasElevation && elevation != null && hasTime && time != null) || !hasElevation && hasTime && time != null || hasElevation && elevation != null && !hasTime)         break;
      }
    }
    int addedParams=1 + (hasTime ? 1 : 0) + (hasElevation ? 1 : 0);
    GeneralParameterValue[] readParametersClone=new GeneralParameterValue[readParameters.length + addedParams--];
    System.arraycopy(readParameters,0,readParametersClone,0,readParameters.length);
    readParametersClone[readParameters.length + addedParams--]=requestedGridGeometryParam;
    if (hasTime)     readParametersClone[readParameters.length + addedParams--]=time;
    if (hasElevation)     readParametersClone[readParameters.length + addedParams--]=elevation;
    readParameters=readParametersClone;
    WCSUtils.checkInputLimits(wcs,meta,reader,requestedGridGeometry);
    Filter filter=WCSUtils.getRequestFilter();
    if (filter != null) {
      readParameters=CoverageUtils.mergeParameter(parameterDescriptors,readParameters,filter,"FILTER","Filter");
    }
    readParameters=WCSUtils.replaceParameter(readParameters,Boolean.FALSE,AbstractGridFormat.USE_JAI_IMAGEREAD);
    coverage=(GridCoverage2D)reader.read(readParameters);
    if ((coverage == null) || !(coverage instanceof GridCoverage2D)) {
      throw new IOException("The requested coverage could not be found.");
    }
    WCSUtils.checkInputLimits(wcs,coverage);
    if (!intersectionEnvelopeInSourceCRS.contains(coverage.getEnvelope2D(),true)) {
      coverage=WCSUtils.crop(coverage,intersectionEnvelopeInSourceCRS);
    }
    GridCoverage2D bandSelectedCoverage=coverage;
    String interpolationType=null;
    if (request.getRangeSubset() != null) {
      if (request.getRangeSubset().getFieldSubset().size() > 1) {
        throw new WcsException("Multi field coverages are not supported yet");
      }
      FieldSubsetType field=(FieldSubsetType)request.getRangeSubset().getFieldSubset().get(0);
      interpolationType=field.getInterpolationType();
      if (field.getAxisSubset().size() > 1) {
        throw new WcsException("Multi axis coverages are not supported yet");
      }
      if (field.getAxisSubset().size() == 1) {
        List<CoverageDimensionInfo> dimensions=meta.getDimensions();
        Map<String,Integer> dimensionMap=new HashMap<String,Integer>();
        for (int i=0; i < dimensions.size(); i++) {
          String keyName=dimensions.get(i).getName().replace(' ','_');
          dimensionMap.put(keyName,i);
        }
        AxisSubsetType axisSubset=(AxisSubsetType)field.getAxisSubset().get(0);
        List keys=axisSubset.getKey();
        int[] bands=new int[keys.size()];
        for (int j=0; j < bands.length; j++) {
          final String key=(String)keys.get(j);
          Integer index=dimensionMap.get(key);
          if (index == null)           throw new WcsException("Unknown field/axis/key combination " + field.getIdentifier().getValue() + "/"+ axisSubset.getIdentifier()+ "/"+ key);
          bands[j]=index;
        }
        try {
          bandSelectedCoverage=(GridCoverage2D)WCSUtils.bandSelect(coverage,bands);
        }
 catch (        WcsException e) {
          throw new WcsException(e.getLocalizedMessage());
        }
      }
    }
    Interpolation interpolation=Interpolation.getInstance(Interpolation.INTERP_NEAREST);
    if (interpolationType != null) {
      if (interpolationType.equalsIgnoreCase("linear") || interpolationType.equalsIgnoreCase("bilinear")) {
        interpolation=Interpolation.getInstance(Interpolation.INTERP_BILINEAR);
      }
 else       if (interpolationType.equalsIgnoreCase("cubic") || interpolationType.equalsIgnoreCase("bicubic")) {
        interpolation=Interpolation.getInstance(Interpolation.INTERP_BICUBIC);
      }
 else       if (interpolationType.equalsIgnoreCase("nearest")) {
        interpolation=Interpolation.getInstance(Interpolation.INTERP_NEAREST);
      }
    }
    final GeneralEnvelope intersectionEnvelope;
    boolean reprojectionNeeded=!CRS.equalsIgnoreMetadata(nativeCRS,targetCRS);
    if (reprojectionNeeded) {
      CoordinateOperationFactory of=CRS.getCoordinateOperationFactory(true);
      CoordinateOperation co=of.createOperation(nativeCRS,targetCRS);
      intersectionEnvelope=CRS.transform(co,intersectionEnvelopeInSourceCRS);
    }
 else {
      intersectionEnvelope=intersectionEnvelopeInSourceCRS;
    }
    double pixelSizeX;
    double pixelSizeY;
    if (gridCRS != null) {
      Double[] origin=(Double[])gridCRS.getGridOrigin();
      Double[] offsets=(Double[])gridCRS.getGridOffsets();
      if (origin == null) {
        origin=new Double[]{0.0,0.0};
      }
      if (offsets == null) {
        offsets=estimateOffsets(reader,gridCRS,gridToCRS,intersectionEnvelope,reprojectionNeeded);
      }
      AffineTransform tx;
      if (gridCRS.getGridType().equals(GridType.GT2dSimpleGrid.getXmlConstant())) {
        tx=new AffineTransform(offsets[0],0,0,offsets[1],origin[0],origin[1]);
      }
 else       if (gridCRS.getGridType().equals(GridType.GT2dGridIn2dCrs.getXmlConstant())) {
        tx=new AffineTransform(offsets[0],offsets[1],offsets[2],offsets[3],origin[0],origin[1]);
      }
 else {
        tx=new AffineTransform(offsets[0],offsets[4],offsets[1],offsets[3],origin[0],origin[1]);
        if (origin.length != 3 || offsets.length != 6)         throw new WcsException("",InvalidParameterValue,"GridCRS");
        elevationLevels=(int)Math.round(requestedEnvelope.getUpperCorner().getOrdinate(2) - requestedEnvelope.getLowerCorner().getOrdinate(2));
        if (elevationLevels > 0) {
          elevations=new double[elevationLevels];
          elevations[0]=requestedEnvelope.getLowerCorner().getOrdinate(2);
          elevations[elevationLevels - 1]=requestedEnvelope.getUpperCorner().getOrdinate(2);
          if (elevationLevels > 2) {
            final int adjustedLevelsNum=elevationLevels - 1;
            double step=(elevations[elevationLevels - 1] - elevations[0]) / adjustedLevelsNum;
            for (int i=1; i < adjustedLevelsNum; i++)             elevations[i]=elevations[i - 1] + step;
          }
        }
      }
      pixelSizeX=Math.abs(tx.getScaleX());
      pixelSizeY=Math.abs(tx.getScaleY());
      gridToCRS=new AffineTransform2D(tx);
    }
 else {
      Double[] offsets=estimateOffsets(reader,gridCRS,gridToCRS,intersectionEnvelope,reprojectionNeeded);
      if (offsets.length == 2) {
        pixelSizeX=Math.abs(offsets[0]);
        pixelSizeY=Math.abs(offsets[1]);
        AffineTransform tx=new AffineTransform(offsets[0],0,0,offsets[1],0,0);
        gridToCRS=new AffineTransform2D(tx);
      }
 else       if (offsets.length == 6) {
        AffineTransform tx=new AffineTransform(offsets[0],offsets[1],offsets[3],offsets[4],offsets[2],offsets[5]);
        pixelSizeX=Math.abs(XAffineTransform.getScaleX0(tx));
        pixelSizeY=Math.abs(XAffineTransform.getScaleY0(tx));
        gridToCRS=new AffineTransform2D(tx);
      }
 else {
        AffineTransform tx=new AffineTransform(offsets[0],offsets[1],offsets[3],offsets[4],0,0);
        pixelSizeX=Math.abs(XAffineTransform.getScaleX0(tx));
        pixelSizeY=Math.abs(XAffineTransform.getScaleY0(tx));
        gridToCRS=new AffineTransform2D(tx);
      }
    }
    if (intersectionEnvelope.getSpan(0) < Math.abs(pixelSizeX)) {
      double minX=intersectionEnvelope.getMinimum(0);
      intersectionEnvelope.setRange(0,minX,minX + pixelSizeX);
    }
    if (intersectionEnvelope.getSpan(1) < Math.abs(pixelSizeY)) {
      double minY=intersectionEnvelope.getMinimum(1);
      intersectionEnvelope.setRange(1,minY,minY + pixelSizeY);
    }
    final GridGeometry2D destinationGridGeometry=new GridGeometry2D(PixelInCell.CELL_CENTER,gridToCRS,intersectionEnvelope,null);
    WCSUtils.checkOutputLimits(wcs,destinationGridGeometry.getGridRange2D(),bandSelectedCoverage.getRenderedImage().getSampleModel());
    boolean sameGridGeometry=bandSelectedCoverage.getGridGeometry().equals(destinationGridGeometry);
    if (reprojectionNeeded || !sameGridGeometry) {
      final GridCoverage2D reprojectedCoverage=WCSUtils.resample(bandSelectedCoverage,nativeCRS,targetCRS,destinationGridGeometry,interpolation);
      return new GridCoverage[]{reprojectedCoverage};
    }
 else {
      return new GridCoverage[]{bandSelectedCoverage};
    }
  }
 catch (  Throwable e) {
    if (coverage != null) {
      CoverageCleanerCallback.addCoverages(coverage);
    }
    if (e instanceof WcsException) {
      throw (WcsException)e;
    }
 else {
      throw new WcsException(e);
    }
  }
}
