{
  if (node instanceof TreeLeaf) {
    List<Attribute> atts=new ArrayList<Attribute>();
    if (node instanceof ComplexTreeLeaf) {
      ComplexTreeLeaf leaf=(ComplexTreeLeaf)node;
      ComplexType type=(ComplexType)node.descriptor.getType();
      for (      Map<String,Object> item : leaf.values) {
        ab.setDescriptor(node.descriptor);
        for (        Entry<String,Object> entry : item.entrySet()) {
          PropertyDescriptor descriptor=Types.findDescriptor(type,entry.getKey());
          if (descriptor == null) {
            throw new IllegalArgumentException("Cannot find descriptor for attribute " + entry.getKey() + " in type "+ type.getName().toString());
          }
          ab.add(null,entry.getValue(),descriptor.getName());
        }
        Attribute att=ab.build();
        if (leaf.userData != null) {
          for (          Entry<String,Object> entry : item.entrySet()) {
            ((ComplexAttribute)att).getProperty(entry.getKey()).getUserData().putAll(leaf.userData);
          }
        }
        atts.add(att);
      }
    }
 else {
      SimpleTreeLeaf leaf=(SimpleTreeLeaf)node;
      for (      Object item : leaf.values) {
        ab.setDescriptor(node.descriptor);
        Attribute att=ab.buildSimple(null,item);
        if (leaf.userData != null) {
          att.getUserData().putAll(leaf.userData);
        }
        atts.add(att);
      }
    }
    return atts;
  }
 else   if (node instanceof TreeBranch) {
    List<Attribute> list=new ArrayList<Attribute>();
    for (    TreeNode child : ((TreeBranch)node).children.values()) {
      for (      Attribute att : buildNode(child)) {
        list.add(att);
      }
    }
    return Collections.<Attribute>singletonList(ab.createComplexAttribute(list,null,node.descriptor,null));
  }
  return null;
}
