{
  if (node instanceof TreeLeaf) {
    if (node instanceof ComplexTreeLeaf) {
      ComplexTreeLeaf leaf=(ComplexTreeLeaf)node;
      ComplexType type=(ComplexType)node.descriptor.getType();
      ab.setDescriptor(node.descriptor);
      for (      Entry<String,Object> entry : leaf.value.entrySet()) {
        PropertyDescriptor descriptor=Types.findDescriptor(type,entry.getKey());
        if (descriptor == null) {
          throw new IllegalArgumentException("Cannot find descriptor for attribute " + entry.getKey() + " in type "+ type.getName().toString());
        }
        ab.add(null,entry.getValue(),descriptor.getName());
      }
      Attribute att=ab.build();
      if (leaf.userData != null) {
        for (        Entry<String,Object> entry : leaf.value.entrySet()) {
          ((ComplexAttribute)att).getProperty(entry.getKey()).getUserData().putAll(leaf.userData);
        }
      }
      return att;
    }
 else {
      SimpleTreeLeaf leaf=(SimpleTreeLeaf)node;
      ab.setDescriptor(node.descriptor);
      Attribute att=ab.buildSimple(null,leaf.value);
      if (leaf.userData != null) {
        att.getUserData().putAll(leaf.userData);
      }
      return att;
    }
  }
 else   if (node instanceof TreeBranch) {
    List<Attribute> list=new ArrayList<Attribute>();
    for (    List<TreeNode> nodes : ((TreeBranch)node).children.values()) {
      for (      TreeNode child : nodes) {
        list.add(buildNode(child));
      }
    }
    return ab.createComplexAttribute(list,null,node.descriptor,null);
  }
  return null;
}
