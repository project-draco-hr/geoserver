{
  final CatalogInfo info=modifyEv.getSource();
  if (info instanceof LayerGroupInfo) {
    final LayerGroupInfo localizedObject=CatalogUtils.localizeLayerGroup((LayerGroupInfo)info,catalog);
    catalog.firePostModified(ModificationProxy.unwrap(localizedObject));
  }
 else   if (info instanceof LayerInfo) {
    final LayerInfo localizedObject=CatalogUtils.localizeLayer((LayerInfo)info,catalog);
    catalog.firePostModified(ModificationProxy.unwrap(localizedObject));
  }
 else   if (info instanceof MapInfo) {
    final MapInfo localizedObject=CatalogUtils.localizeMapInfo((MapInfo)info,catalog);
    catalog.firePostModified(ModificationProxy.unwrap(localizedObject));
  }
 else   if (info instanceof NamespaceInfo) {
    final NamespaceInfo localizedObject=CatalogUtils.localizeNamespace((NamespaceInfo)info,catalog);
    catalog.firePostModified(ModificationProxy.unwrap(localizedObject));
  }
 else   if (info instanceof StoreInfo) {
    final StoreInfo localizedObject=CatalogUtils.localizeStore((StoreInfo)info,catalog);
    catalog.firePostModified(ModificationProxy.unwrap(localizedObject));
  }
 else   if (info instanceof ResourceInfo) {
    final ResourceInfo localizedObject=CatalogUtils.localizeResource((ResourceInfo)info,catalog);
    catalog.firePostModified(ModificationProxy.unwrap(localizedObject));
  }
 else   if (info instanceof StyleInfo) {
    final StyleInfo localizedObject=CatalogUtils.localizeStyle((StyleInfo)info,catalog);
    catalog.firePostModified(ModificationProxy.unwrap(localizedObject));
  }
 else   if (info instanceof WorkspaceInfo) {
    final WorkspaceInfo localizedObject=CatalogUtils.localizeWorkspace((WorkspaceInfo)info,catalog);
    catalog.firePostModified(ModificationProxy.unwrap(localizedObject));
  }
 else   if (info instanceof CatalogInfo) {
    if (LOGGER.isLoggable(java.util.logging.Level.WARNING)) {
      LOGGER.warning("info - ID: " + info.getId() + " toString: "+ info.toString());
    }
  }
 else {
    if (LOGGER.isLoggable(java.util.logging.Level.WARNING)) {
      LOGGER.warning("info - ID: " + info.getId() + " toString: "+ info.toString());
    }
    throw new IllegalArgumentException("Bad incoming object: " + info.toString());
  }
}
