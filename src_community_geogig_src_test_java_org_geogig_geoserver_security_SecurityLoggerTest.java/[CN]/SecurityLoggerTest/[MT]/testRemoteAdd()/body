{
  RemoteAddOp command=new RemoteAddOp();
  String remoteName="upstream";
  String mappedBranch="master";
  String username="gabriel";
  String password="passw0rd";
  String fetchurl="http://demo.example.com/testrepo";
  String pushurl=fetchurl;
  String fetch="+" + Ref.append(Ref.HEADS_PREFIX,mappedBranch) + ":"+ Ref.append(Ref.append(Ref.REMOTES_PREFIX,remoteName),mappedBranch);
  boolean mapped=true;
  command.setName(remoteName).setBranch(mappedBranch).setMapped(mapped).setPassword(password).setURL(username).setURL(fetchurl);
  ArgumentCaptor<CharSequence> arg=ArgumentCaptor.forClass(CharSequence.class);
  SecurityLogger.logPre(command);
  verify(mockStore).debug(anyString(),arg.capture());
  String msg=String.valueOf(arg.getValue());
  assertTrue(msg.startsWith("Remote add"));
  assertTrue(msg.contains(remoteName));
  assertTrue(msg.contains(fetchurl));
  Remote retVal=new Remote(remoteName,fetchurl,pushurl,fetch,mapped,mappedBranch,username,password);
  SecurityLogger.logPost(command,retVal,null);
  verify(mockStore).info(anyString(),arg.capture());
  msg=String.valueOf(arg.getValue());
  assertTrue(msg.startsWith("Remote add success"));
  assertTrue(msg.contains(remoteName));
  assertTrue(msg.contains(fetchurl));
  ArgumentCaptor<Throwable> exception=ArgumentCaptor.forClass(Throwable.class);
  SecurityLogger.logPost(command,null,new RuntimeException("test exception"));
  verify(mockStore).error(anyString(),arg.capture(),exception.capture());
  msg=String.valueOf(arg.getValue());
  assertTrue(msg.startsWith("Remote add failed"));
  assertTrue(msg.contains(remoteName));
  assertTrue(msg.contains(fetchurl));
}
