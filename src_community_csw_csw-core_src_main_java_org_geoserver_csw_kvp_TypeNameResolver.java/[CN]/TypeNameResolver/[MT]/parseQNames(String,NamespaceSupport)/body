{
  if (namespaces == null) {
    namespaces=new NamespaceSupport();
  }
  List<String> typeNames=(List<String>)new FlatKvpParser("nullKey",String.class).parse(typenameString);
  List<QName> result=new ArrayList<QName>();
  for (  String tn : typeNames) {
    int idx=tn.indexOf(":");
    String prefix=null;
    String uri;
    String typeName;
    if (idx == -1) {
      typeName=tn;
      uri=namespaces.getURI("");
      if (uri == null) {
        throw new ServiceException("Type name " + tn + " has no prefix, but there is no default prefix "+ "declared in the NAMESPACE parameter",ServiceException.INVALID_PARAMETER_VALUE,"typename");
      }
    }
 else {
      typeName=tn.substring(idx + 1);
      prefix=tn.substring(0,idx);
      uri=namespaces.getURI(prefix);
      if (uri == null) {
        uri=CSWRecordTypes.NAMESPACES.getURI(prefix);
        if (uri == null) {
          throw new ServiceException("Type name " + tn + " has an unknown prefix, please qualify it using the "+ "NAMESPACE paramter, or use a well known prefix: "+ ServiceException.INVALID_PARAMETER_VALUE,"typename");
        }
      }
    }
    QName qname=new QName(uri,typeName,prefix);
    result.add(qname);
  }
  return result;
}
