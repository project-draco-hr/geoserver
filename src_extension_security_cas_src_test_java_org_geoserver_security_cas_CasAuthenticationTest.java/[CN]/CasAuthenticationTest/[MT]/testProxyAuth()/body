{
  CasAuthenticationFilterConfig config=new CasAuthenticationFilterConfig();
  config.setClassName(GeoServerCasAuthenticationFilter.class.getName());
  config.setService(serviceUrl.toString());
  config.setCasServerUrlPrefix(casServerURLPrefix.toString());
  config.setName(casFilterName);
  config.setUserGroupServiceName("ug1");
  config.setProxyCallbackUrlPrefix(proxyCallbackUrlPrefix.toString());
  getSecurityManager().saveFilter(config);
  ExceptionTranslationFilterConfig exConfig=new ExceptionTranslationFilterConfig();
  exConfig.setClassName(GeoServerExceptionTranslationFilter.class.getName());
  exConfig.setName(CAS_EXCEPTION_TRANSLATION_FILTER);
  exConfig.setAccessDeniedErrorPage("/denied.jsp");
  exConfig.setAuthenticationFilterName(casFilterName);
  getSecurityManager().saveFilter(exConfig);
  String targetService="https://ux-desktop03.mc-home.local/geoserver/wms";
  CasProxiedAuthenticationFilterConfig pconfig1=new CasProxiedAuthenticationFilterConfig();
  pconfig1.setClassName(GeoServerCasProxiedAuthenticationFilter.class.getName());
  pconfig1.setName(casProxyFilterName1);
  pconfig1.setCasServerUrlPrefix(casServerURLPrefix.toString());
  pconfig1.setService(targetService);
  pconfig1.setRoleSource(RoleSource.UserGroupService);
  pconfig1.setUserGroupServiceName("ug1");
  getSecurityManager().saveFilter(pconfig1);
  prepareFilterChain(pattern,GeoServerSecurityFilterChain.SECURITY_CONTEXT_NO_ASC_FILTER,casProxyFilterName1,GeoServerSecurityFilterChain.DYNAMIC_EXCEPTION_TRANSLATION_FILTER,GeoServerSecurityFilterChain.FILTER_SECURITY_INTERCEPTOR);
  prepareFilterChain("/j_spring_cas_security_check",GeoServerSecurityFilterChain.SECURITY_CONTEXT_ASC_FILTER,casFilterName);
  SecurityContextHolder.getContext().setAuthentication(null);
  MockHttpServletRequest request=createRequest(pattern);
  MockHttpServletResponse response=new MockHttpServletResponse();
  MockFilterChain chain=new MockFilterChain();
  request.setupAddParameter("ticket","blabla");
  request.setQueryString("ticket=blabla");
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_UNAUTHORIZED,response.getErrorCode());
  getCache().removeAll();
  String username="castest";
  CasFormAuthenticationHelper helper=new CasFormAuthenticationHelper(casServerURLPrefix,username,username);
  Assertion ass=authenticateWithPGT(helper);
  String proxyTicket=ass.getPrincipal().getProxyTicketFor(targetService);
  assertNotNull(proxyTicket);
  for (int i=0; i < 2; i++) {
    request=createRequest(pattern);
    response=new MockHttpServletResponse();
    chain=new MockFilterChain();
    request.setupAddParameter("ticket",proxyTicket);
    getProxy().doFilter(request,response,chain);
    assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
    TestingAuthenticationCache cache=getCache();
    CasAuthenticationToken casAuth=(CasAuthenticationToken)cache.get(casProxyFilterName1,proxyTicket);
    assertNotNull(casAuth);
    checkForAuthenticatedRole(casAuth);
    assertEquals(username,((UserDetails)casAuth.getPrincipal()).getUsername());
    assertTrue(casAuth.getAuthorities().contains(new GeoServerRole(rootRole)));
    assertTrue(casAuth.getAuthorities().contains(new GeoServerRole(derivedRole)));
  }
  assertNull(GeoServerCasAuthenticationFilter.getHandler().getSessionMappingStorage().removeSessionByMappingId(proxyTicket));
  helper.ssoLogout();
  username="unknown";
  helper=new CasFormAuthenticationHelper(casServerURLPrefix,username,username);
  ass=authenticateWithPGT(helper);
  proxyTicket=ass.getPrincipal().getProxyTicketFor(targetService);
  assertNotNull(proxyTicket);
  for (int i=0; i < 2; i++) {
    request=createRequest(pattern);
    response=new MockHttpServletResponse();
    chain=new MockFilterChain();
    request.setupAddParameter("ticket",proxyTicket);
    request.setQueryString("ticket=" + proxyTicket);
    getProxy().doFilter(request,response,chain);
    assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
    TestingAuthenticationCache cache=getCache();
    CasAuthenticationToken casAuth=(CasAuthenticationToken)cache.get(casProxyFilterName1,proxyTicket);
    assertNotNull(casAuth);
    checkForAuthenticatedRole(casAuth);
    assertEquals(username,((UserDetails)casAuth.getPrincipal()).getUsername());
    assertEquals(1,casAuth.getAuthorities().size());
  }
  helper.ssoLogout();
  getCache().removeAll();
  updateUser("ug1","castest",false);
  username="castest";
  helper=new CasFormAuthenticationHelper(casServerURLPrefix,username,username);
  ass=authenticateWithPGT(helper);
  proxyTicket=ass.getPrincipal().getProxyTicketFor(targetService);
  assertNotNull(proxyTicket);
  request=createRequest(pattern);
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.setupAddParameter("ticket",proxyTicket);
  request.setQueryString("ticket=" + proxyTicket);
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_UNAUTHORIZED,response.getErrorCode());
  TestingAuthenticationCache cache=getCache();
  CasAuthenticationToken casAuth=(CasAuthenticationToken)cache.get(casProxyFilterName1,proxyTicket);
  assertNull(casAuth);
  updateUser("ug1","castest",true);
  helper.ssoLogout();
  insertAnonymousFilter(GeoServerSecurityFilterChain.DYNAMIC_EXCEPTION_TRANSLATION_FILTER);
  request=createRequest("/foo/bar");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
  removeAnonymousFilter();
  pconfig1.setProxyCallbackUrlPrefix(proxyCallbackUrlPrefix.toString());
  getSecurityManager().saveFilter(pconfig1);
  getCache().removeAll();
  username="castest";
  helper=new CasFormAuthenticationHelper(casServerURLPrefix,username,username);
  ass=authenticateWithPGT(helper);
  proxyTicket=ass.getPrincipal().getProxyTicketFor(targetService);
  assertNotNull(proxyTicket);
  request=createRequest(pattern);
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.setupAddParameter("ticket",proxyTicket);
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
  cache=getCache();
  casAuth=(CasAuthenticationToken)cache.get(casProxyFilterName1,proxyTicket);
  assertNotNull(casAuth);
  checkForAuthenticatedRole(casAuth);
  assertEquals(username,((UserDetails)casAuth.getPrincipal()).getUsername());
  assertTrue(casAuth.getAuthorities().contains(new GeoServerRole(rootRole)));
  assertTrue(casAuth.getAuthorities().contains(new GeoServerRole(derivedRole)));
  proxyTicket=casAuth.getAssertion().getPrincipal().getProxyTicketFor("http://localhost/blabla");
  assertNotNull(proxyTicket);
  helper.ssoLogout();
}
