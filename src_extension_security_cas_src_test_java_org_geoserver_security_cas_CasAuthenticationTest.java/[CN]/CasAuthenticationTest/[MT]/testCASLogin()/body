{
  String casFilterName="testCasFilter1";
  CasAuthenticationFilterConfig config=new CasAuthenticationFilterConfig();
  config.setClassName(GeoServerCasAuthenticationFilter.class.getName());
  config.setCasServerUrlPrefix(casServerURLPrefix.toString());
  config.setName(casFilterName);
  config.setRoleSource(PreAuthenticatedUserNameRoleSource.UserGroupService);
  config.setUserGroupServiceName("ug1");
  config.setSingleSignOut(true);
  getSecurityManager().saveFilter(config);
  prepareFilterChain(pattern,casFilterName);
  modifyChain(pattern,false,true,null);
  SecurityContextHolder.getContext().setAuthentication(null);
  MockHttpServletRequest request=createRequest("/foo/bar");
  MockHttpServletResponse response=new MockHttpServletResponse();
  MockFilterChain chain=new MockFilterChain();
  getProxy().doFilter(request,response,chain);
  assertTrue(response.getStatus() == MockHttpServletResponse.SC_MOVED_TEMPORARILY);
  String redirectURL=response.getHeader("Location");
  assertTrue(redirectURL.contains(GeoServerCasConstants.LOGIN_URI));
  assertTrue(redirectURL.endsWith("bar"));
  String username="castest";
  String password=username;
  CasFormAuthenticationHelper helper=new CasFormAuthenticationHelper(casServerURLPrefix,username,password);
  helper.ssoLogin();
  request=createRequest("/foo/bar");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  String ticket=loginUsingTicket(helper,request,response,chain);
  assertFalse(response.getStatus() == MockHttpServletResponse.SC_MOVED_TEMPORARILY);
  SecurityContext ctx=(SecurityContext)request.getSession(false).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNotNull(ctx);
  Authentication auth=ctx.getAuthentication();
  assertNotNull(auth);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  checkForAuthenticatedRole(auth);
  assertEquals(username,auth.getPrincipal());
  assertTrue(auth.getAuthorities().contains(new GeoServerRole(rootRole)));
  assertTrue(auth.getAuthorities().contains(new GeoServerRole(derivedRole)));
  assertNotNull(GeoServerCasAuthenticationFilter.getHandler().getSessionMappingStorage().removeSessionByMappingId(ticket));
  helper.ssoLogout();
  username="unknown";
  password=username;
  helper=new CasFormAuthenticationHelper(casServerURLPrefix,username,password);
  helper.ssoLogin();
  request=createRequest("/foo/bar");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  ticket=loginUsingTicket(helper,request,response,chain);
  assertFalse(response.getStatus() == MockHttpServletResponse.SC_MOVED_TEMPORARILY);
  ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNotNull(ctx);
  auth=ctx.getAuthentication();
  assertNotNull(auth);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  checkForAuthenticatedRole(ctx.getAuthentication());
  assertEquals(username,auth.getPrincipal());
  assertEquals(1,auth.getAuthorities().size());
  assertNotNull(GeoServerCasAuthenticationFilter.getHandler().getSessionMappingStorage().removeSessionByMappingId(ticket));
  helper.ssoLogout();
  username=GeoServerUser.ROOT_USERNAME;
  password=username;
  helper=new CasFormAuthenticationHelper(casServerURLPrefix,username,password);
  helper.ssoLogin();
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request=createRequest("/foo/bar");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  ticket=loginUsingTicket(helper,request,response,chain);
  ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertFalse(response.getStatus() == MockHttpServletResponse.SC_MOVED_TEMPORARILY);
  auth=ctx.getAuthentication();
  assertNotNull(auth);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  assertEquals(GeoServerUser.ROOT_USERNAME,auth.getPrincipal());
  assertTrue(auth.getAuthorities().size() == 1);
  assertTrue(auth.getAuthorities().contains(GeoServerRole.ADMIN_ROLE));
  assertNotNull(GeoServerCasAuthenticationFilter.getHandler().getSessionMappingStorage().removeSessionByMappingId(ticket));
  helper.ssoLogout();
  username="castest";
  password=username;
  helper=new CasFormAuthenticationHelper(casServerURLPrefix,username,password);
  helper.ssoLogin();
  updateUser("ug1",username,false);
  request=createRequest("/foo/bar");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  ticket=loginUsingTicket(helper,request,response,chain);
  assertTrue(response.getStatus() == MockHttpServletResponse.SC_MOVED_TEMPORARILY);
  redirectURL=response.getHeader("Location");
  assertTrue(redirectURL.contains("login"));
  ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNull(ctx);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  assertNull(GeoServerCasAuthenticationFilter.getHandler().getSessionMappingStorage().removeSessionByMappingId(ticket));
  updateUser("ug1",username,true);
  helper.ssoLogout();
  insertAnonymousFilter();
  request=createRequest("foo/bar");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getStatus());
  removeAnonymousFilter();
  username="castest";
  password=username;
  helper=new CasFormAuthenticationHelper(casServerURLPrefix,username,password);
  helper.ssoLogin();
  request=createRequest("/foo/bar");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  ticket=helper.getServiceTicket(new URL(request.getRequestURL().toString()));
  ticket+="ST-A";
  request.addParameter("ticket",ticket);
  request.setQueryString("ticket=" + ticket);
  getProxy().doFilter(request,response,chain);
  assertTrue(response.getStatus() == MockHttpServletResponse.SC_MOVED_TEMPORARILY);
  redirectURL=response.getHeader("Location");
  assertTrue(redirectURL.contains(GeoServerCasConstants.LOGIN_URI));
  ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNull(ctx);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  assertNull(GeoServerCasAuthenticationFilter.getHandler().getSessionMappingStorage().removeSessionByMappingId(ticket));
  helper.ssoLogout();
  config.setProxyCallbackUrlPrefix(proxyCallbackUrlPrefix.toString());
  getSecurityManager().saveFilter(config);
  username="castest";
  password=username;
  helper=new CasFormAuthenticationHelper(casServerURLPrefix,username,password);
  helper.ssoLogin();
  request=createRequest("/foo/bar");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  ticket=helper.getServiceTicket(new URL(request.getRequestURL().toString()));
  request.addParameter("ticket",ticket);
  request.setQueryString("ticket=" + ticket);
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getStatus());
  ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNotNull(ctx);
  PreAuthenticatedAuthenticationToken casAuth=(PreAuthenticatedAuthenticationToken)ctx.getAuthentication();
  assertNotNull(casAuth);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  checkForAuthenticatedRole(casAuth);
  assertEquals(username,casAuth.getPrincipal());
  assertTrue(casAuth.getAuthorities().contains(new GeoServerRole(rootRole)));
  assertTrue(casAuth.getAuthorities().contains(new GeoServerRole(derivedRole)));
  Assertion ass=(Assertion)request.getSession(true).getAttribute(GeoServerCasConstants.CAS_ASSERTION_KEY);
  assertNotNull(ass);
  String proxyTicket=ass.getPrincipal().getProxyTicketFor("http://localhost/blabla");
  assertNotNull(proxyTicket);
  assertNotNull(GeoServerCasAuthenticationFilter.getHandler().getSessionMappingStorage().removeSessionByMappingId(ticket));
  helper.ssoLogout();
}
