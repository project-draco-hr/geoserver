{
  pattern="/wms/**";
  String casProxyFilterName="testCasProxyFilter2";
  CasAuthenticationFilterConfig pconfig1=new CasAuthenticationFilterConfig();
  pconfig1.setClassName(GeoServerCasAuthenticationFilter.class.getName());
  pconfig1.setName(casProxyFilterName);
  pconfig1.setCasServerUrlPrefix(casServerURLPrefix.toString());
  pconfig1.setRoleSource(PreAuthenticatedUserNameRoleSource.UserGroupService);
  pconfig1.setUserGroupServiceName("ug1");
  getSecurityManager().saveFilter(pconfig1);
  prepareFilterChain(ServiceLoginFilterChain.class,pattern,casProxyFilterName);
  SecurityContextHolder.getContext().setAuthentication(null);
  MockHttpServletRequest request=createRequest("wms");
  MockHttpServletResponse response=new MockHttpServletResponse();
  MockFilterChain chain=new MockFilterChain();
  request.addParameter("ticket","ST-blabla");
  request.setQueryString("ticket=ST-blabla");
  request.addHeader(GeoServerCasAuthenticationEntryPoint.CAS_REDIRECT,"false");
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_UNAUTHORIZED,response.getStatus());
  request=createRequest("wms");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.addParameter("ticket","ST-blabla");
  request.addParameter(GeoServerCasAuthenticationEntryPoint.CAS_REDIRECT,"false");
  request.setQueryString("ticket=ST-blabla&" + GeoServerCasAuthenticationEntryPoint.CAS_REDIRECT + "=false");
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_UNAUTHORIZED,response.getStatus());
  getCache().removeAll();
  String username="castest";
  CasFormAuthenticationHelper helper=new CasFormAuthenticationHelper(casServerURLPrefix,username,username);
  Assertion ass=authenticateWithPGT(helper);
  String proxyTicket=null;
  for (int i=0; i < 2; i++) {
    request=createRequest("wms");
    request.setQueryString("request=getCapabilities");
    proxyTicket=ass.getPrincipal().getProxyTicketFor(request.getRequestURL().toString() + "?" + request.getQueryString());
    assertNotNull(proxyTicket);
    response=new MockHttpServletResponse();
    chain=new MockFilterChain();
    request.addParameter("ticket",proxyTicket);
    if (i == 0) {
      request.addParameter(GeoServerCasAuthenticationEntryPoint.CAS_REDIRECT,"false");
      request.setQueryString(request.getQueryString() + "&ticket=" + proxyTicket+ "&"+ GeoServerCasAuthenticationEntryPoint.CAS_REDIRECT+ "=false");
    }
 else {
      request.addHeader(GeoServerCasAuthenticationEntryPoint.CAS_REDIRECT,"false");
      request.setQueryString(request.getQueryString() + "&ticket=" + proxyTicket);
    }
    getProxy().doFilter(request,response,chain);
    assertEquals(HttpServletResponse.SC_OK,response.getStatus());
    TestingAuthenticationCache cache=getCache();
    Authentication casAuth=cache.get(casProxyFilterName,username);
    assertNotNull(casAuth);
    checkForAuthenticatedRole(casAuth);
    assertEquals(username,casAuth.getPrincipal());
    assertTrue(casAuth.getAuthorities().contains(new GeoServerRole(rootRole)));
    assertTrue(casAuth.getAuthorities().contains(new GeoServerRole(derivedRole)));
    assertNotNull(request.getAttribute(GeoServerCasConstants.CAS_ASSERTION_KEY));
    assertNull(request.getSession(false));
  }
  assertNull(GeoServerCasAuthenticationFilter.getHandler().getSessionMappingStorage().removeSessionByMappingId(proxyTicket));
  helper.ssoLogout();
  username="unknown";
  helper=new CasFormAuthenticationHelper(casServerURLPrefix,username,username);
  ass=authenticateWithPGT(helper);
  for (int i=0; i < 2; i++) {
    request=createRequest("wms");
    request.setQueryString("request=getCapabilities");
    proxyTicket=ass.getPrincipal().getProxyTicketFor(request.getRequestURL().toString() + "?" + request.getQueryString());
    assertNotNull(proxyTicket);
    response=new MockHttpServletResponse();
    chain=new MockFilterChain();
    request.addParameter("ticket",proxyTicket);
    if (i == 0) {
      request.addParameter(GeoServerCasAuthenticationEntryPoint.CAS_REDIRECT,"false");
      request.setQueryString(request.getQueryString() + "&ticket=" + proxyTicket+ "&"+ GeoServerCasAuthenticationEntryPoint.CAS_REDIRECT+ "=false");
    }
 else {
      request.addHeader(GeoServerCasAuthenticationEntryPoint.CAS_REDIRECT,"false");
      request.setQueryString(request.getQueryString() + "&ticket=" + proxyTicket);
    }
    getProxy().doFilter(request,response,chain);
    assertEquals(HttpServletResponse.SC_OK,response.getStatus());
    TestingAuthenticationCache cache=getCache();
    Authentication casAuth=cache.get(casProxyFilterName,username);
    assertNotNull(casAuth);
    checkForAuthenticatedRole(casAuth);
    assertEquals(username,casAuth.getPrincipal());
    assertEquals(1,casAuth.getAuthorities().size());
    assertNotNull(request.getAttribute(GeoServerCasConstants.CAS_ASSERTION_KEY));
    assertNull(request.getSession(false));
  }
  helper.ssoLogout();
  getCache().removeAll();
  updateUser("ug1","castest",false);
  username="castest";
  helper=new CasFormAuthenticationHelper(casServerURLPrefix,username,username);
  ass=authenticateWithPGT(helper);
  request=createRequest("wms");
  proxyTicket=ass.getPrincipal().getProxyTicketFor(request.getRequestURL().toString());
  assertNotNull(proxyTicket);
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.addParameter("ticket",proxyTicket);
  request.addParameter(GeoServerCasAuthenticationEntryPoint.CAS_REDIRECT,"false");
  request.setQueryString("ticket=" + proxyTicket + "&"+ GeoServerCasAuthenticationEntryPoint.CAS_REDIRECT+ "=false");
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_UNAUTHORIZED,response.getStatus());
  TestingAuthenticationCache cache=getCache();
  Authentication casAuth=cache.get(casProxyFilterName,proxyTicket);
  assertNull(casAuth);
  assertNull(request.getAttribute(GeoServerCasConstants.CAS_ASSERTION_KEY));
  assertNull(request.getSession(false));
  updateUser("ug1","castest",true);
  helper.ssoLogout();
  insertAnonymousFilter();
  request=createRequest("wms");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getStatus());
  removeAnonymousFilter();
  pconfig1.setProxyCallbackUrlPrefix(proxyCallbackUrlPrefix.toString());
  getSecurityManager().saveFilter(pconfig1);
  getCache().removeAll();
  username="castest";
  helper=new CasFormAuthenticationHelper(casServerURLPrefix,username,username);
  ass=authenticateWithPGT(helper);
  request=createRequest("wms");
  proxyTicket=ass.getPrincipal().getProxyTicketFor(request.getRequestURL().toString());
  assertNotNull(proxyTicket);
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.addParameter("ticket",proxyTicket);
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getStatus());
  cache=getCache();
  casAuth=cache.get(casProxyFilterName,username);
  assertNotNull(casAuth);
  checkForAuthenticatedRole(casAuth);
  assertEquals(username,casAuth.getPrincipal());
  assertTrue(casAuth.getAuthorities().contains(new GeoServerRole(rootRole)));
  assertTrue(casAuth.getAuthorities().contains(new GeoServerRole(derivedRole)));
  proxyTicket=((Assertion)request.getAttribute(GeoServerCasConstants.CAS_ASSERTION_KEY)).getPrincipal().getProxyTicketFor("http://localhost/blabla");
  assertNotNull(proxyTicket);
  helper.ssoLogout();
}
