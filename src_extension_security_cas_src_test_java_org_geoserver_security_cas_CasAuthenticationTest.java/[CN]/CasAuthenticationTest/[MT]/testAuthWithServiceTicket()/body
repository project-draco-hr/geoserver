{
  pattern="/wms/**";
  CasProxiedAuthenticationFilterConfig pconfig1=new CasProxiedAuthenticationFilterConfig();
  pconfig1.setClassName(GeoServerCasProxiedAuthenticationFilter.class.getName());
  pconfig1.setName(casProxyFilterName1);
  pconfig1.setCasServerUrlPrefix(casServerURLPrefix.toString());
  pconfig1.setRoleSource(RoleSource.UserGroupService);
  pconfig1.setUserGroupServiceName("ug1");
  pconfig1.setCreateHTTPSessionForValidTicket(true);
  getSecurityManager().saveFilter(pconfig1);
  prepareFilterChain(pattern,GeoServerSecurityFilterChain.SECURITY_CONTEXT_NO_ASC_FILTER,casProxyFilterName1,GeoServerSecurityFilterChain.DYNAMIC_EXCEPTION_TRANSLATION_FILTER,GeoServerSecurityFilterChain.FILTER_SECURITY_INTERCEPTOR);
  SecurityContextHolder.getContext().setAuthentication(null);
  MockHttpServletRequest request=createRequest("wms");
  MockHttpServletResponse response=new MockHttpServletResponse();
  MockFilterChain chain=new MockFilterChain();
  request.setupAddParameter("ticket","ST-blabla");
  request.setQueryString("ticket=ST-blabla");
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_UNAUTHORIZED,response.getErrorCode());
  getCache().removeAll();
  String username="castest";
  CasFormAuthenticationHelper helper=new CasFormAuthenticationHelper(casServerURLPrefix,username,username);
  helper.ssoLogin();
  request=createRequest("wms");
  request.setQueryString("request=getCapabilities");
  String ticket=helper.getServiceTicket(new URL(request.getRequestURL().toString() + "?" + request.getQueryString()));
  assertNotNull(ticket);
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.setupAddParameter("ticket",ticket);
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
  TestingAuthenticationCache cache=getCache();
  Authentication casAuth=cache.get(casProxyFilterName1,username);
  assertNull(casAuth);
  SecurityContext ctx=(SecurityContext)request.getSession(false).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNotNull(ctx);
  casAuth=ctx.getAuthentication();
  assertNotNull(casAuth);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  checkForAuthenticatedRole(casAuth);
  assertEquals(username,casAuth.getPrincipal());
  assertTrue(casAuth.getAuthorities().contains(new GeoServerRole(rootRole)));
  assertTrue(casAuth.getAuthorities().contains(new GeoServerRole(derivedRole)));
  assertNull(request.getAttribute(GeoServerCasConstants.CAS_ASSERTION_KEY));
  assertNotNull(request.getSession(false).getAttribute(GeoServerCasConstants.CAS_ASSERTION_KEY));
  assertNull(GeoServerCasAuthenticationFilter.getHandler().getSessionMappingStorage().removeSessionByMappingId(ticket));
  helper.ssoLogout();
  username="unknown";
  helper=new CasFormAuthenticationHelper(casServerURLPrefix,username,username);
  helper.ssoLogin();
  request=createRequest("wms");
  ticket=helper.getServiceTicket(new URL(request.getRequestURL().toString()));
  assertNotNull(ticket);
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.setupAddParameter("ticket",ticket);
  request.setQueryString("ticket=" + ticket);
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
  cache=getCache();
  casAuth=cache.get(casProxyFilterName1,username);
  assertNull(casAuth);
  ctx=(SecurityContext)request.getSession(false).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNotNull(ctx);
  casAuth=ctx.getAuthentication();
  assertNotNull(casAuth);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  checkForAuthenticatedRole(casAuth);
  assertEquals(username,casAuth.getPrincipal());
  assertEquals(1,casAuth.getAuthorities().size());
  assertNull(request.getAttribute(GeoServerCasConstants.CAS_ASSERTION_KEY));
  assertNotNull(request.getSession(false).getAttribute(GeoServerCasConstants.CAS_ASSERTION_KEY));
  getCache().removeAll();
  updateUser("ug1","castest",false);
  username="castest";
  helper=new CasFormAuthenticationHelper(casServerURLPrefix,username,username);
  helper.ssoLogin();
  request=createRequest("wms");
  ticket=helper.getServiceTicket(new URL(request.getRequestURL().toString()));
  assertNotNull(ticket);
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.setupAddParameter("ticket",ticket);
  request.setQueryString("ticket=" + ticket);
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_UNAUTHORIZED,response.getErrorCode());
  cache=getCache();
  casAuth=cache.get(casProxyFilterName1,ticket);
  assertNull(casAuth);
  assertNull(request.getAttribute(GeoServerCasConstants.CAS_ASSERTION_KEY));
  assertNull(request.getSession(false));
  updateUser("ug1","castest",true);
  helper.ssoLogout();
  insertAnonymousFilter(GeoServerSecurityFilterChain.DYNAMIC_EXCEPTION_TRANSLATION_FILTER);
  request=createRequest("wms");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
  removeAnonymousFilter();
  pconfig1.setProxyCallbackUrlPrefix(proxyCallbackUrlPrefix.toString());
  getSecurityManager().saveFilter(pconfig1);
  getCache().removeAll();
  username="castest";
  helper=new CasFormAuthenticationHelper(casServerURLPrefix,username,username);
  Assertion ass=authenticateWithPGT(helper);
  request=createRequest("wms");
  ticket=helper.getServiceTicket(new URL(request.getRequestURL().toString()));
  assertNotNull(ticket);
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.setupAddParameter("ticket",ticket);
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
  cache=getCache();
  casAuth=cache.get(casProxyFilterName1,username);
  assertNull(casAuth);
  ctx=(SecurityContext)request.getSession(false).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNotNull(ctx);
  casAuth=ctx.getAuthentication();
  assertNotNull(casAuth);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  checkForAuthenticatedRole(casAuth);
  assertEquals(username,casAuth.getPrincipal());
  assertTrue(casAuth.getAuthorities().contains(new GeoServerRole(rootRole)));
  assertTrue(casAuth.getAuthorities().contains(new GeoServerRole(derivedRole)));
  String proxyTicket=((Assertion)request.getSession(false).getAttribute(GeoServerCasConstants.CAS_ASSERTION_KEY)).getPrincipal().getProxyTicketFor("http://localhost/blabla");
  assertNotNull(proxyTicket);
  helper.ssoLogout();
}
