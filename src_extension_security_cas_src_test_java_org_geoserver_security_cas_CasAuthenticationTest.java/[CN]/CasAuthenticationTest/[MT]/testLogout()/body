{
  LogoutFilterChain logoutchain=(LogoutFilterChain)getSecurityManager().getSecurityConfig().getFilterChain().getRequestChainByName("webLogout");
  String casFilterName="testCasFilter2";
  CasAuthenticationFilterConfig config=new CasAuthenticationFilterConfig();
  config.setClassName(GeoServerCasAuthenticationFilter.class.getName());
  config.setCasServerUrlPrefix(casServerURLPrefix.toString());
  config.setName(casFilterName);
  config.setRoleSource(RoleSource.UserGroupService);
  config.setUserGroupServiceName("ug1");
  config.setSingleSignOut(true);
  getSecurityManager().saveFilter(config);
  prepareFilterChain(pattern,casFilterName);
  modifyChain(pattern,false,true,null);
  SecurityContextHolder.getContext().setAuthentication(null);
  getCache().removeAll();
  String username="castest";
  String password=username;
  CasFormAuthenticationHelper helper=new CasFormAuthenticationHelper(casServerURLPrefix,username,password);
  helper.ssoLogin();
  MockHttpServletRequest request=createRequest(pattern);
  MockHttpServletResponse response=new MockHttpServletResponse();
  MockFilterChain chain=new MockFilterChain();
  loginUsingTicket(helper,request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
  assertFalse(response.wasRedirectSent());
  SecurityContext ctx=(SecurityContext)request.getSession(false).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNotNull(ctx);
  Authentication auth=ctx.getAuthentication();
  assertNotNull(auth);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  MockHttpSession session=(MockHttpSession)request.getSession(false);
  assertNotNull(session);
  assertTrue(session.isValid());
  request=createRequest(logoutchain.getPatterns().get(0));
  SecurityContextHolder.setContext(ctx);
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  GeoServerLogoutFilter logoutFilter=(GeoServerLogoutFilter)getSecurityManager().loadFilter(GeoServerSecurityFilterChain.FORM_LOGOUT_FILTER);
  logoutFilter.doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
  assertTrue(response.wasRedirectSent());
  String redirectUrl=response.getHeader("Location");
  assertNotNull(redirectUrl);
  assertTrue(redirectUrl.contains(GeoServerCasConstants.LOGOUT_URI));
  session=(MockHttpSession)request.getSession(false);
  helper=new CasFormAuthenticationHelper(casServerURLPrefix,username,password);
  helper.ssoLogin();
  request=createRequest(pattern);
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  String ticket=loginUsingTicket(helper,request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
  assertFalse(response.wasRedirectSent());
  ctx=(SecurityContext)request.getSession(false).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNotNull(ctx);
  auth=ctx.getAuthentication();
  assertNotNull(auth);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  session=(MockHttpSession)request.getSession(false);
  assertNotNull(session);
  assertTrue(session.isValid());
  request=createRequest(pattern);
  SecurityContextHolder.setContext(ctx);
  request.setMethod("POST");
  request.setSession(session);
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.setupAddParameter("logoutRequest",getBodyForLogoutRequest(ticket));
  GeoServerCasAuthenticationFilter casFilter=(GeoServerCasAuthenticationFilter)getSecurityManager().loadFilter(casFilterName);
  casFilter.doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
  assertTrue(response.wasRedirectSent());
  redirectUrl=response.getHeader("Location");
  assertNotNull(redirectUrl);
  assertFalse(redirectUrl.contains(GeoServerCasConstants.LOGOUT_URI));
}
