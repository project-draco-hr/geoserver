{
  String casFilterName="testCasFilter2";
  CasAuthenticationFilterConfig config=new CasAuthenticationFilterConfig();
  config.setClassName(GeoServerCasAuthenticationFilter.class.getName());
  config.setService(serviceUrl.toString());
  config.setCasServerUrlPrefix(casServerURLPrefix.toString());
  config.setName(casFilterName);
  config.setUserGroupServiceName("ug1");
  config.setUrlInCasLogoutPage("http://localhost/afterlogout");
  getSecurityManager().saveFilter(config);
  prepareFilterChain("/j_spring_cas_security_check",GeoServerSecurityFilterChain.SECURITY_CONTEXT_ASC_FILTER,casFilterName);
  SecurityContextHolder.getContext().setAuthentication(null);
  MockHttpServletRequest request=createRequest("/j_spring_cas_security_check");
  request.setQueryString(GeoServerCasAuthenticationFilter.LOGOUT_PARAM + "=true");
  MockHttpServletResponse response=new MockHttpServletResponse();
  MockFilterChain chain=new MockFilterChain();
  request.setupAddParameter(GeoServerCasAuthenticationFilter.LOGOUT_PARAM,"true");
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
  assertTrue(response.wasRedirectSent());
  String redirectUrl=response.getHeader("Location");
  assertNotNull(redirectUrl);
  assertTrue(redirectUrl.contains("logout"));
  assertTrue(redirectUrl.contains("afterlogout"));
  String username="castest";
  String password=username;
  CasFormAuthenticationHelper helper=new CasFormAuthenticationHelper(casServerURLPrefix,username,password);
  helper.ssoLogin();
  request=createRequest("/j_spring_cas_security_check");
  String ticket=helper.getServiceTicket(new URL(request.getRequestURL().toString()));
  request.setQueryString("ticket=" + ticket);
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.setupAddParameter("ticket",ticket);
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
  assertTrue(response.wasRedirectSent());
  redirectUrl=response.getHeader("Location");
  assertNotNull(redirectUrl);
  SecurityContext ctx=(SecurityContext)request.getSession(false).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNotNull(ctx);
  Authentication auth=ctx.getAuthentication();
  assertNotNull(auth);
  assertNull(SecurityContextHolder.getContext().getAuthentication());
  MockHttpSession session=(MockHttpSession)request.getSession(false);
  assertNotNull(session);
  assertTrue(session.isValid());
  request=createRequest("/j_spring_cas_security_check");
  request.setMethod("POST");
  request.setSession(session);
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  request.setupAddParameter("logoutRequest",getBodyForLogoutRequest(ticket));
  getProxy().doFilter(request,response,chain);
  assertNull(GeoServerCasAuthenticationFilter.getHandler().getSessionMappingStorage().removeSessionByMappingId(ticket));
  assertFalse(session.isValid());
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
}
