{
  final TileLayer layer=tileLayerModel.getObject();
  if (!layer.isEnabled()) {
    return new Label(id,new ResourceModel("previewDisabled"));
  }
  final Set<String> gridSubsets=new TreeSet<String>(layer.getGridSubsets());
  final List<MimeType> mimeTypes=new ArrayList<MimeType>(layer.getMimeTypes());
  Collections.sort(mimeTypes,new Comparator<MimeType>(){
    @Override public int compare(    MimeType o1,    MimeType o2){
      return o1.getFormat().compareTo(o2.getFormat());
    }
  }
);
  Fragment f=new Fragment(id,"menuFragment",CachedLayersPage.this);
  WebMarkupContainer menu=new WebMarkupContainer("menu");
  RepeatingView previewLinks=new RepeatingView("previewLink");
  int i=0;
  for (  String gridSetId : gridSubsets) {
    for (    MimeType mimeType : mimeTypes) {
      String label=gridSetId + " / " + mimeType.getFileExtension();
      Label format=new Label(String.valueOf(i++),label);
      String value="gridSet=" + gridSetId + "&format="+ mimeType.getFormat();
      format.add(new AttributeModifier("value",true,new Model<String>(value)));
      previewLinks.add(format);
    }
  }
  menu.add(previewLinks);
  String demoUrl="'../gwc/demo/" + layer.getName() + "?' + this.options[this.selectedIndex].value";
  menu.add(new AttributeAppender("onchange",new Model<String>("window.open(" + demoUrl + ");this.selectedIndex=0"),";"));
  f.add(menu);
  return f;
}
