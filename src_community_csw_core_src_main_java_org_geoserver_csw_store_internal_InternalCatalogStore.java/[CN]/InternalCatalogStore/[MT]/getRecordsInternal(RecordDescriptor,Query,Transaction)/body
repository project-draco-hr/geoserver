{
  CatalogStoreMapping mapping=mappings.get(q.getTypeName());
  int startIndex=0;
  if (q.getStartIndex() != null) {
    startIndex=q.getStartIndex();
  }
  Filter unmapped=Filter.INCLUDE;
  if (q.getFilter() != null && q.getFilter() != Filter.INCLUDE) {
    Filter filter=q.getFilter();
    CSWUnmappingFilterVisitor unmapper=new CSWUnmappingFilterVisitor(mapping,rd);
    unmapped=(Filter)filter.accept(unmapper,null);
  }
  if (q.getProperties() != null && q.getProperties().size() > 0) {
    mapping=mapping.subMapping(q.getProperties(),rd);
  }
  FeatureCollection records;
  if (q.getSortBy() != null && q.getSortBy().length > 0) {
    records=new CatalogStoreFeatureCollection(startIndex,Integer.MAX_VALUE,null,unmapped,catalog,mapping,rd);
    Feature[] features=(Feature[])records.toArray(new Feature[records.size()]);
    Comparator<Feature> comparator=ComplexComparatorFactory.buildComparator(q.getSortBy());
    Arrays.sort(features,comparator);
    records=new MemoryFeatureCollection(records.getSchema(),Arrays.asList(features));
    if (q.getMaxFeatures() < Query.DEFAULT_MAX) {
      records=new MaxFeaturesFeatureCollection<FeatureType,Feature>(records,q.getMaxFeatures());
    }
  }
 else {
    records=new CatalogStoreFeatureCollection(startIndex,q.getMaxFeatures(),null,unmapped,catalog,mapping,rd);
  }
  return records;
}
