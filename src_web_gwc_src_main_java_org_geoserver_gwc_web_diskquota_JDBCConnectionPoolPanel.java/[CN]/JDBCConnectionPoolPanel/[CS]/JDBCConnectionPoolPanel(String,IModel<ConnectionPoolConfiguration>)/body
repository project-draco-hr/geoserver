{
  super(id,model);
  TextField<String> driver=new TextField<String>("jdbcDriver",new PropertyModel<String>(model,"driver"));
  driver.setRequired(true);
  AutoCompleteSettings as=new AutoCompleteSettings();
  as.setPreselect(true).setShowListOnEmptyInput(true).setShowCompleteListOnFocusGain(true);
  driver.add(new ContainsAutoCompleteBehavior("org.postgresql.Driver","oracle.jdbc.driver.OracleDriver","org.h2.Driver"));
  add(driver);
  TextField<String> url=new TextField<String>("jdbcUrl",new PropertyModel<String>(model,"url"));
  url.setRequired(true);
  url.add(new ContainsAutoCompleteBehavior("jdbc:h2://{server}:{9092}/{db-name}","jdbc:postgresql:[{//host}[:{5432}/]]{database}","jdbc:oracle:thin:@{server}[:{1521}]:{database_name}"));
  add(url);
  TextField<String> user=new TextField<String>("jdbcUser",new PropertyModel<String>(model,"username"));
  add(user);
  PasswordTextField password=new PasswordTextField("jdbcPassword",new PropertyModel<String>(model,"password"));
  add(password);
  TextField<Integer> minConnections=new TextField<Integer>("jdbcMinConnections",new PropertyModel<Integer>(model,"minConnections"));
  minConnections.setRequired(true);
  minConnections.add(new MinimumValidator<Integer>(0));
  add(minConnections);
  TextField<Integer> maxConnections=new TextField<Integer>("jdbcMaxConnections",new PropertyModel<Integer>(model,"maxConnections"));
  maxConnections.setRequired(true);
  maxConnections.add(new MinimumValidator<Integer>(1));
  add(maxConnections);
  TextField<Integer> connectionTimeout=new TextField<Integer>("jdbcConnectionTimeout",new PropertyModel<Integer>(model,"connectionTimeout"));
  connectionTimeout.setRequired(true);
  connectionTimeout.add(new MinimumValidator<Integer>(1));
  add(connectionTimeout);
  TextField<String> validationQuery=new TextField<String>("jdbcValidationQuery",new PropertyModel<String>(model,"validationQuery"));
  add(validationQuery);
  TextField<Integer> maxOpenPreparedStatements=new TextField<Integer>("jdbcMaxOpenPreparedStatements",new PropertyModel<Integer>(model,"maxOpenPreparedStatements"));
  maxOpenPreparedStatements.setRequired(true);
  maxOpenPreparedStatements.add(new MinimumValidator<Integer>(0));
  add(maxOpenPreparedStatements);
}
