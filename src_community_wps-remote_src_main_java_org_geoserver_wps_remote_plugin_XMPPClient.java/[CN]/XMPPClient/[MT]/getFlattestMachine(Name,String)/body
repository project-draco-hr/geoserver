{
  final String serviceName=name.getLocalPart();
  LOGGER.info("XMPPClient::getFlattestMachine - scanning the connected remote services...");
  Map<String,List<String>> availableServices=new HashMap<String,List<String>>();
  Map<String,List<String>> availableServiceJIDs=new HashMap<String,List<String>>();
  for (  MultiUserChat muc : this.mucServiceChannels) {
    for (    String occupant : muc.getOccupants()) {
      LOGGER.info("XMPPClient::getFlattestMachine - looking for service [" + serviceName + "] @occupant ["+ occupant+ "]");
      if (occupant.toLowerCase().contains(serviceName.toLowerCase())) {
        String[] serviceJIDParts=occupant.split("/");
        if (serviceJIDParts.length > 1) {
          String[] localizedServiceJID=serviceJIDParts[1].split("@");
          LOGGER.info("XMPPClient::getFlattestMachine - [localizedServiceJID.length] -> " + localizedServiceJID.length);
          LOGGER.info("XMPPClient::getFlattestMachine - [localizedServiceJID[0].contains(serviceName)] -> " + localizedServiceJID[0].contains(serviceName));
          LOGGER.info("XMPPClient::getFlattestMachine - [localizedServiceJID] -> " + localizedServiceJID[0] + " @ "+ localizedServiceJID[1]);
          if (localizedServiceJID.length == 2 && localizedServiceJID[0].toLowerCase().contains(serviceName.toLowerCase())) {
            final String machine=occupant.substring(occupant.lastIndexOf("@") + 1);
            if (availableServices.get(machine) == null) {
              availableServices.put(machine,new ArrayList<String>());
            }
            if (availableServiceJIDs.get(machine) == null) {
              availableServiceJIDs.put(machine,new ArrayList<String>());
            }
            availableServices.get(machine).add(occupant);
            if (serviceJIDParts.length == 3 && (serviceJIDParts[2].startsWith("master") || serviceJIDParts[2].indexOf("@") < 0)) {
              availableServiceJIDs.get(machine).add(occupant);
            }
          }
        }
      }
    }
  }
  if (availableServices == null || availableServices.isEmpty()) {
    LOGGER.info("XMPPClient::getFlattestMachine - no suitable target JID found, using the default candidate [" + candidateServiceJID + "]");
    return candidateServiceJID;
  }
  String targetMachine=null;
  String targetServiceJID=null;
  int targetMachineCounter=Integer.MAX_VALUE;
  for (  String machine : availableServices.keySet()) {
    if (targetMachine == null || targetMachineCounter > availableServices.get(machine).size()) {
      targetMachine=machine;
      targetServiceJID=availableServiceJIDs.get(machine).get(0);
      targetMachineCounter=availableServices.get(machine).size();
    }
  }
  LOGGER.info("XMPPClient::getFlattestMachine - target JID found, using the target [" + targetServiceJID + "]");
  return targetServiceJID;
}
