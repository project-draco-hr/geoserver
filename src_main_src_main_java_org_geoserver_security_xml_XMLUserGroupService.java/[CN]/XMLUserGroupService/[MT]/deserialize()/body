{
  try {
    Document doc=null;
    try (InputStream is=userResource.in()){
      doc=builder.parse(is);
    }
 catch (    SAXException e) {
      throw new IOException(e);
    }
    if (isValidatingXMLSchema()) {
      XMLValidator.Singleton.validateUserGroupRegistry(doc);
    }
    XPathExpression expr=XMLXpathFactory.Singleton.getVersionExpressionUR();
    String versionNummer=expr.evaluate(doc);
    UserGroupXMLXpath xmlXPath=XMLXpathFactory.Singleton.getUserGroupXMLXpath(versionNummer);
    clearMaps();
    NodeList userNodes=(NodeList)xmlXPath.getUserListExpression().evaluate(doc,XPathConstants.NODESET);
    for (int i=0; i < userNodes.getLength(); i++) {
      Node userNode=userNodes.item(i);
      boolean userEnabled=Util.convertToBoolean(xmlXPath.getUserEnabledExpression().evaluate(userNode),true);
      String userPassword=null;
      if (userNode.getAttributes().getNamedItem(XMLConstants.A_USER_PASSWORD_UR) != null) {
        userPassword=xmlXPath.getUserPasswordExpression().evaluate(userNode);
      }
      String userName=xmlXPath.getUserNameExpression().evaluate(userNode);
      NodeList propertyNodes=(NodeList)xmlXPath.getUserPropertiesExpression().evaluate(userNode,XPathConstants.NODESET);
      Properties userProps=new Properties();
      for (int j=0; j < propertyNodes.getLength(); j++) {
        Node propertyNode=propertyNodes.item(j);
        String propertyName=xmlXPath.getPropertyNameExpression().evaluate(propertyNode);
        String propertyValue=xmlXPath.getPropertyValueExpression().evaluate(propertyNode);
        userProps.put(propertyName,propertyValue);
      }
      GeoServerUser user=createUserObject(userName,userPassword,userEnabled);
      helper.userMap.put(user.getUsername(),user);
      user.getProperties().clear();
      for (      Object key : userProps.keySet()) {
        user.getProperties().put(key,userProps.get(key));
        SortedSet<GeoServerUser> propUsers=helper.propertyMap.get(key);
        if (propUsers == null) {
          propUsers=new TreeSet<GeoServerUser>();
          helper.propertyMap.put((String)key,propUsers);
        }
        propUsers.add(user);
      }
    }
    NodeList groupNodes=(NodeList)xmlXPath.getGroupListExpression().evaluate(doc,XPathConstants.NODESET);
    for (int i=0; i < groupNodes.getLength(); i++) {
      Node groupNode=groupNodes.item(i);
      String groupName=xmlXPath.getGroupNameExpression().evaluate(groupNode);
      boolean groupEnabled=Util.convertToBoolean(xmlXPath.getGroupEnabledExpression().evaluate(groupNode),true);
      GeoServerUserGroup group=createGroupObject(groupName,groupEnabled);
      helper.groupMap.put(groupName,group);
      NodeList memberNodes=(NodeList)xmlXPath.getGroupMemberListExpression().evaluate(groupNode,XPathConstants.NODESET);
      for (int j=0; j < memberNodes.getLength(); j++) {
        Node memberNode=memberNodes.item(j);
        String memberName=xmlXPath.getGroupMemberNameExpression().evaluate(memberNode);
        GeoServerUser member=helper.userMap.get(memberName);
        SortedSet<GeoServerUser> members=helper.group_userMap.get(group);
        if (members == null) {
          members=new TreeSet<GeoServerUser>();
          helper.group_userMap.put(group,members);
        }
        members.add(member);
        SortedSet<GeoServerUserGroup> userGroups=helper.user_groupMap.get(member);
        if (userGroups == null) {
          userGroups=new TreeSet<GeoServerUserGroup>();
          helper.user_groupMap.put(member,userGroups);
        }
        userGroups.add(group);
      }
    }
  }
 catch (  XPathExpressionException ex) {
    throw new IOException(ex);
  }
}
