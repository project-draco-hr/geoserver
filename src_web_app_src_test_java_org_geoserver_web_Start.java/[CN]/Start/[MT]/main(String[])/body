{
  final Server jettyServer=new Server();
  try {
    HttpConfiguration httpConfig=new HttpConfiguration();
    ServerConnector http=new ServerConnector(jettyServer,new HttpConnectionFactory(httpConfig));
    http.setPort(Integer.getInteger("jetty.port",8080));
    http.setAcceptQueueSize(100);
    http.setIdleTimeout(1000 * 60 * 60);
    http.setSoLingerTime(-1);
    String sslHost=System.getProperty("ssl.hostname");
    ServerConnector https=null;
    if (sslHost != null && sslHost.length() > 0) {
      Security.addProvider(new BouncyCastleProvider());
      SslContextFactory ssl=createSSLContextFactory(sslHost);
      HttpConfiguration httpsConfig=new HttpConfiguration(httpConfig);
      httpsConfig.addCustomizer(new SecureRequestCustomizer());
      https=new ServerConnector(jettyServer,new SslConnectionFactory(ssl,HttpVersion.HTTP_1_1.asString()),new HttpConnectionFactory(httpsConfig));
      https.setPort(8443);
    }
    jettyServer.setConnectors(https != null ? new Connector[]{http,https} : new Connector[]{http});
    WebAppContext wah=new WebAppContext();
    wah.setContextPath("/geoserver");
    wah.setWar("src/main/webapp");
    jettyServer.setHandler(wah);
    wah.setTempDirectory(new File("target/work"));
    wah.getServletContext().getContextHandler().setMaxFormContentSize(1024 * 1024 * 2);
    String jettyConfigFile=System.getProperty("jetty.config.file");
    if (jettyConfigFile != null) {
      log.info("Loading Jetty config from file: " + jettyConfigFile);
      (new XmlConfiguration(new FileInputStream(jettyConfigFile))).configure(jettyServer);
    }
    jettyServer.start();
    Thread stopThread=new Thread(){
      @Override public void run(){
        BufferedReader reader=new BufferedReader(new InputStreamReader(System.in));
        String line;
        try {
          while (true) {
            line=reader.readLine();
            if ("stop".equals(line)) {
              jettyServer.stop();
              System.exit(0);
            }
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          System.exit(1);
        }
      }
    }
;
    stopThread.setDaemon(true);
    stopThread.run();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,"Could not start the Jetty server: " + e.getMessage(),e);
    if (jettyServer != null) {
      try {
        jettyServer.stop();
      }
 catch (      Exception e1) {
        log.log(Level.SEVERE,"Unable to stop the " + "Jetty server:" + e1.getMessage(),e1);
      }
    }
  }
}
