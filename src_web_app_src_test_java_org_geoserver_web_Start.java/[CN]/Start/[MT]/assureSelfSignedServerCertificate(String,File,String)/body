{
  KeyStore privateKS=KeyStore.getInstance("JKS");
  if (keyStoreFile.exists()) {
    FileInputStream fis=new FileInputStream(keyStoreFile);
    privateKS.load(fis,password.toCharArray());
    if (keyStoreContainsCertificate(privateKS,hostname))     return;
  }
 else {
    privateKS.load(null);
  }
  KeyPairGenerator keyPairGenerator=KeyPairGenerator.getInstance("RSA");
  keyPairGenerator.initialize(1024);
  KeyPair KPair=keyPairGenerator.generateKeyPair();
  X509V3CertificateGenerator v3CertGen=new X509V3CertificateGenerator();
  int random=new SecureRandom().nextInt();
  if (random < 0)   random*=-1;
  v3CertGen.setSerialNumber(BigInteger.valueOf(random));
  v3CertGen.setIssuerDN(new X509Principal("CN=" + hostname + ", OU=None, O=None L=None, C=None"));
  v3CertGen.setNotBefore(new Date(System.currentTimeMillis() - 1000L * 60 * 60* 24* 30));
  v3CertGen.setNotAfter(new Date(System.currentTimeMillis() + (1000L * 60 * 60* 24* 365* 10)));
  v3CertGen.setSubjectDN(new X509Principal("CN=" + hostname + ", OU=None, O=None L=None, C=None"));
  v3CertGen.setPublicKey(KPair.getPublic());
  v3CertGen.setSignatureAlgorithm("MD5WithRSAEncryption");
  X509Certificate PKCertificate=v3CertGen.generateX509Certificate(KPair.getPrivate());
  File certFile=new File(keyStoreFile.getParentFile(),hostname + ".cert");
  FileOutputStream fos=new FileOutputStream(certFile.getAbsoluteFile());
  fos.write(PKCertificate.getEncoded());
  fos.close();
  privateKS.setKeyEntry(hostname + ".key",KPair.getPrivate(),password.toCharArray(),new java.security.cert.Certificate[]{PKCertificate});
  privateKS.setCertificateEntry(hostname + ".cert",PKCertificate);
  privateKS.store(new FileOutputStream(keyStoreFile),password.toCharArray());
}
