{
  super(id);
  this.provider=fileProvider;
  final WebMarkupContainer table=new WebMarkupContainer("fileTable");
  table.setOutputMarkupId(true);
  add(table);
  DataView<File> fileTable=new DataView<File>("files",fileProvider){
    @Override protected void populateItem(    final Item<File> item){
      item.add(AttributeModifier.replace("class",item.getIndex() % 2 == 0 ? "even" : "odd"));
      AjaxFallbackLink<?> link=new IndicatingAjaxFallbackLink<Void>("nameLink"){
        @Override public void onClick(        AjaxRequestTarget target){
          linkNameClicked((File)item.getModelObject(),target);
        }
      }
;
      link.add(new Label("name",item.getModel()){
        @SuppressWarnings("unchecked") @Override public <C>IConverter<C> getConverter(        Class<C> type){
          return (IConverter<C>)FILE_NAME_CONVERTER;
        }
      }
);
      item.add(link);
      item.add(new Label("lastModified",item.getModel()){
        @SuppressWarnings("unchecked") @Override public <C>IConverter<C> getConverter(        Class<C> type){
          return (IConverter<C>)FILE_LASTMODIFIED_CONVERTER;
        }
      }
);
      item.add(new Label("size",item.getModel()){
        @SuppressWarnings("unchecked") @Override public <C>IConverter<C> getConverter(        Class<C> type){
          return (IConverter<C>)FILE_SIZE_CONVERTER;
        }
      }
);
    }
  }
;
  fileContent=new WebMarkupContainer("fileContent"){
    @Override protected void onComponentTag(    ComponentTag tag){
      if (tableHeight != null) {
        tag.getAttributes().put("style","overflow:auto; height:" + tableHeight);
      }
    }
  }
;
  fileContent.add(fileTable);
  table.add(fileContent);
  table.add(new OrderByBorder<String>("nameHeader",FileProvider.NAME,fileProvider));
  table.add(new OrderByBorder<String>("lastModifiedHeader",FileProvider.LAST_MODIFIED,fileProvider));
  table.add(new OrderByBorder<String>("sizeHeader",FileProvider.SIZE,fileProvider));
}
