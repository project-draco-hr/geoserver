{
  super(id,styleModel);
  final WebMarkupContainer container=new WebMarkupContainer("externalGraphicContainer");
  container.setOutputMarkupId(true);
  add(container);
  table=new WebMarkupContainer("list");
  table.setOutputMarkupId(true);
  IModel<String> bind=styleModel.bind("legend.onlineResource");
  onlineResource=new TextField<String>("onlineResource",bind);
  onlineResource.add(new IValidator<String>(){
    final List<String> EXTENSIONS=Arrays.asList(new String[]{"png","gif","jpeg","jpg"});
    @Override public void validate(    IValidatable<String> input){
      String value=input.getValue();
      int last=value == null ? -1 : value.lastIndexOf('.');
      if (last == -1 || !EXTENSIONS.contains(value.substring(last + 1).toLowerCase())) {
        ValidationError error=new ValidationError();
        error.setMessage("Not an image");
        error.addKey("nonImage");
        input.error(error);
        return;
      }
      URI uri=null;
      try {
        uri=new URI(value);
      }
 catch (      URISyntaxException e1) {
      }
      if (uri != null && uri.isAbsolute()) {
        try {
          String baseUrl=baseURL(onlineResource.getForm());
          if (!value.startsWith(baseUrl)) {
            onlineResource.warn("Recommend use of styles directory at " + baseUrl);
          }
          URL url=uri.toURL();
          URLConnection conn=url.openConnection();
          if ("text/html".equals(conn.getContentType())) {
            ValidationError error=new ValidationError();
            error.setMessage("Unable to access image");
            error.addKey("imageUnavailable");
            input.error(error);
            return;
          }
        }
 catch (        MalformedURLException e) {
          ValidationError error=new ValidationError();
          error.setMessage("Unable to access image");
          error.addKey("imageUnavailable");
          input.error(error);
        }
catch (        IOException e) {
          ValidationError error=new ValidationError();
          error.setMessage("Unable to access image");
          error.addKey("imageUnavailable");
          input.error(error);
        }
        return;
      }
 else {
        GeoServerResourceLoader resources=GeoServerApplication.get().getResourceLoader();
        try {
          File styles=resources.find("styles");
          String[] path=value.split(Pattern.quote(File.separator));
          WorkspaceInfo wsInfo=styleModel.getObject().getWorkspace();
          File test=null;
          if (wsInfo != null) {
            String wsName=wsInfo.getName();
            List<String> list=new ArrayList();
            list.addAll(Arrays.asList("workspaces",wsName,"styles"));
            list.addAll(Arrays.asList(path));
            test=resources.find(list.toArray(new String[list.size()]));
          }
          if (test == null) {
            test=resources.find(styles,path);
          }
          if (test == null) {
            ValidationError error=new ValidationError();
            error.setMessage("File not found in styles directory");
            error.addKey("imageNotFound");
            input.error(error);
          }
        }
 catch (        IOException e) {
          ValidationError error=new ValidationError();
          error.setMessage("File not found in styles directory");
          error.addKey("imageNotFound");
          input.error(error);
        }
      }
    }
  }
);
  onlineResource.setOutputMarkupId(true);
  table.add(onlineResource);
  autoFill=new GeoServerAjaxFormLink("autoFill",styleForm){
    @Override public void onClick(    AjaxRequestTarget target,    Form<?> form){
      URLConnection conn=getExternalGraphic(target,form);
      if (conn == null) {
        ValidationError error=new ValidationError();
        error.setMessage("Unable to access image");
        error.addKey("imageUnavailable");
        onlineResource.error(error);
      }
 else {
        format.setModelValue(new String[]{conn.getContentType()});
        BufferedImage image;
        try {
          image=ImageIO.read(conn.getInputStream());
          width.setModelValue(new String[]{"" + image.getWidth()});
          height.setModelValue(new String[]{"" + image.getHeight()});
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
        target.add(format);
        target.add(width);
        target.add(height);
      }
    }
  }
;
  table.add(autoFill);
  format=new TextField<String>("format",styleModel.bind("legend.format"));
  format.setOutputMarkupId(true);
  table.add(format);
  width=new TextField<Integer>("width",styleModel.bind("legend.width"),Integer.class);
  width.add(RangeValidator.minimum(0));
  width.setOutputMarkupId(true);
  table.add(width);
  height=new TextField<Integer>("height",styleModel.bind("legend.height"),Integer.class);
  height.add(RangeValidator.minimum(0));
  height.setOutputMarkupId(true);
  table.add(height);
  table.add(new AttributeModifier("style",showhideStyleModel));
  container.add(table);
  showhideForm=new Form<StyleInfo>("showhide"){
    @Override protected void onSubmit(){
      super.onSubmit();
    }
  }
;
  showhideForm.setMarkupId("showhideForm");
  container.add(showhideForm);
  showhideForm.setMultiPart(true);
  show=new AjaxButton("show"){
    private static final long serialVersionUID=1L;
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      updateVisibility(true);
      target.add(ExternalGraphicPanel.this);
    }
  }
;
  container.add(show);
  showhideForm.add(show);
  hide=new AjaxButton("hide"){
    private static final long serialVersionUID=1L;
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      onlineResource.setModelObject("");
      format.setModelObject("");
      width.setModelObject(0);
      height.setModelObject(0);
      updateVisibility(false);
      target.add(ExternalGraphicPanel.this);
    }
  }
;
  container.add(hide);
  showhideForm.add(hide);
  LegendInfo legend=styleModel.getObject().getLegend();
  boolean visible=legend != null && legend.getOnlineResource() != null && !legend.getOnlineResource().isEmpty();
  updateVisibility(visible);
}
