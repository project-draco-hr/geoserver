{
  final IModel geoServerModel=getGeoServerModel();
  final IModel coverageModel=getCoverageAccessModel();
  Form form=new Form("form",new CompoundPropertyModel(coverageModel));
  add(form);
  form.add(new PoolSizeValidator());
  TextField corePoolSize=new TextField("corePoolSize");
  corePoolSize.add(RangeValidator.minimum(1));
  form.add(corePoolSize);
  TextField maxPoolSize=new TextField("maxPoolSize");
  maxPoolSize.add(RangeValidator.minimum(1));
  form.add(maxPoolSize);
  TextField keepAliveTime=new TextField("keepAliveTime");
  keepAliveTime.add(RangeValidator.minimum(1));
  form.add(keepAliveTime);
  final DropDownChoice queueType=new DropDownChoice("queueType",Arrays.asList(CoverageAccessInfo.QueueType.values()),new QueueTypeRenderer());
  form.add(queueType);
  TextField imageIOCacheThreshold=new TextField("imageIOCacheThreshold");
  imageIOCacheThreshold.add(RangeValidator.minimum(0l));
  form.add(imageIOCacheThreshold);
  Button submit=new Button("submit",new StringResourceModel("submit",this,null)){
    @Override public void onSubmit(){
      GeoServer gs=(GeoServer)geoServerModel.getObject();
      GeoServerInfo global=gs.getGlobal();
      global.setCoverageAccess((CoverageAccessInfo)coverageModel.getObject());
      gs.save(global);
      doReturn();
    }
  }
;
  form.add(submit);
  Button cancel=new Button("cancel"){
    @Override public void onSubmit(){
      doReturn();
    }
  }
;
  form.add(cancel);
}
