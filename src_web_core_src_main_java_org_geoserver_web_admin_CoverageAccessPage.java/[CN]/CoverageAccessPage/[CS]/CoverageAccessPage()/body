{
  final IModel<?> geoServerModel=getGeoServerModel();
  final IModel<CoverageAccessInfo> coverageModel=getCoverageAccessModel();
  Form<CoverageAccessInfo> form=new Form<CoverageAccessInfo>("form",new CompoundPropertyModel<CoverageAccessInfo>(coverageModel));
  add(form);
  form.add(new PoolSizeValidator());
  NumberTextField<Integer> corePoolSize=new NumberTextField<Integer>("corePoolSize",Integer.class);
  corePoolSize.setMinimum(1);
  form.add(corePoolSize);
  NumberTextField<Integer> maxPoolSize=new NumberTextField<Integer>("maxPoolSize",Integer.class);
  maxPoolSize.add(RangeValidator.minimum(1));
  form.add(maxPoolSize);
  NumberTextField<Integer> keepAliveTime=new NumberTextField<Integer>("keepAliveTime",Integer.class);
  keepAliveTime.add(RangeValidator.minimum(1));
  form.add(keepAliveTime);
  final DropDownChoice<QueueType> queueType=new DropDownChoice<QueueType>("queueType",Arrays.asList(CoverageAccessInfo.QueueType.values()),new QueueTypeRenderer());
  form.add(queueType);
  TextField<String> imageIOCacheThreshold=new TextField<String>("imageIOCacheThreshold");
  imageIOCacheThreshold.add(RangeValidator.minimum(0l));
  form.add(imageIOCacheThreshold);
  Button submit=new Button("submit",new StringResourceModel("submit",this,null)){
    private static final long serialVersionUID=4149741045073254811L;
    @Override public void onSubmit(){
      GeoServer gs=(GeoServer)geoServerModel.getObject();
      GeoServerInfo global=gs.getGlobal();
      global.setCoverageAccess((CoverageAccessInfo)coverageModel.getObject());
      gs.save(global);
      doReturn();
    }
  }
;
  form.add(submit);
  Button cancel=new Button("cancel"){
    private static final long serialVersionUID=-57093747603810865L;
    @Override public void onSubmit(){
      doReturn();
    }
  }
;
  form.add(cancel);
}
