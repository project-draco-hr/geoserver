{
  xStream.alias("backup",BackupExecutionAdapter.class);
  xStream.alias("restore",RestoreExecutionAdapter.class);
  xStream.allowTypes(new String[]{"org.geoserver.platform.resource.Files$ResourceAdaptor"});
  xStream.allowTypesByWildcard(new String[]{"org.geoserver.backuprestore.**"});
  xStream.omitField(RestoreExecutionAdapter.class,"restoreCatalog");
  Class synchronizedListType=Collections.synchronizedList(Collections.EMPTY_LIST).getClass();
  xStream.alias("synchList",synchronizedListType);
  ClassAliasingMapper optionsMapper=new ClassAliasingMapper(xStream.getMapper());
  optionsMapper.addClassAlias("option",String.class);
  xStream.registerLocalConverter(AbstractExecutionAdapter.class,"options",new CollectionConverter(optionsMapper){
    @Override public boolean canConvert(    Class type){
      return Collection.class.isAssignableFrom(type);
    }
  }
);
  ClassAliasingMapper warningsMapper=new ClassAliasingMapper(xStream.getMapper());
  warningsMapper.addClassAlias(Level.WARNING.getName(),RuntimeException.class);
  warningsMapper.addClassAlias(Level.WARNING.getName(),CatalogException.class);
  xStream.registerLocalConverter(AbstractExecutionAdapter.class,"warningsList",new CollectionConverter(warningsMapper){
    @Override public boolean canConvert(    Class type){
      return Collection.class.isAssignableFrom(type);
    }
  }
);
  Class resourceAdaptorType=Files.asResource(new File("/")).getClass();
  xStream.alias("resource",resourceAdaptorType);
  xStream.registerLocalConverter(AbstractExecutionAdapter.class,"archiveFile",new ArchiveFileResourceConverter());
  xStream.aliasAttribute(AbstractExecutionAdapter.class,"delegate","execution");
  xStream.omitField(JobExecution.class,"version");
  xStream.omitField(JobExecution.class,"jobInstance");
  xStream.omitField(JobExecution.class,"jobId");
  xStream.omitField(JobExecution.class,"jobParameters");
  xStream.omitField(JobExecution.class,"executionContext");
  xStream.registerLocalConverter(AbstractExecutionAdapter.class,"delegate",new JobExecutionConverter(xStream.getMapper(),xStream.getReflectionProvider(),this.backupFacade));
  xStream.registerLocalConverter(AbstractExecutionAdapter.class,"filter",new FilterConverter(xStream.getMapper(),xStream.getReflectionProvider()));
  ClassAliasingMapper stepExecutionsMapper=new ClassAliasingMapper(xStream.getMapper());
  stepExecutionsMapper.addClassAlias("step",StepExecution.class);
  xStream.registerLocalConverter(JobExecution.class,"stepExecutions",new CollectionConverter(stepExecutionsMapper){
    @Override public boolean canConvert(    Class type){
      return CopyOnWriteArraySet.class.isAssignableFrom(type);
    }
    @Override public void marshal(    Object obj,    HierarchicalStreamWriter writer,    MarshallingContext ctx){
      CopyOnWriteArraySet execs=(CopyOnWriteArraySet)obj;
      Iterator iterator=execs.iterator();
      while (iterator.hasNext()) {
        StepExecution exec=(StepExecution)iterator.next();
        writer.startNode("step");
        writer.startNode("name");
        writer.setValue(exec.getStepName());
        writer.endNode();
        writer.startNode("status");
        writer.setValue(exec.getStatus().name());
        writer.endNode();
        writer.startNode("exitStatus");
        writer.startNode("exitCode");
        writer.setValue(exec.getExitStatus().getExitCode());
        writer.endNode();
        writer.startNode("exitDescription");
        writer.setValue(exec.getExitStatus().getExitDescription());
        writer.endNode();
        writer.endNode();
        if (exec.getStartTime() != null) {
          writer.startNode("startTime");
          writer.setValue(DateFormat.getInstance().format(exec.getStartTime()));
          writer.endNode();
        }
        if (exec.getEndTime() != null) {
          writer.startNode("endTime");
          writer.setValue(DateFormat.getInstance().format(exec.getEndTime()));
          writer.endNode();
        }
        if (exec.getLastUpdated() != null) {
          writer.startNode("lastUpdated");
          writer.setValue(DateFormat.getInstance().format(exec.getLastUpdated()));
          writer.endNode();
        }
        writer.startNode("parameters");
        for (        Entry param : exec.getJobParameters().getParameters().entrySet()) {
          writer.startNode((String)param.getKey());
          writer.setValue(((JobParameter)param.getValue()).getValue().toString());
          writer.endNode();
        }
        writer.endNode();
        writer.startNode("readCount");
        writer.setValue(String.valueOf(exec.getReadCount()));
        writer.endNode();
        writer.startNode("writeCount");
        writer.setValue(String.valueOf(exec.getWriteCount()));
        writer.endNode();
        writer.startNode("failureExceptions");
        for (        Throwable ex : exec.getFailureExceptions()) {
          writer.startNode(Level.SEVERE.getName());
          StringBuilder buf=new StringBuilder();
          while (ex != null) {
            if (buf.length() > 0) {
              buf.append('\n');
            }
            if (ex.getMessage() != null) {
              buf.append(ex.getMessage());
              StringWriter errors=new StringWriter();
              ex.printStackTrace(new PrintWriter(errors));
              buf.append('\n').append(errors.toString());
            }
            ex=ex.getCause();
          }
          writer.setValue(buf.toString());
          writer.endNode();
        }
        writer.endNode();
        writer.endNode();
      }
    }
  }
);
}
