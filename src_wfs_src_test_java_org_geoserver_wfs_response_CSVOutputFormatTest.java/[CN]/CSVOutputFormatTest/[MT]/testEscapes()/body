{
  SimpleFeatureTypeBuilder builder=new SimpleFeatureTypeBuilder();
  builder.add("geom",Point.class);
  builder.add("label",String.class);
  builder.add("dtg",Date.class);
  builder.add("n",Integer.class);
  builder.add("d",Double.class);
  builder.setName("funnyLabels");
  SimpleFeatureType type=builder.buildFeatureType();
  Date d=(new SimpleDateFormat("yyyy-MM-dd")).parse("2016-01-01");
  GeometryFactory gf=new GeometryFactory();
  SimpleFeature f1=SimpleFeatureBuilder.build(type,new Object[]{gf.createPoint(new Coordinate(5,8)),"A label with \"quotes\"",d,10,100.0},null);
  SimpleFeature f2=SimpleFeatureBuilder.build(type,new Object[]{gf.createPoint(new Coordinate(5,4)),"A long label\nwith newlines",d,10,200.0},null);
  SimpleFeature f3=SimpleFeatureBuilder.build(type,new Object[]{gf.createPoint(new Coordinate(5,4)),"A long label\r\nwith windows\r\nnewlines",d,10,300.0},null);
  MemoryDataStore data=new MemoryDataStore();
  data.addFeature(f1);
  data.addFeature(f2);
  data.addFeature(f3);
  SimpleFeatureSource fs=data.getFeatureSource("funnyLabels");
  GetFeatureType gft=WfsFactory.eINSTANCE.createGetFeatureType();
  Operation op=new Operation("GetFeature",getServiceDescriptor10(),null,new Object[]{gft});
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  FeatureCollectionResponse fct=FeatureCollectionResponse.adapt(WfsFactory.eINSTANCE.createFeatureCollectionType());
  fct.getFeature().add(fs.getFeatures());
  CSVOutputFormat format=new CSVOutputFormat(getGeoServer());
  format.write(fct,bos,op);
  List<String[]> lines=readLines(bos.toString());
  assertEquals(fs.getCount(Query.ALL) + 1,lines.size());
  for (  String[] line : lines) {
    assertEquals(fs.getSchema().getAttributeCount() + 1,line.length);
  }
  assertEquals(f1.getAttribute("label"),lines.get(1)[2]);
  assertEquals(f2.getAttribute("label"),lines.get(2)[2]);
  assertEquals(((String)f3.getAttribute("label")).replace("\r\n","\n"),lines.get(3)[2]);
  assertEquals(DateUtil.serializeDateTime((Date)f1.getAttribute("dtg")),lines.get(1)[3]);
  assertEquals(f1.getAttribute("n"),Integer.parseInt(lines.get(1)[4]));
  assertEquals(f2.getAttribute("d"),Double.parseDouble(lines.get(2)[5]));
}
