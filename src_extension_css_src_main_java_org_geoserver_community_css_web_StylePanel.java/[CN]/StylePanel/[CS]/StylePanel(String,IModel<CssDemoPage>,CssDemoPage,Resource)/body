{
  super(id,model);
  resourcePath=new ResourcePathModel(cssFile);
  if (cssFile != null && Resources.exists(cssFile)) {
    try (InputStream is=cssFile.in()){
      setStyleBody(IOUtils.toString(is));
    }
 catch (    IOException ioe) {
      throw new WicketRuntimeException("Error loading CSS: ",ioe);
    }
  }
 else {
    setStyleBody("No CSS file was found for this style. Please make sure " + "this is the style you intended to edit, since saving " + "the CSS will destroy the existing SLD.");
  }
  Form<?> styleEditorForm=new Form<Object>("style-editor");
  final PropertyModel<String> styleBodyModel=new PropertyModel<String>(this,"styleBody");
  final CodeMirrorEditor editor=new CodeMirrorEditor("editor",styleBodyModel);
  editor.setMode("css");
  editor.setTextAreaMarkupId("editor");
  editor.setOutputMarkupId(true);
  editor.setRequired(true);
  editor.add(new CssValidator());
  styleEditorForm.add(editor);
  final FeedbackPanel feedback2=new FeedbackPanel("feedback-low");
  feedback2.setOutputMarkupId(true);
  styleEditorForm.add(feedback2);
  styleEditorForm.add(new AjaxSubmitLink("submit"){
    private static final long serialVersionUID=-584632920520391772L;
    @Override public void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      try {
        StyleInfo info=page.getStyleInfo();
        editor.processInput();
        String body=styleBodyModel.getObject();
        if (CssHandler.FORMAT.equals(info.getFormat())) {
          page.catalog().getResourcePool().writeStyle(info,new ByteArrayInputStream(body.getBytes()));
        }
 else {
          String sld=page.cssText2sldText(body,info);
          Writer writer=new OutputStreamWriter(resourcePath.getObject().out());
          writer.write(body);
          writer.close();
          page.catalog().getResourcePool().writeStyle(page.getStyleInfo(),new ByteArrayInputStream(sld.getBytes()));
        }
        page.catalog().save(info);
        target.add(feedback2);
        if (page.sldPreview != null)         target.add(page.sldPreview);
        if (page.map != null)         target.appendJavaScript(page.map.getUpdateCommand());
      }
 catch (      Exception e) {
        throw new WicketRuntimeException(e);
      }
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form<?> form){
      target.add(feedback2);
    }
    @Override protected void updateAjaxAttributes(    AjaxRequestAttributes attributes){
      attributes.getAjaxCallListeners().add(new AjaxCallListener(){
        private static final long serialVersionUID=-523975844113684799L;
        @Override public CharSequence getBeforeHandler(        Component component){
          return "if(event.view.document.gsEditors) { " + "event.view.document.gsEditors." + editor.getTextAreaMarkupId() + ".save(); } \n";
        }
      }
);
    }
  }
);
  add(styleEditorForm);
}
