{
  CasAuthenticationFilterConfig config=new CasAuthenticationFilterConfig();
  config.setClassName(GeoServerCasAuthenticationFilter.class.getName());
  config.setName("testCAS");
  config.setService(null);
  boolean failed=false;
  try {
    validator.validateFilterConfig(config);
  }
 catch (  CasFilterConfigException ex) {
    assertEquals(CasFilterConfigException.CAS_SERVICE_URL_REQUIRED,ex.getId());
    assertEquals(0,ex.getArgs().length);
    LOGGER.info(ex.getMessage());
    failed=true;
  }
  assertTrue(failed);
  config.setService("blabal");
  failed=false;
  try {
    validator.validateFilterConfig(config);
  }
 catch (  CasFilterConfigException ex) {
    assertEquals(CasFilterConfigException.CAS_SERVICE_URL_MALFORMED,ex.getId());
    assertEquals(0,ex.getArgs().length);
    LOGGER.info(ex.getMessage());
    failed=true;
  }
  assertTrue(failed);
  config.setService("http://localhost/service");
  config.setProxyCallbackUrlPrefix("https://myhost/callback");
  failed=false;
  try {
    validator.validateFilterConfig(config);
  }
 catch (  CasFilterConfigException ex) {
    assertEquals(CasFilterConfigException.CAS_PROXYCALLBACK_HOST_UNEQUAL_SERVICE_HOST,ex.getId());
    assertEquals(0,ex.getArgs().length);
    LOGGER.info(ex.getMessage());
    failed=true;
  }
  assertTrue(failed);
  config.setProxyCallbackUrlPrefix(null);
  config.setUrlInCasLogoutPage("blbalba");
  failed=false;
  try {
    validator.validateFilterConfig(config);
  }
 catch (  CasFilterConfigException ex) {
    assertEquals(CasFilterConfigException.CAS_URL_IN_LOGOUT_PAGE_MALFORMED,ex.getId());
    assertEquals(0,ex.getArgs().length);
    LOGGER.info(ex.getMessage());
    failed=true;
  }
  assertTrue(failed);
  config.setUrlInCasLogoutPage(null);
  config.setUserGroupServiceName("unkown");
  failed=false;
  try {
    validator.validateFilterConfig(config);
  }
 catch (  FilterConfigException ex) {
    assertEquals(FilterConfigException.UNKNOWN_USER_GROUP_SERVICE,ex.getId());
    assertEquals("unkown",ex.getArgs()[0]);
    LOGGER.info(ex.getMessage());
    failed=true;
  }
  assertTrue(failed);
  config.setUserGroupServiceName(XMLUserGroupService.DEFAULT_NAME);
  check((CasAuthenticationProperties)config);
}
