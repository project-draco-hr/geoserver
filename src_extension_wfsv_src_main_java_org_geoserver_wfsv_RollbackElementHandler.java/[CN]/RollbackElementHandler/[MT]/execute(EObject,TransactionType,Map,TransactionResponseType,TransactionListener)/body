{
  RollbackType rollback=(RollbackType)element;
  final QName layerName=rollback.getTypeName();
  VersioningFeatureStore vstore=(VersioningFeatureStore)featureStores.get(layerName);
  if (vstore == null)   throw new WFSTransactionException("Could not locate feature type " + layerName);
  long inserted=response.getTransactionSummary().getTotalInserted().longValue();
  long updated=response.getTransactionSummary().getTotalUpdated().longValue();
  long deleted=response.getTransactionSummary().getTotalDeleted().longValue();
  FeatureDiffReader reader=null;
  try {
    Filter filter=(rollback.getFilter() != null) ? (Filter)rollback.getFilter() : Filter.INCLUDE;
    String version=rollback.getToFeatureVersion();
    String user=rollback.getUser();
    String[] users=((user != null) && !user.trim().equals("")) ? new String[]{user} : null;
    reader=vstore.getDifferences("LAST",version,filter,users);
    Set insertedIds=new HashSet();
    Set updatedIds=new HashSet();
    Set deletedIds=new HashSet();
    while (reader.hasNext()) {
      FeatureDiff fd=reader.next();
      if (fd.getState() == FeatureDiff.INSERTED) {
        inserted++;
        InsertedFeatureType insertedFeature=WfsFactory.eINSTANCE.createInsertedFeatureType();
        insertedFeature.setHandle(rollback.getHandle());
        insertedFeature.getFeatureId().add(filterFactory.featureId(fd.getID()));
        response.getInsertResults().getFeature().add(insertedFeature);
        insertedIds.add(filterFactory.featureId(fd.getID()));
      }
 else       if (fd.getState() == FeatureDiff.UPDATED) {
        updated++;
        updatedIds.add(filterFactory.featureId(fd.getID()));
      }
 else       if (fd.getState() == FeatureDiff.DELETED) {
        deleted++;
        deletedIds.add(filterFactory.featureId(fd.getID()));
      }
    }
    Filter insertedFilter=filterFactory.id(insertedIds);
    Filter updatedFilter=filterFactory.id(updatedIds);
    Filter deletedFilter=filterFactory.id(deletedIds);
    listener.dataStoreChange(new TransactionEvent(TransactionEventType.PRE_UPDATE,layerName,vstore.getFeatures(updatedFilter),rollback));
    listener.dataStoreChange(new TransactionEvent(TransactionEventType.PRE_DELETE,layerName,vstore.getFeatures(deletedFilter),rollback));
    try {
      vstore.rollback(version,(Filter)rollback.getFilter(),users);
    }
 catch (    Exception e) {
      throw new WFSTransactionException("Could not perform the rollback",e,rollback.getHandle());
    }
    listener.dataStoreChange(new TransactionEvent(TransactionEventType.POST_INSERT,layerName,vstore.getFeatures(insertedFilter)));
    listener.dataStoreChange(new TransactionEvent(TransactionEventType.POST_UPDATE,layerName,vstore.getFeatures(updatedFilter)));
    response.getTransactionSummary().setTotalInserted(BigInteger.valueOf(inserted));
    response.getTransactionSummary().setTotalUpdated(BigInteger.valueOf(updated));
    response.getTransactionSummary().setTotalDeleted(BigInteger.valueOf(deleted));
  }
 catch (  IOException e) {
    throw new WFSTransactionException("Could not perform the rollback",e,rollback.getHandle());
  }
 finally {
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      IOException e) {
      }
    }
  }
}
