{
  if (layerName == null || layerName.length() <= 0) {
    throw new IllegalArgumentException("Empty or null layerName provided!");
  }
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.log(Level.FINE,"Estimator process called on resource: " + layerName);
  }
  if (clip == null) {
    clip=false;
    if (LOGGER.isLoggable(Level.FINE)) {
      LOGGER.log(Level.FINE,"Clipping disabled");
    }
  }
  if (roi != null) {
    if (LOGGER.isLoggable(Level.FINE)) {
      LOGGER.log(Level.FINE,"ROI present");
    }
    DownloadUtilities.checkPolygonROI(roi);
    if (roiCRS == null) {
      throw new IllegalArgumentException("ROI without a CRS is not usable!");
    }
    roi.setUserData(roiCRS);
  }
  LayerInfo layerInfo=catalog.getLayerByName(layerName);
  if (layerInfo == null) {
    throw new IllegalArgumentException("Unable to locate layer: " + layerName);
  }
  ResourceInfo resourceInfo=layerInfo.getResource();
  if (resourceInfo == null) {
    throw new IllegalArgumentException("Unable to locate ResourceInfo for layer:" + layerName);
  }
  DownloadServiceConfiguration limits=downloadServiceConfigurationGenerator.getConfiguration();
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.log(Level.FINE,"Getting configuration limits");
  }
  if (resourceInfo instanceof FeatureTypeInfo) {
    if (LOGGER.isLoggable(Level.FINE)) {
      LOGGER.log(Level.FINE,"Working with Vectorial dataset");
    }
    final FeatureTypeInfo featureTypeInfo=(FeatureTypeInfo)resourceInfo;
    return new VectorEstimator(limits).execute(featureTypeInfo,roi,clip,filter,targetCRS,progressListener);
  }
 else   if (resourceInfo instanceof CoverageInfo) {
    if (LOGGER.isLoggable(Level.FINE)) {
      LOGGER.log(Level.FINE,"Working with Raster dataset");
    }
    final CoverageInfo coverage=(CoverageInfo)resourceInfo;
    return new RasterEstimator(limits).execute(progressListener,coverage,roi,targetCRS,clip,filter,targetSizeX,targetSizeY);
  }
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.log(Level.FINE,"Working with a wrong Resource");
  }
  final ProcessException ex=new ProcessException("Could not complete the Download Process: target resource is of Illegal type --> " + resourceInfo != null ? resourceInfo.getClass().getCanonicalName() : "null");
  if (progressListener != null) {
    progressListener.exceptionOccurred(ex);
  }
  throw ex;
}
