{
  if (rawKvp.containsKey("startIndex")) {
    kvp.put("startIndex",new NumericKvpParser(null,BigInteger.class).parse((String)rawKvp.get("startIndex")));
  }
  request=super.read(request,kvp,rawKvp);
  EObject eObject=(EObject)request;
  ensureMutuallyExclusive(kvp,new String[]{"featureId","resourceId","filter","bbox","cql_filter"},eObject);
  if (!EMFUtils.isSet(eObject,"outputFormat")) {
    String version=(String)EMFUtils.get(eObject,"version");
switch (WFSInfo.Version.negotiate(version)) {
case V_10:
      EMFUtils.set(eObject,"outputFormat","GML2");
    break;
case V_11:
  EMFUtils.set(eObject,"outputFormat","text/xml; subtype=gml/3.1.1");
break;
case V_20:
default :
EMFUtils.set(eObject,"outputFormat","text/xml; subtype=gml/3.2");
}
;
}
NamespaceSupport namespaces=null;
if (kvp.containsKey("namespace")) {
if (kvp.get("namespace") instanceof NamespaceSupport) {
namespaces=(NamespaceSupport)kvp.get("namespace");
}
 else {
LOGGER.warning("There's a namespace parameter but it seems it wasn't parsed to a " + NamespaceSupport.class.getName() + ": "+ kvp.get("namespace"));
}
}
if (kvp.containsKey("typeName") || kvp.containsKey("typeNames")) {
List typeName=(List)kvp.get("typeName");
if (typeName == null) {
typeName=(List)kvp.get("typeNames");
}
List list=new ArrayList();
for (Iterator itr=typeName.iterator(); itr.hasNext(); ) {
Object obj=itr.next();
if (obj instanceof QName) {
QName qName=(QName)obj;
qName=checkTypeName(qName,namespaces,eObject);
List l=new ArrayList();
l.add(qName);
list.add(l);
}
 else {
List<QName> qNames=(List<QName>)obj;
for (int i=0; i < qNames.size(); i++) {
qNames.set(i,checkTypeName(qNames.get(i),namespaces,eObject));
}
list.add(qNames);
}
}
kvp.put("typeName",list);
querySet(eObject,"typeName",list);
}
 else {
if (kvp.containsKey("featureId") || kvp.containsKey("resourceId")) {
List featureId=(List)kvp.get("featureId");
featureId=featureId != null ? featureId : (List)kvp.get("resourceId");
QNameKvpParser parser=new QNameKvpParser("typeName",catalog);
Set<List> hTypeNames=new HashSet<>();
for (int i=0; i < featureId.size(); i++) {
String fid=(String)featureId.get(i);
int pos=fid.indexOf(".");
if (pos != -1) {
String typeName=fid.substring(0,fid.lastIndexOf("."));
List<QName> parsed=(List)parser.parse(typeName);
hTypeNames.add(parsed);
}
}
List typeNames=new ArrayList<>(hTypeNames);
querySet(eObject,"typeName",typeNames);
}
 else {
List<URI> storedQueryId=null;
if (kvp.containsKey("storedQuery_Id")) {
storedQueryId=(List<URI>)kvp.get("storedQuery_Id");
}
if (storedQueryId == null && kvp.containsKey("storedQueryId")) {
storedQueryId=(List<URI>)kvp.get("storedQueryId");
}
if (storedQueryId != null) {
buildStoredQueries(eObject,storedQueryId,kvp);
}
 else {
throw new WFSException(eObject,"The query should specify either typeName, featureId filter" + ", or a stored query id","MissingParameterValue");
}
}
}
if (kvp.containsKey("filter")) {
querySet(eObject,"filter",(List)kvp.get("filter"));
}
 else if (kvp.containsKey("cql_filter")) {
querySet(eObject,"filter",(List)kvp.get("cql_filter"));
}
 else if (kvp.containsKey("featureId") || kvp.containsKey("resourceId")) {
List featureIdList=(List)kvp.get("featureId");
featureIdList=featureIdList != null ? featureIdList : (List)kvp.get("resourceId");
Set ids=new HashSet();
for (Iterator i=featureIdList.iterator(); i.hasNext(); ) {
String fid=(String)i.next();
FeatureId featureId=filterFactory.featureId(fid);
ids.add(featureId);
}
List filters=Collections.singletonList(filterFactory.id(ids));
querySet(eObject,"filter",filters);
}
 else if (kvp.containsKey("bbox")) {
Envelope bbox=(Envelope)kvp.get("bbox");
List<Query> queries=GetFeatureRequest.adapt(eObject).getQueries();
List filters=new ArrayList();
for (Iterator<Query> it=queries.iterator(); it.hasNext(); ) {
Query q=it.next();
List typeName=q.getTypeNames();
Filter filter=null;
if (typeName.size() > 1) {
List and=new ArrayList(typeName.size());
for (Iterator t=typeName.iterator(); t.hasNext(); ) {
and.add(bboxFilter((QName)t.next(),bbox));
}
filter=filterFactory.and(and);
}
 else {
filter=bboxFilter((QName)typeName.get(0),bbox);
}
filters.add(filter);
}
querySet(eObject,"filter",filters);
}
if (kvp.containsKey("aliases")) {
querySet(eObject,"aliases",(List)kvp.get("aliases"));
}
if (kvp.containsKey("propertyName")) {
List<String> propertyNames=new ArrayList<String>();
if (kvp.get("propertyName") != null && kvp.get("propertyName") instanceof List) {
propertyNames=(List)kvp.get("propertyName");
}
 else if (kvp.get("propertyName") != null && kvp.get("propertyName") instanceof String) {
propertyNames.addAll(KvpUtils.readFlat((String)kvp.get("propertyName")));
}
querySet(eObject,"propertyName",propertyNames);
}
if (kvp.containsKey("sortBy")) {
querySet(eObject,"sortBy",(List)kvp.get("sortBy"));
}
if (kvp.containsKey("srsName")) {
querySet(eObject,"srsName",Collections.singletonList((URI)kvp.get("srsName")));
}
if (kvp.containsKey("featureVersion")) {
querySet(eObject,"featureVersion",Collections.singletonList((String)kvp.get("featureVersion")));
}
GetFeatureRequest req=GetFeatureRequest.adapt(request);
if (kvp.containsKey("format_options")) {
req.getFormatOptions().putAll((Map)kvp.get("format_options"));
}
if (kvp.containsKey("viewParams")) {
if (req.getViewParams() == null) {
req.setViewParams(new ArrayList<Map<String,String>>());
}
List<Map<String,String>> viewParams=(List<Map<String,String>>)kvp.get("viewParams");
if (viewParams.size() > 0) {
int layerCount=req.getQueries().size();
if (viewParams.size() == 1 && layerCount > 1) {
List<Map<String,String>> replacement=new ArrayList<Map<String,String>>();
for (int i=0; i < layerCount; i++) {
replacement.add(viewParams.get(0));
}
viewParams=replacement;
}
 else if (viewParams.size() != layerCount) {
String msg=layerCount + " feature types requested, but found " + viewParams.size()+ " view params specified. ";
throw new WFSException(eObject,msg,getClass().getName());
}
}
req.setViewParams(viewParams);
}
return request;
}
