{
  String workspace=getAttribute("workspace");
  String datastore=getAttribute("datastore");
  String featuretype=getAttribute("featuretype");
  boolean recurse=getQueryStringValue("recurse",Boolean.class,false);
  DataStoreInfo ds=catalog.getDataStoreByName(workspace,datastore);
  FeatureTypeInfo ft=catalog.getFeatureTypeByDataStore(ds,featuretype);
  List<LayerInfo> layers=catalog.getLayers(ft);
  if (recurse) {
    for (    LayerInfo l : layers) {
      catalog.remove(l);
      LOGGER.info("DELETE layer " + l.getName());
    }
  }
 else {
    if (!layers.isEmpty()) {
      throw new RestletException("feature type referenced by layer(s)",Status.CLIENT_ERROR_FORBIDDEN);
    }
  }
  catalog.remove(ft);
  catalog.getResourcePool().clear(ft);
  List<FeatureTypeInfo> siblings=catalog.getFeatureTypesByDataStore(ds);
  if (siblings.size() == 0) {
    catalog.getResourcePool().clear(ds);
  }
 else {
    boolean flush=false;
    try {
      DataAccess<?,?> dataStore=catalog.getResourcePool().getDataStore(ds);
      if (dataStore instanceof ContentDataStore) {
        Name name=ft.getQualifiedNativeName();
        ContentDataStore contentDataStore=(ContentDataStore)dataStore;
        ContentFeatureSource featureSource=contentDataStore.getFeatureSource(name,Transaction.AUTO_COMMIT);
        featureSource.getState().flush();
        flush=true;
      }
    }
 catch (    Exception e) {
      LOGGER.warning("Unable to flush '" + ft.getQualifiedNativeName());
      LOGGER.log(Level.FINE,"",e);
    }
    if (!flush) {
      catalog.getResourcePool().clear(ds);
    }
  }
  LOGGER.info("DELETE feature type" + datastore + ","+ featuretype);
}
