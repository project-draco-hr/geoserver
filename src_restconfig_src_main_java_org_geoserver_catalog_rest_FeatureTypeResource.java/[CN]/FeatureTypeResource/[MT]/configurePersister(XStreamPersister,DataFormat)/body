{
  if (getRequest().getMethod() == Method.GET) {
    persister.setHideFeatureTypeAttributes();
  }
  persister.setCallback(new XStreamPersister.Callback(){
    @Override protected Class<FeatureTypeInfo> getObjectClass(){
      return FeatureTypeInfo.class;
    }
    @Override protected CatalogInfo getCatalogObject(){
      String workspace=getAttribute("workspace");
      String datastore=getAttribute("datastore");
      String featuretype=getAttribute("featuretype");
      if (workspace == null || datastore == null || featuretype == null) {
        return null;
      }
      DataStoreInfo ds=catalog.getDataStoreByName(workspace,datastore);
      if (ds == null) {
        return null;
      }
      return catalog.getFeatureTypeByDataStore(ds,featuretype);
    }
    @Override protected void postEncodeReference(    Object obj,    String ref,    String prefix,    HierarchicalStreamWriter writer,    MarshallingContext context){
      if (obj instanceof NamespaceInfo) {
        NamespaceInfo ns=(NamespaceInfo)obj;
        encodeLink("/namespaces/" + encode(ns.getPrefix()),writer);
      }
      if (obj instanceof DataStoreInfo) {
        DataStoreInfo ds=(DataStoreInfo)obj;
        encodeLink("/workspaces/" + encode(ds.getWorkspace().getName()) + "/datastores/"+ encode(ds.getName()),writer);
      }
    }
    @Override protected void postEncodeFeatureType(    FeatureTypeInfo ft,    HierarchicalStreamWriter writer,    MarshallingContext context){
      try {
        writer.startNode("attributes");
        context.convertAnother(ft.attributes());
        writer.endNode();
      }
 catch (      IOException e) {
        throw new RuntimeException("Could not get native attributes",e);
      }
    }
  }
);
}
