{
  if (wms != null) {
    return wms;
  }
  Element servicesElement=ReaderUtils.getChildElement(serverConfiguration,"services",true);
  Element wmsElement=service(servicesElement,"WMS");
  wms=readService(wmsElement);
  text("globalWatermarking",wmsElement,wms,Boolean.class,false,Boolean.FALSE);
  text("globalWatermarkingURL",wmsElement,wms,String.class,false,null);
  text("globalWatermarkingTransparency",wmsElement,wms,Integer.class,false,0);
  text("globalWatermarkingPosition",wmsElement,wms,Integer.class,false,8);
  text("allowInterpolation",wmsElement,wms,String.class,false,"Nearest");
  text("svgRenderer",wmsElement,wms,String.class,false,"Batik");
  text("svgAntiAlias",wmsElement,wms,Boolean.class,false,Boolean.TRUE);
  text("maxBuffer",wmsElement,wms,Integer.class,false,25);
  text("maxRequestMemory",wmsElement,wms,Integer.class,false,0);
  text("maxRenderingTime",wmsElement,wms,Integer.class,false,0);
  text("maxRenderingErrors",wmsElement,wms,Integer.class,false,0);
  ArrayList<Map> baseMaps=new ArrayList<Map>();
  Element baseMapGroupsElement=ReaderUtils.getChildElement(wmsElement,"BaseMapGroups");
  if (baseMapGroupsElement != null) {
    Element[] baseMapGroupElements=ReaderUtils.getChildElements(baseMapGroupsElement,"BaseMapGroup");
    for (int i=0; i < baseMapGroupElements.length; i++) {
      Element baseMapGroupElement=baseMapGroupElements[i];
      HashMap<String,Object> baseMap=new HashMap<String,Object>();
      baseMap.put("baseMapTitle",ReaderUtils.getAttribute(baseMapGroupElement,"baseMapTitle",true));
      baseMap.put("baseMapLayers",Arrays.asList(ReaderUtils.getChildText(baseMapGroupElement,"baseMapLayers").split(",")));
      String baseMapStyles=ReaderUtils.getChildText(baseMapGroupElement,"baseMapStyles");
      if (baseMapStyles != null && !"".equals(baseMapStyles)) {
        baseMapStyles=baseMapStyles.trim();
        int j=-1, k=0;
        List styles=new ArrayList();
        while ((j=baseMapStyles.indexOf(',',k)) != -1) {
          styles.add(baseMapStyles.substring(k,j).trim());
          k=j + 1;
        }
        if (baseMapStyles.endsWith(",")) {
          styles.add("");
        }
 else         if (k < baseMapStyles.length() - 1) {
          styles.add(baseMapStyles.substring(k).trim());
        }
        baseMap.put("baseMapStyles",styles);
        baseMap.put("rawBaseMapStyles",baseMapStyles);
      }
 else {
        baseMap.put("baseMapStyles",Collections.EMPTY_LIST);
        baseMap.put("rawBaseMapStyles","");
      }
      Element baseMapEnvelopeElement=ReaderUtils.getChildElement(baseMapGroupElement,"baseMapEnvelope");
      if (baseMapEnvelopeElement != null) {
        Element[] posElements=ReaderUtils.getChildElements(baseMapEnvelopeElement,"pos");
        double x1=Double.parseDouble(posElements[0].getFirstChild().getNodeValue().split(" ")[0]);
        double y1=Double.parseDouble(posElements[0].getFirstChild().getNodeValue().split(" ")[1]);
        double x2=Double.parseDouble(posElements[1].getFirstChild().getNodeValue().split(" ")[0]);
        double y2=Double.parseDouble(posElements[1].getFirstChild().getNodeValue().split(" ")[1]);
        String srs=ReaderUtils.getAttribute(baseMapEnvelopeElement,"srsName",false);
        CoordinateReferenceSystem crs=srs != null ? CRS.decode(srs) : null;
        baseMap.put("baseMapEnvelope",new ReferencedEnvelope(x1,x2,y1,y2,crs));
      }
      baseMaps.add(baseMap);
    }
  }
  wms.put("BaseMapGroups",baseMaps);
  return wms;
}
