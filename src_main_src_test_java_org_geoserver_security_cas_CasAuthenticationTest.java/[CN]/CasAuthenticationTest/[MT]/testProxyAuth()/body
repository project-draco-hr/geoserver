{
  CasAuthenticationFilterConfig config=new CasAuthenticationFilterConfig();
  config.setClassName(GeoServerCasAuthenticationFilter.class.getName());
  config.setService(serviceUrl.toString());
  config.setCasServerUrlPrefix(casServerURLPrefix.toString());
  config.setTicketValidatorUrl(casServerURLPrefix.toString());
  config.setLoginUrl(loginUrl.toString());
  config.setName(casFilterName);
  config.setUserGroupServiceName("ug1");
  config.setProxyCallbackUrl(proxyCallbackUrl.toString());
  getSecurityManager().saveFilter(config);
  ExceptionTranslationFilterConfig exConfig=new ExceptionTranslationFilterConfig();
  exConfig.setClassName(GeoServerExceptionTranslationFilter.class.getName());
  exConfig.setName(CAS_EXCEPTION_TRANSLATION_FILTER);
  exConfig.setAccessDeniedErrorPage("/denied.jsp");
  exConfig.setAuthenticationFilterName(casFilterName);
  getSecurityManager().saveFilter(exConfig);
  prepareFilterChain(pattern,GeoServerSecurityFilterChain.SECURITY_CONTEXT_NO_ASC_FILTER,casFilterName,CAS_EXCEPTION_TRANSLATION_FILTER,GeoServerSecurityFilterChain.FILTER_SECURITY_INTERCEPTOR);
  prepareFilterChain(CasAuthenticationFilterConfig.CAS_PROXY_RECEPTOR_PATTERN,casFilterName);
  prepareFilterChain("/j_spring_cas_security_check",GeoServerSecurityFilterChain.SECURITY_CONTEXT_ASC_FILTER,casFilterName);
  SecurityContextHolder.getContext().setAuthentication(null);
  String username="castest";
  String password=username;
  String ticket=getCasTicket(username,password);
  MockHttpServletRequest request=createRequest("/j_spring_cas_security_check");
  MockHttpServletResponse response=new MockHttpServletResponse();
  MockFilterChain chain=new MockFilterChain();
  request.setupAddParameter("ticket",ticket);
  try {
    createSSLServer();
    httpsServer.start();
    checkSSLServer();
    getProxy().doFilter(request,response,chain);
  }
  finally {
    if (httpsServer != null)     httpsServer.stop(1);
  }
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
  assertTrue(response.wasRedirectSent());
  assertTrue(response.getHeader("Location").endsWith(GeoServerUserNamePasswordAuthenticationFilter.URL_LOGIN_SUCCCESS));
  SecurityContext ctx=(SecurityContext)request.getSession(true).getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);
  assertNotNull(ctx);
  Authentication auth=ctx.getAuthentication();
  assertNotNull(auth);
  assertTrue(auth instanceof CasAuthenticationToken);
  checkForAuthenticatedRole(auth);
  assertEquals(username,((UserDetails)auth.getPrincipal()).getUsername());
  assertTrue(auth.getAuthorities().contains(new GeoServerRole(rootRole)));
  assertTrue(auth.getAuthorities().contains(new GeoServerRole(derivedRole)));
  final String proxyTicket=((CasAuthenticationToken)auth).getAssertion().getPrincipal().getProxyTicketFor(config.getService());
  assertNotNull(proxyTicket);
  request=createRequest("/foo/bar");
  response=new MockHttpServletResponse();
  chain=new MockFilterChain();
  getProxy().doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_OK,response.getErrorCode());
}
