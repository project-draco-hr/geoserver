{
  InetSocketAddress address=new InetSocketAddress(proxyCallbackUrl.getPort());
  httpsServer=HttpsServer.create(address,0);
  SSLContext sslContext=SSLContext.getInstance("TLS");
  char[] password="cascas".toCharArray();
  KeyStore ks=KeyStore.getInstance("JKS");
  File base=new File(System.getProperty("user.home"),".geoserver");
  File keystore=new File(base,"cas.jks");
  FileInputStream fis=new FileInputStream(keystore);
  ks.load(fis,password);
  KeyManagerFactory kmf=KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
  kmf.init(ks,password);
  X509TrustManager trustManager=new X509TrustManager(){
    @Override public X509Certificate[] getAcceptedIssuers(){
      return new java.security.cert.X509Certificate[0];
    }
    @Override public void checkServerTrusted(    X509Certificate[] arg0,    String arg1) throws CertificateException {
    }
    @Override public void checkClientTrusted(    X509Certificate[] arg0,    String arg1) throws CertificateException {
    }
  }
;
  sslContext.init(kmf.getKeyManagers(),new TrustManager[]{trustManager},null);
  httpsServer.setHttpsConfigurator(new HttpsConfigurator(sslContext){
    public void configure(    HttpsParameters params){
      try {
        SSLContext c=SSLContext.getDefault();
        SSLEngine engine=c.createSSLEngine();
        params.setNeedClientAuth(false);
        params.setCipherSuites(engine.getEnabledCipherSuites());
        params.setProtocols(engine.getEnabledProtocols());
        SSLParameters defaultSSLParameters=c.getDefaultSSLParameters();
        params.setSSLParameters(defaultSSLParameters);
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
);
  httpsServer.createContext(proxyCallbackUrl.getPath(),new HttpsProxyCallBackHandler());
  httpsServer.createContext("/test",new HttpHandler(){
    @Override public void handle(    HttpExchange t) throws IOException {
      LOGGER.info("https server working");
      t.getRequestBody().close();
      t.sendResponseHeaders(200,0);
      t.getResponseBody().close();
    }
  }
);
  httpsServer.setExecutor(null);
}
