{
  MapLayerInfo mli=mockData.addFeatureTypeLayer("TestPoints",Point.class);
  FeatureTypeInfo typeInfo=mli.getFeature();
  SimpleFeatureType featureType=(SimpleFeatureType)typeInfo.getFeatureType();
  mockData.addFeature(featureType,new Object[]{"name1","POINT(1 1)"});
  mockData.addFeature(featureType,new Object[]{"name2","POINT(2 2)"});
  mockData.addFeature(featureType,new Object[]{"name3","POINT(3 3)"});
  mockData.addFeature(featureType,new Object[]{"name4","POINT(4 4)"});
  SimpleFeatureSource fs=(SimpleFeatureSource)typeInfo.getFeatureSource(null,null);
  SimpleFeatureCollection features=fs.getFeatures();
  Style style=mockData.getDefaultStyle().getStyle();
  Layer layer=new FeatureLayer(features,style);
  layer.setTitle("TestPointsTitle");
  GetMapRequest request=mockData.createRequest();
  request.setLayers(Collections.singletonList(mli));
  request.setMaxFeatures(2);
  request.setStartIndex(2);
  request.setFormatOptions(Collections.singletonMap("relLinks","true"));
  request.setBaseUrl("baseurl");
  WMSMapContext mapContext=new WMSMapContext();
  mapContext.setRequest(request);
  KMLVectorTransformer transformer=new KMLVectorTransformer(mockData.getWMS(),mapContext,layer);
  transformer.setStandAlone(false);
  transformer.setIndentation(2);
  Document dom=WMSTestSupport.transform(features,transformer);
  assertXpathExists("//Document/name",dom);
  assertXpathEvaluatesTo("TestPointsTitle","//Document/name",dom);
  assertXpathExists("//Document/atom:link",dom);
  assertXpathEvaluatesTo("prev","//Document/atom:link[1]/@rel",dom);
  assertXpathEvaluatesTo("next","//Document/atom:link[2]/@rel",dom);
  String expectedLink;
  expectedLink="baseurl/rest/geos/TestPoints.kml?startindex=0&maxfeatures=2";
  assertXpathEvaluatesTo(expectedLink,"//Document/atom:link[1]/@href",dom);
  expectedLink="baseurl/rest/geos/TestPoints.kml?startindex=4&maxfeatures=2";
  assertXpathEvaluatesTo(expectedLink,"//Document/atom:link[2]/@href",dom);
  assertXpathEvaluatesTo("prev","//Document/NetworkLink[1]/@id",dom);
  assertXpathEvaluatesTo("next","//Document/NetworkLink[2]/@id",dom);
  expectedLink="baseurl/rest/geos/TestPoints.kml?startindex=0&maxfeatures=2";
  assertXpathEvaluatesTo(expectedLink,"//Document/NetworkLink[1]/Link/href",dom);
  expectedLink="baseurl/rest/geos/TestPoints.kml?startindex=4&maxfeatures=2";
  assertXpathEvaluatesTo("next","//Document/NetworkLink[2]/@id",dom);
}
