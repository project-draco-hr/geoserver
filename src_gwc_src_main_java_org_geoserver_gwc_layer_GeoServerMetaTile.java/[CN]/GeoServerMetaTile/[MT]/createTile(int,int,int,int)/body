{
  final int type;
  if (metaTileImage instanceof PlanarImage) {
    type=1;
  }
 else   if (metaTileImage instanceof BufferedImage) {
    type=2;
  }
 else {
    type=0;
  }
  RenderedImage tile;
switch (type) {
case 0:
    ImageWorker w=new ImageWorker(metaTileImage);
  w.crop(Float.valueOf(x),Float.valueOf(y),Float.valueOf(tileWidth),Float.valueOf(tileHeight));
tile=w.getBufferedImage();
disposeLater(w.getRenderedImage());
break;
case 1:
final PlanarImage pImage=(PlanarImage)metaTileImage;
final WritableRaster wTile=WritableRaster.createWritableRaster(pImage.getSampleModel().createCompatibleSampleModel(tileWidth,tileHeight),new Point(x,y));
Rectangle sourceArea=new Rectangle(x,y,tileWidth,tileHeight);
sourceArea=sourceArea.intersection(pImage.getBounds());
pImage.copyData(wTile);
if (wTile.getMinX() != 0 || wTile.getMinY() != 0) {
tile=new BufferedImage(pImage.getColorModel(),(WritableRaster)wTile.createTranslatedChild(0,0),pImage.getColorModel().isAlphaPremultiplied(),null);
}
 else {
tile=new BufferedImage(pImage.getColorModel(),wTile,pImage.getColorModel().isAlphaPremultiplied(),null);
}
break;
case 2:
final BufferedImage image=(BufferedImage)metaTileImage;
tile=image.getSubimage(x,y,tileWidth,tileHeight);
break;
default :
throw new IllegalStateException(Errors.format(ErrorKeys.ILLEGAL_ARGUMENT_$2,"metaTile class",metaTileImage.getClass().toString()));
}
return tile;
}
