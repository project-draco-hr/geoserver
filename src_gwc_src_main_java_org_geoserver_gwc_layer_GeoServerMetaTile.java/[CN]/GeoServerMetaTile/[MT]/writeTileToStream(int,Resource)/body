{
  Assert.notNull(metaTileMap,"webMap is not set");
  if (!(metaTileMap instanceof RenderedImageMap)) {
    throw new IllegalArgumentException("Only RenderedImageMaps are supported so far: " + metaTileMap.getClass().getName());
  }
  final RenderedImageMapResponse mapEncoder;
{
    final Response responseEncoder=mediator.getResponseEncoder(responseFormat,metaTileMap);
    mapEncoder=(RenderedImageMapResponse)responseEncoder;
  }
  RenderedImage tile=metaTileMap.getImage();
  WMSMapContent tileContext=metaTileMap.getMapContext();
  if (this.tiles.length > 1) {
    final Rectangle tileDim=this.tiles[tileIdx];
    tile=createTile(tileDim.x,tileDim.y,tileDim.width,tileDim.height);
    disposeLater(tile);
{
      final WMSMapContent metaTileContext=metaTileMap.getMapContext();
      tileContext=new WMSMapContent();
      tileContext.setRequest(metaTileContext.getRequest());
      tileContext.setBgColor(metaTileContext.getBgColor());
      tileContext.setMapWidth(tileDim.width);
      tileContext.setMapHeight(tileDim.height);
      tileContext.setPaletteInverter(metaTileContext.getPaletteInverter());
      tileContext.setTransparent(tileContext.isTransparent());
      long[][] tileIndexes=getTilesGridPositions();
      BoundingBox tileBounds=gridSubset.boundsFromIndex(tileIndexes[tileIdx]);
      ReferencedEnvelope tilebbox=new ReferencedEnvelope(metaTileContext.getCoordinateReferenceSystem());
      tilebbox.init(tileBounds.getMinX(),tileBounds.getMaxX(),tileBounds.getMinY(),tileBounds.getMaxY());
      tileContext.getViewport().setBounds(tilebbox);
    }
  }
  OutputStream outStream=target.getOutputStream();
  try {
    mapEncoder.formatImageOutputStream(tile,outStream,tileContext);
    return true;
  }
  finally {
    outStream.close();
  }
}
