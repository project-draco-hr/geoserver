{
  if (!xpathVersion.equals(PolicyMetaData.XPATH_1_0_IDENTIFIER))   return new EvaluationResult(BagAttribute.createEmptyBag(type));
  Node root=context.getRequestRoot();
  Node nsNode=(namespaceNode != null) ? namespaceNode : root;
  String rootPath="";
  if (path.charAt(0) != '/') {
    String rootName=root.getLocalName();
    String namespace=root.getNamespaceURI();
    if (namespace == null) {
      rootPath="/" + rootName + "/";
    }
 else {
      NamedNodeMap nmap=namespaceNode.getAttributes();
      rootPath=null;
      for (int i=0; i < nmap.getLength(); i++) {
        Node n=nmap.item(i);
        if (n.getNodeValue().equals(namespace)) {
          String name=n.getNodeName();
          int pos=name.indexOf(':');
          if (pos == -1) {
            rootPath="/";
          }
 else {
            rootPath="/" + name.substring(pos + 1);
          }
          rootPath+=":" + rootName + "/";
          break;
        }
      }
      if (rootPath == null)       return createProcessingError("Failed to map a namespace" + " in an XPath expression");
    }
  }
  NodeList matches=null;
  try {
    matches=XPathAPI.selectNodeList(root,rootPath + path,nsNode);
  }
 catch (  Exception e) {
    return createProcessingError("error in XPath: " + e.getMessage());
  }
  if (matches.getLength() == 0) {
    return new EvaluationResult(BagAttribute.createEmptyBag(type));
  }
  try {
    ArrayList<AttributeValue> list=new ArrayList<AttributeValue>();
    AttributeFactory attrFactory=AttributeFactory.getInstance();
    for (int i=0; i < matches.getLength(); i++) {
      String text=null;
      Node node=matches.item(i);
      short nodeType=node.getNodeType();
      if ((nodeType == Node.CDATA_SECTION_NODE) || (nodeType == Node.COMMENT_NODE) || (nodeType == Node.TEXT_NODE)|| (nodeType == Node.ATTRIBUTE_NODE)) {
        text=node.getNodeValue();
      }
 else {
        text=node.getFirstChild().getNodeValue();
      }
      list.add(attrFactory.createValue(type,text));
    }
    return new EvaluationResult(new BagAttribute(type,list));
  }
 catch (  ParsingException pe) {
    return createProcessingError(pe.getMessage());
  }
catch (  UnknownIdentifierException uie) {
    return createProcessingError("unknown attribute type: " + type);
  }
}
