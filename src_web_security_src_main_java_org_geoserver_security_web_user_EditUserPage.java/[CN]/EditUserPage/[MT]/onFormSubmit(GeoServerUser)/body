{
  GeoServerUserGroupService ugService=getUserGroupService(ugServiceName);
  GeoServerUserGroupStore ugStore=null;
  try {
    if (ugService.canCreateStore()) {
      ugStore=new UserGroupStoreValidationWrapper(ugService.createStore());
      Set<GeoServerUserGroup> orig=ugStore.getGroupsForUser(user);
      Set<GeoServerUserGroup> add=new HashSet<GeoServerUserGroup>();
      Set<GeoServerUserGroup> remove=new HashSet<GeoServerUserGroup>();
      userGroupPalette.diff(orig,add,remove);
      ugStore.updateUser(user);
      for (      GeoServerUserGroup g : add)       ugStore.associateUserToGroup(user,g);
      for (      GeoServerUserGroup g : remove)       ugStore.disAssociateUserFromGroup(user,g);
      ugStore.store();
    }
  }
 catch (  IOException ex) {
    LOGGER.log(Level.WARNING,ex.getLocalizedMessage(),ex);
    try {
      ugStore.load();
    }
 catch (    IOException ex2) {
    }
    ;
    throw ex;
  }
catch (  PasswordPolicyException ex) {
    try {
      ugStore.load();
    }
 catch (    IOException ex2) {
    }
    ;
    throw ex;
  }
  GeoServerRoleStore roleStore=null;
  try {
    if (hasRoleStore(getSecurityManager().getActiveRoleService().getName())) {
      roleStore=getRoleStore(getSecurityManager().getActiveRoleService().getName());
      roleStore=new RoleStoreValidationWrapper(roleStore);
      Set<GeoServerRole> orig=roleStore.getRolesForUser(user.getUsername());
      Set<GeoServerRole> add=new HashSet<GeoServerRole>();
      Set<GeoServerRole> remove=new HashSet<GeoServerRole>();
      rolePalette.diff(orig,add,remove);
      for (      GeoServerRole role : add) {
        roleStore.associateRoleToUser(role,user.getUsername());
      }
      for (      GeoServerRole role : remove) {
        roleStore.disAssociateRoleFromUser(role,user.getUsername());
      }
      roleStore.store();
    }
  }
 catch (  IOException ex) {
    try {
      roleStore.load();
    }
 catch (    IOException ex2) {
    }
    ;
    throw ex;
  }
}
