{
  RequestResource.CSVFormat csv=new RequestResource.CSVFormat(new String[]{"id","path","startTime"},monitor);
  RequestResource.ZIPFormat zip=new RequestResource.ZIPFormat(Arrays.asList("id","path","startTime","Error","Body"),csv,monitor);
  Date startTime=new Date();
  Throwable throwable=new Throwable();
  RequestData data=new RequestData();
  data.setId(12345);
  data.setPath("/foo");
  data.setStartTime(startTime);
  data.setBody("<foo></foo>".getBytes());
  data.setError(throwable);
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  zip.toRepresentation(data).write(out);
  ZipInputStream zin=new ZipInputStream(new ByteArrayInputStream(out.toByteArray()));
  ZipEntry entry=null;
  boolean requests=false;
  boolean body=false;
  boolean error=false;
  while ((entry=zin.getNextEntry()) != null) {
    if ("requests.csv".equals(entry.getName())) {
      requests=true;
      String expected="id,path,startTime\n12345,/foo," + DateUtil.serializeDateTime(startTime);
      assertEquals(expected,readEntry(zin));
    }
 else     if ("body.txt".equals(entry.getName())) {
      body=true;
      assertEquals("<foo></foo>",readEntry(zin));
    }
 else     if ("error.txt".equals(entry.getName())) {
      error=true;
      ByteArrayOutputStream bout=new ByteArrayOutputStream();
      PrintStream stream=new PrintStream(bout);
      throwable.printStackTrace(stream);
      stream.flush();
      assertEquals(new String(bout.toByteArray()).trim(),readEntry(zin));
    }
  }
  assertTrue(requests);
  assertTrue(body);
  assertTrue(error);
}
