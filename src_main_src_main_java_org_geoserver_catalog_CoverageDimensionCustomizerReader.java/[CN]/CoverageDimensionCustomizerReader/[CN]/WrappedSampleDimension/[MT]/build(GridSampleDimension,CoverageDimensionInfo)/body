{
  String name=info.getName();
  final InternationalString sampleDimDescription=sampleDim.getDescription();
  InternationalString configuredDescription=(sampleDimDescription == null || !sampleDimDescription.toString().equalsIgnoreCase(name)) ? new SimpleInternationalString(name) : sampleDimDescription;
  final List<Category> categories=sampleDim.getCategories();
  NumberRange configuredRange=info.getRange();
  final String uom=info.getUnit();
  Unit defaultUnit=sampleDim.getUnits();
  Unit unit=defaultUnit;
  try {
    if (uom != null) {
      unit=Unit.valueOf(uom);
    }
  }
 catch (  IllegalArgumentException iae) {
    if (LOGGER.isLoggable(Level.WARNING) && defaultUnit != null) {
      LOGGER.warning("Unable to parse the specified unit (" + uom + "). Using the previous one: "+ defaultUnit.toString());
    }
  }
  Unit configuredUnit=unit;
  final List<Double> nullValues=info.getNullValues();
  double[] configuredNoDataValues;
  if (nullValues != null && nullValues.size() > 0) {
    final int size=nullValues.size();
    configuredNoDataValues=new double[size];
    for (int i=0; i < size; i++) {
      configuredNoDataValues[i]=nullValues.get(i);
    }
  }
 else {
    configuredNoDataValues=sampleDim.getNoDataValues();
  }
  boolean nodataConfigured=configuredNoDataValues != null && configuredNoDataValues.length > 0;
  int numCategories=0;
  List<Category> customCategories=new ArrayList<Category>(numCategories);
  if (categories != null && (numCategories=categories.size()) > 0) {
    Category wrapped=null;
    for (    Category category : categories) {
      wrapped=category;
      if (Category.NODATA.getName().equals(category.getName())) {
        if (category.isQuantitative()) {
          double minimum=nodataConfigured ? configuredNoDataValues[0] : category.getRange().getMinimum();
          double maximum=nodataConfigured ? configuredNoDataValues[0] : category.getRange().getMaximum();
          if (Double.isNaN(minimum) && Double.isNaN(maximum)) {
            wrapped=new Category(Category.NODATA.getName(),category.getColors()[0],minimum);
          }
 else {
            wrapped=new Category(Category.NODATA.getName(),category.getColors(),NumberRange.create(minimum,maximum));
          }
        }
      }
      customCategories.add(wrapped);
    }
  }
  if (configuredRange != null && !Double.isInfinite(configuredRange.getMinimum()) && !Double.isInfinite(configuredRange.getMaximum())) {
    Class targetType=categories != null && !categories.isEmpty() ? categories.get(0).getRange().getElementClass() : Double.class;
    final NumberRange<Double> dataRange=new NumberRange<>(targetType,configuredRange.getMinimum(),configuredRange.getMaximum());
    List<NumberRange<?>> dataRanges=new ArrayList<>();
    dataRanges.add(dataRange);
    for (    Category category : customCategories) {
      List<NumberRange<?>> newDataRanges=new ArrayList<>();
      for (      NumberRange<?> dr : dataRanges) {
        NumberRange<?>[] subtracted=dr.subtract(category.getRange());
        for (        NumberRange<?> range : subtracted) {
          if (!range.isEmpty()) {
            newDataRanges.add(range);
          }
        }
      }
      dataRanges=newDataRanges;
    }
    for (int i=0; i < dataRanges.size(); i++) {
      customCategories.add(new Category("data" + i,(Color)null,dataRanges.get(i)));
    }
  }
  return new WrappedSampleDimension(name,configuredDescription,configuredRange,configuredUnit,configuredNoDataValues,(Category[])customCategories.toArray(new Category[customCategories.size()]),sampleDim);
}
