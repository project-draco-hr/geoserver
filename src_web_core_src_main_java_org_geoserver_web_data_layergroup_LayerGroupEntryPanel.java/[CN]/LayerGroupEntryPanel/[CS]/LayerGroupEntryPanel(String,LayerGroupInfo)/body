{
  super(id);
  items=new ArrayList<LayerGroupEntry>();
  for (int i=0; i < layerGroup.getLayers().size(); i++) {
    PublishedInfo layer=layerGroup.getLayers().get(i);
    StyleInfo style=layerGroup.getStyles().get(i);
    items.add(new LayerGroupEntry(layer,style));
  }
  add(popupWindow=new ModalWindow("popup"));
  add(dialog=new GeoServerDialog("dialog"));
  add(new HelpLink("layersHelp").setDialog(dialog));
  entryProvider=new LayerGroupEntryProvider(items);
  add(layerTable=new GeoServerTablePanel<LayerGroupEntry>("layers",entryProvider){
    @Override protected Component getComponentForProperty(    String id,    IModel itemModel,    Property<LayerGroupEntry> property){
      if (property == LayerGroupEntryProvider.LAYER) {
        return layerLink(id,itemModel);
      }
      if (property == LayerGroupEntryProvider.DEFAULT_STYLE) {
        return defaultStyleCheckbox(id,itemModel);
      }
      if (property == LayerGroupEntryProvider.STYLE) {
        return styleLink(id,itemModel);
      }
      if (property == LayerGroupEntryProvider.REMOVE) {
        return removeLink(id,itemModel);
      }
      if (property == LayerGroupEntryProvider.POSITION) {
        return positionPanel(id,itemModel);
      }
      if (property == LayerGroupEntryProvider.RENDERING_ORDER) {
        return new Label(id,new Model());
      }
      return null;
    }
    protected void onPopulateItem(    GeoServerDataProvider.Property<LayerGroupEntry> property,    org.apache.wicket.markup.html.list.ListItem item){
      if (property == LayerGroupEntryProvider.RENDERING_ORDER) {
        Label label=(Label)item.get(0);
        OddEvenItem rowContainer=(OddEvenItem)item.getParent().getParent();
        label.setDefaultModel(new Model(rowContainer.getIndex() + 1));
        item.add(new AbstractBehavior(){
          public void onComponentTag(          Component component,          ComponentTag tag){
            tag.put("style","width:1%");
          }
        }
);
      }
    }
  }
.setFilterable(false));
  layerTable.setItemReuseStrategy(new DefaultItemReuseStrategy());
  layerTable.setOutputMarkupId(true);
  add(new AjaxLink("addLayer"){
    @Override public void onClick(    AjaxRequestTarget target){
      popupWindow.setInitialHeight(375);
      popupWindow.setInitialWidth(525);
      popupWindow.setTitle(new ParamResourceModel("chooseLayer",this));
      popupWindow.setContent(new LayerListPanel(popupWindow.getContentId()){
        @Override protected void handleLayer(        LayerInfo layer,        AjaxRequestTarget target){
          popupWindow.close(target);
          entryProvider.getItems().add(new LayerGroupEntry(layer,layer.getDefaultStyle()));
          target.addComponent(layerTable);
        }
      }
);
      popupWindow.show(target);
    }
  }
);
  add(new AjaxLink("addLayerGroup"){
    @Override public void onClick(    AjaxRequestTarget target){
      popupWindow.setInitialHeight(375);
      popupWindow.setInitialWidth(525);
      popupWindow.setTitle(new ParamResourceModel("chooseLayerGroup",this));
      popupWindow.setContent(new LayerGroupListPanel(popupWindow.getContentId()){
        @Override protected void handleLayerGroup(        LayerGroupInfo layerGroup,        AjaxRequestTarget target){
          popupWindow.close(target);
          entryProvider.getItems().add(new LayerGroupEntry(layerGroup,null));
          target.addComponent(layerTable);
        }
      }
);
      popupWindow.show(target);
    }
  }
);
}
