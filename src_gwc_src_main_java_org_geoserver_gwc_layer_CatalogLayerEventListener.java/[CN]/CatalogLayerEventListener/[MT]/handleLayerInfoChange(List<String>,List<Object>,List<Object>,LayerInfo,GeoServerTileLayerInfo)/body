{
  checkNotNull(tileLayerInfo);
  final String layerName=tileLayerName(li);
  boolean save=false;
  boolean defaultStyleChanged=false;
  final String defaultStyle;
  if (changedProperties.contains("defaultStyle")) {
    final int propIndex=changedProperties.indexOf("defaultStyle");
    final StyleInfo oldStyle=(StyleInfo)oldValues.get(propIndex);
    final StyleInfo newStyle=(StyleInfo)newValues.get(propIndex);
    final String oldStyleName=oldStyle.prefixedName();
    defaultStyle=newStyle.prefixedName();
    if (!Objects.equal(oldStyleName,defaultStyle)) {
      save=true;
      defaultStyleChanged=true;
      log.info("Truncating default style for layer " + layerName + ", as it changed from "+ oldStyleName+ " to "+ defaultStyle);
      mediator.truncateByLayerAndStyle(layerName,oldStyleName);
    }
  }
 else {
    StyleInfo styleInfo=li.getDefaultStyle();
    defaultStyle=styleInfo == null ? null : styleInfo.prefixedName();
  }
  if (tileLayerInfo.isAutoCacheStyles()) {
    Set<String> styles=new HashSet<String>();
    for (    StyleInfo s : li.getStyles()) {
      styles.add(s.prefixedName());
    }
    ImmutableSet<String> cachedStyles=tileLayerInfo.cachedStyles();
    if (!styles.equals(cachedStyles)) {
      Set<String> notCachedAnyMore=Sets.difference(cachedStyles,styles);
      for (      String oldCachedStyle : notCachedAnyMore) {
        log.info("Truncating cached style " + oldCachedStyle + " of layer "+ layerName+ " as it's no longer one of the layer's styles");
        mediator.truncateByLayerAndStyle(layerName,oldCachedStyle);
      }
      final boolean createParamIfNotExists=true;
      TileLayerInfoUtil.updateStringParameterFilter(tileLayerInfo,"STYLES",createParamIfNotExists,defaultStyle,styles);
      save=true;
    }
  }
  boolean cachingInfoChanged=false;
  int metadataIdx=changedProperties.indexOf("metadata");
  if (metadataIdx >= 0) {
    MetadataMap oldMetadata=(MetadataMap)oldValues.get(metadataIdx);
    MetadataMap newMetadata=(MetadataMap)newValues.get(metadataIdx);
    boolean cachingEnabledChanged=LangUtils.equals(oldMetadata.get(ResourceInfo.CACHING_ENABLED,Boolean.class),newMetadata.get(ResourceInfo.CACHING_ENABLED,Boolean.class));
    boolean cachingMaxAgeChanged=LangUtils.equals(oldMetadata.get(ResourceInfo.CACHE_AGE_MAX,Boolean.class),newMetadata.get(ResourceInfo.CACHE_AGE_MAX,Boolean.class));
    if (cachingEnabledChanged || cachingMaxAgeChanged) {
      cachingInfoChanged=true;
      save=true;
    }
  }
  if (save) {
    GridSetBroker gridSetBroker=mediator.getGridSetBroker();
    GeoServerTileLayer tileLayer=new GeoServerTileLayer(li,gridSetBroker,tileLayerInfo);
    mediator.save(tileLayer);
  }
  if (cachingInfoChanged || defaultStyleChanged) {
    List<LayerGroupInfo> groups=catalog.getLayerGroups();
    for (    LayerGroupInfo lg : groups) {
      GeoServerTileLayer tileLayer=mediator.getTileLayer(lg);
      if (tileLayer != null) {
        LayerGroupHelper helper=new LayerGroupHelper(lg);
        int idx=helper.allLayers().indexOf(li);
        if (idx >= 0) {
          GridSetBroker gridSetBroker=mediator.getGridSetBroker();
          GeoServerTileLayerInfo groupTileLayerInfo=tileLayer.getInfo();
          GeoServerTileLayer newTileLayer=new GeoServerTileLayer(lg,gridSetBroker,groupTileLayerInfo);
          mediator.save(newTileLayer);
          if (defaultStyleChanged && lg.getStyles().get(idx) == null) {
            mediator.truncate(groupTileLayerInfo.getName());
          }
        }
      }
    }
  }
}
