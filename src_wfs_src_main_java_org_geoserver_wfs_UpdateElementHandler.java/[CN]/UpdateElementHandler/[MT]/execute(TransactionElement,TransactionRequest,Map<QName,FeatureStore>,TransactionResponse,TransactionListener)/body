{
  Update update=(Update)element;
  final QName elementName=update.getTypeName();
  String handle=update.getHandle();
  long updated=response.getTotalUpdated().longValue();
  SimpleFeatureStore store=DataUtilities.simple((FeatureStore)featureStores.get(elementName));
  if (store == null) {
    throw new WFSException(request,"Could not locate FeatureStore for '" + elementName + "'");
  }
  LOGGER.finer("Transaction Update:" + update);
  try {
    Filter filter=update.getFilter();
    CoordinateReferenceSystem declaredCRS=WFSReprojectionUtil.getDeclaredCrs(store.getSchema(),request.getVersion());
    if (filter != null) {
      filter=WFSReprojectionUtil.normalizeFilterCRS(filter,store.getSchema(),declaredCRS);
    }
 else {
      filter=Filter.INCLUDE;
    }
    List<Property> properties=update.getUpdateProperties();
    AttributeDescriptor[] types=new AttributeDescriptor[properties.size()];
    String[] names=new String[properties.size()];
    Object[] values=new Object[properties.size()];
    for (int j=0; j < properties.size(); j++) {
      Property property=properties.get(j);
      QName propertyName=property.getName();
      types[j]=store.getSchema().getDescriptor(propertyName.getLocalPart());
      names[j]=propertyName.getLocalPart();
      values[j]=property.getValue();
      if (values[j] instanceof Geometry) {
        Geometry geometry=(Geometry)values[j];
        CoordinateReferenceSystem source=null;
        if (geometry.getUserData() instanceof CoordinateReferenceSystem) {
          source=(CoordinateReferenceSystem)geometry.getUserData();
        }
 else {
          geometry.setUserData(declaredCRS);
          source=declaredCRS;
        }
        CoordinateReferenceSystem target=null;
        if (types[j] instanceof GeometryDescriptor) {
          target=((GeometryDescriptor)types[j]).getCoordinateReferenceSystem();
        }
        if (getInfo().isCiteCompliant())         JTS.checkCoordinatesRange(geometry,source != null ? source : target);
        if (source != null && target != null && !CRS.equalsIgnoreMetadata(source,target)) {
          try {
            MathTransform tx=CRS.findMathTransform(source,target,true);
            GeometryCoordinateSequenceTransformer gtx=new GeometryCoordinateSequenceTransformer();
            gtx.setMathTransform(tx);
            values[j]=gtx.transform(geometry);
          }
 catch (          Exception e) {
            String msg="Failed to reproject geometry:" + e.getLocalizedMessage();
            throw new WFSTransactionException(msg,e);
          }
        }
      }
    }
    Set fids=new HashSet();
    LOGGER.finer("Preprocess to remember modification as a set of fids");
    SimpleFeatureCollection features=store.getFeatures(filter);
    TransactionEvent event=new TransactionEvent(TransactionEventType.PRE_UPDATE,request,elementName,features);
    event.setSource(update);
    listener.dataStoreChange(event);
    Iterator preprocess=features.iterator();
    try {
      while (preprocess.hasNext()) {
        SimpleFeature feature=(SimpleFeature)preprocess.next();
        fids.add(feature.getID());
      }
    }
 catch (    NoSuchElementException e) {
      throw new WFSException(request,"Could not aquire FeatureIDs",e);
    }
 finally {
      features.close(preprocess);
    }
    try {
      store.modifyFeatures(names,values,filter);
    }
 catch (    Exception e) {
      throw new WFSTransactionException("Update error: " + e.getMessage(),e,"InvalidParameterValue");
    }
 finally {
      if ((request.getLockId() != null) && store instanceof FeatureLocking && (request.isReleaseActionSome())) {
        SimpleFeatureLocking locking;
        locking=(SimpleFeatureLocking)store;
        locking.unLockFeatures(filter);
      }
    }
    if (!fids.isEmpty()) {
      LOGGER.finer("Post process update for boundary update and featureValidation");
      Set featureIds=new HashSet();
      FilterFactory2 ff=CommonFactoryFinder.getFilterFactory2(GeoTools.getDefaultHints());
      for (Iterator f=fids.iterator(); f.hasNext(); ) {
        featureIds.add(ff.featureId((String)f.next()));
      }
      Id modified=ff.id(featureIds);
      response.addUpdatedFeatures(handle,featureIds);
      SimpleFeatureCollection changed=store.getFeatures(modified);
      listener.dataStoreChange(new TransactionEvent(TransactionEventType.POST_UPDATE,request,elementName,changed,update));
    }
    updated+=fids.size();
  }
 catch (  IOException ioException) {
    throw new WFSTransactionException(ioException,null,handle);
  }
catch (  PointOutsideEnvelopeException poe) {
    throw new WFSTransactionException(poe,null,handle);
  }
  response.setTotalUpdated(BigInteger.valueOf(updated));
}
