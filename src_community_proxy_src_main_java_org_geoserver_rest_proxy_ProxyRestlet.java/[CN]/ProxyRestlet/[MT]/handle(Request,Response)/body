{
  if (watcherWorks && configWatcher.isStale()) {
    config=ProxyConfig.loadConfFromDisk();
  }
  Form f=request.getResourceRef().getQueryAsForm();
  String url=f.getFirstValue("url");
  try {
    Boolean isPutOrPost=request.getMethod().equals(Method.PUT) || request.getMethod().equals(Method.POST);
    URL resolved=new URL(url);
    final HttpURLConnection connection=(HttpURLConnection)resolved.openConnection();
    if (isPutOrPost) {
      connection.setDoOutput(true);
      connection.setChunkedStreamingMode(4096);
    }
    connection.setRequestMethod(request.getMethod().toString());
    if (isPutOrPost) {
      String contentType=request.getEntity().getMediaType().toString();
      if (checkPermission(resolved,contentType) != true) {
        throw new RestletException("Nonpermitted hostname or request body with nonpermitted content type",Status.CLIENT_ERROR_BAD_REQUEST);
      }
      connection.addRequestProperty("Content-Type",contentType);
      copyStream(request.getEntity().getStream(),connection.getOutputStream());
    }
    if (checkPermission(resolved,connection.getContentType()) != true) {
      throw new RestletException("Request for nonpermitted content type or hostname",Status.CLIENT_ERROR_BAD_REQUEST);
    }
    response.setEntity(new StreamRepresentation(new MediaType(connection.getContentType())){
      @Override public void write(      OutputStream out) throws IOException {
        copyStream(connection.getInputStream(),out);
      }
      @Override public InputStream getStream() throws IOException {
        throw new UnsupportedOperationException();
      }
    }
);
  }
 catch (  MalformedURLException e) {
    LOGGER.log(Level.WARNING,"Invalid proxy request. ",e);
    throw new RestletException("Invalid proxy request",Status.CLIENT_ERROR_BAD_REQUEST);
  }
catch (  IOException e) {
    LOGGER.log(Level.WARNING,"Couldn't connect to proxied service",e);
    throw new RestletException("Couldn't connect to proxied service",Status.SERVER_ERROR_BAD_GATEWAY);
  }
}
