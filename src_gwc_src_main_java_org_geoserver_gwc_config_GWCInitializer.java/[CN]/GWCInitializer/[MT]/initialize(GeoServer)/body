{
  LOGGER.info("Initializing GeoServer specific GWC configuration from " + GWCConfigPersister.GWC_CONFIG_FILE);
  final Version currentVersion=new Version("1.0.0");
  final File configFile=configPersister.findConfigFile();
  if (configFile == null) {
    LOGGER.fine("GWC's GeoServer specific configuration not found, creating with old defaults");
    GWCConfig oldDefaults=GWCConfig.getOldDefaults();
    oldDefaults.setVersion(currentVersion.toString());
    upgradeWMSIntegrationConfig(geoServer,oldDefaults);
    createDefaultTileLayerInfos(oldDefaults);
    configPersister.save(oldDefaults);
  }
  final GWCConfig config=configPersister.getConfig();
  final Version version=new Version(config.getVersion());
  if (currentVersion.compareTo(version) > 0) {
    moveTileLayerInfosToTileLayerCatalog();
    config.setVersion(currentVersion.toString());
    configPersister.save(config);
  }
  final GWCConfig gwcConfig=configPersister.getConfig();
  checkNotNull(gwcConfig);
  if (gwcConfig.getCacheProviderClass() == null || gwcConfig.getCacheProviderClass().isEmpty()) {
    gwcConfig.setCacheProviderClass(GuavaCacheProvider.class.toString());
    configPersister.save(gwcConfig);
  }
  if (gwcConfig.getCacheConfigurations() == null) {
    if (LOGGER.isLoggable(Level.FINEST)) {
      LOGGER.finest("Setting default CacheConfiguration");
    }
    Map<String,CacheConfiguration> map=new HashMap<String,CacheConfiguration>();
    map.put(GuavaCacheProvider.class.toString(),new CacheConfiguration());
    gwcConfig.setCacheConfigurations(map);
    configPersister.save(gwcConfig);
  }
 else {
    if (LOGGER.isLoggable(Level.FINEST)) {
      LOGGER.finest("CacheConfiguration loaded");
    }
  }
  if (blobStore != null) {
    String cacheProviderClass=gwcConfig.getCacheProviderClass();
    if (!blobStore.getCacheProviders().containsKey(cacheProviderClass)) {
      gwcConfig.setCacheProviderClass(GuavaCacheProvider.class.toString());
      configPersister.save(gwcConfig);
      if (LOGGER.isLoggable(Level.FINEST)) {
        LOGGER.finest("Unable to find: " + cacheProviderClass + ", used default configuration");
      }
    }
    blobStore.setChanged(gwcConfig,true);
    CacheProvider cache=blobStore.getCache();
    addLayersToNotCache(cache,gwcConfig);
  }
}
