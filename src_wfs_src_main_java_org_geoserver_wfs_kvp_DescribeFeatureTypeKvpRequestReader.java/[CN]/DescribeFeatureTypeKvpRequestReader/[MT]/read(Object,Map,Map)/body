{
  request=super.read(request,kvp,rawKvp);
  DescribeFeatureTypeType describeFeatureType=(DescribeFeatureTypeType)request;
  if (!describeFeatureType.isSetOutputFormat()) {
    if (describeFeatureType.getVersion().startsWith("1.1")) {
      describeFeatureType.setOutputFormat("text/xml; subtype=gml/3.1.1");
    }
 else {
      describeFeatureType.setOutputFormat("XMLSCHEMA");
    }
  }
  NamespaceSupport namespaces=null;
  if (kvp.containsKey("NAMESPACE")) {
    if (kvp.get("NAMESPACE") instanceof NamespaceSupport) {
      namespaces=(NamespaceSupport)kvp.get("namespace");
    }
 else {
      LOGGER.warning("There's a namespace parameter but it seems it wasn't parsed to a " + NamespaceSupport.class.getName() + ": "+ kvp.get("namespace"));
    }
  }
  if (namespaces != null) {
    List<QName> typeNames=describeFeatureType.getTypeName();
    List<QName> newList=new ArrayList<QName>(typeNames.size());
    for (    QName name : typeNames) {
      String localPart=name.getLocalPart();
      String prefix=name.getPrefix();
      String namespaceURI=name.getNamespaceURI();
      if (XMLConstants.DEFAULT_NS_PREFIX.equals(prefix)) {
        namespaceURI=namespaces.getURI(XMLConstants.DEFAULT_NS_PREFIX);
      }
 else       if (XMLConstants.NULL_NS_URI.equals(namespaceURI)) {
        if (namespaces.getURI(prefix) != null) {
          namespaceURI=namespaces.getURI(prefix);
        }
      }
      if (catalog.getNamespaceByURI(namespaceURI) != null) {
        prefix=catalog.getNamespaceByURI(namespaceURI).getPrefix();
      }
      newList.add(new QName(namespaceURI,localPart,prefix));
    }
    describeFeatureType.getTypeName().clear();
    describeFeatureType.getTypeName().addAll(newList);
  }
  return request;
}
