{
  start("wcs:Contents");
  @SuppressWarnings("unchecked") final Set<CoverageInfo> coverages=new TreeSet<CoverageInfo>(new CoverageInfoLabelComparator());
  coverages.addAll(wcs.getGeoServer().getCatalog().getCoverages());
  for (Iterator<CoverageInfo> it=coverages.iterator(); it.hasNext(); ) {
    CoverageInfo cv=(CoverageInfo)it.next();
    if (!cv.enabled()) {
      it.remove();
    }
  }
  for (  CoverageInfo cv : coverages) {
    try {
      mark();
      handleCoverageSummary(cv);
      commit();
    }
 catch (    Exception e) {
      if (skipMisconfigured) {
        reset();
        LOGGER.log(Level.SEVERE,"Skipping coverage " + cv.prefixedName() + " as its capabilities generation failed",e);
      }
 else {
        throw new RuntimeException("Capabilities document generation failed on coverage " + cv.prefixedName(),e);
      }
    }
  }
  if (extensions != null && extensions.size() > 0) {
    start("wcs:Extension");
    try {
      for (      WCSExtendedCapabilitiesProvider provider : extensions) {
        provider.encodeExtendedContents(translator,wcs,new ArrayList<CoverageInfo>(coverages),request);
      }
    }
 catch (    Exception e) {
      throw new ServiceException("Extended capabilities provider threw error",e);
    }
    end("wcs:Extension");
  }
  end("wcs:Contents");
}
