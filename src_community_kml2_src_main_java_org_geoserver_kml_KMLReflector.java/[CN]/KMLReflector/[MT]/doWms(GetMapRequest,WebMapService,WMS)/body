{
  StringBuffer filename=new StringBuffer();
  boolean containsRasterData=false;
  boolean isRegionatingFriendly=true;
  for (int i=0; i < request.getLayers().size(); i++) {
    MapLayerInfo layer=request.getLayers().get(i);
    String name=layer.getName();
    containsRasterData=containsRasterData || (layer.getType() == MapLayerInfo.TYPE_RASTER);
    if (layer.getType() == MapLayerInfo.TYPE_VECTOR) {
      isRegionatingFriendly=isRegionatingFriendly && layer.getFeature().getFeatureSource(null,null).getQueryCapabilities().isReliableFIDSupported();
    }
 else     if (layer.getType() == MapLayerInfo.TYPE_REMOTE_VECTOR) {
      isRegionatingFriendly=isRegionatingFriendly && layer.getRemoteFeatureSource().getQueryCapabilities().isReliableFIDSupported();
    }
    int j=name.indexOf(':');
    if (j > -1) {
      name=name.substring(j + 1);
    }
    filename.append(name + "_");
  }
  Map<String,String> rawKvp=request.getRawKvp();
  String mode=KvpUtils.caseInsensitiveParam(rawKvp,"mode",wmsConfiguration.getKmlReflectorMode());
  if (!MODES.containsKey(mode)) {
    throw new ServiceException("Unknown KML mode: " + mode);
  }
  Map modeOptions=new HashMap(MODES.get(mode));
  if ("superoverlay".equals(mode)) {
    String submode=KvpUtils.caseInsensitiveParam(request.getRawKvp(),"superoverlay_mode",wmsConfiguration.getKmlSuperoverlayMode());
    if ("raster".equalsIgnoreCase(submode)) {
      modeOptions.put("overlaymode","raster");
    }
 else     if ("overview".equalsIgnoreCase(submode)) {
      modeOptions.put("overlaymode","overview");
    }
 else     if ("hybrid".equalsIgnoreCase(submode)) {
      modeOptions.put("overlaymode","hybrid");
    }
 else     if ("auto".equalsIgnoreCase(submode)) {
      modeOptions.put("overlaymode","auto");
    }
 else     if ("cached".equalsIgnoreCase(submode)) {
      modeOptions.put("overlaymode","cached");
    }
 else {
      throw new ServiceException("Unknown overlay mode: " + submode);
    }
  }
  if (request.getWidth() < 1) {
    request.setWidth(mode.equals("refresh") || containsRasterData ? DEFAULT_OVERLAY_SIZE : 256);
  }
  if (request.getHeight() < 1) {
    request.setHeight(mode.equals("refresh") || containsRasterData ? DEFAULT_OVERLAY_SIZE : 256);
  }
  request.setSRS("EPSG:4326");
  request=DefaultWebMapService.autoSetMissingProperties(request);
  Map fo=request.getFormatOptions();
  organizeFormatOptionsParams(request.getRawKvp(),fo);
  mergeDefaults(fo,modeOptions);
  if (fo.get("kmattr") == null) {
    fo.put("kmattr",wmsConfiguration.getKmlKmAttr());
  }
  if (fo.get("kmscore") == null) {
    fo.put("kmscore",wmsConfiguration.getKmScore());
  }
  if (fo.get("kmplacemark") == null) {
    fo.put("kmplacemark",wmsConfiguration.getKmlPlacemark());
  }
  Boolean superoverlay=(Boolean)fo.get("superoverlay");
  if (superoverlay == null)   superoverlay=Boolean.FALSE;
  String formatExtension=".kmz";
  if (superoverlay) {
    request.setFormat(KMZMapOutputFormat.MIME_TYPE);
  }
 else   if (mode.equals("refresh") || containsRasterData) {
    request.setFormat(KMLMapOutputFormat.MIME_TYPE);
  }
 else   if (!Arrays.asList(KMZMapOutputFormat.OUTPUT_FORMATS).contains(request.getFormat())) {
    request.setFormat(KMLMapOutputFormat.MIME_TYPE);
    formatExtension=".kml";
  }
  org.geoserver.wms.WebMap wmsResponse;
  if (!"download".equals(mode)) {
    request.setFormat(KMLMapOutputFormat.NL_KML_MIME_TYPE);
  }
  wmsResponse=wms.getMap(request);
  return wmsResponse;
}
