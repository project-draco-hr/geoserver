{
  Wps10Factory f=Wps10Factory.eINSTANCE;
  OutputDataType output=f.createOutputDataType();
  output.setIdentifier(Ows11Util.code(key));
  output.setTitle(Ows11Util.languageString(outputParam.description));
  Object o=outputs.get(key);
  if (mimeType == null) {
    mimeType=getOutputMimeType(key);
  }
  ProcessParameterIO ppio=ProcessParameterIO.find(outputParam,context,mimeType);
  if (ppio == null) {
    throw new WPSException("Don't know how to encode output " + key + " in mime type "+ mimeType);
  }
  try {
    if (reference && ppio instanceof ComplexPPIO) {
      OutputReferenceType outputReference=f.createOutputReferenceType();
      output.setReference(outputReference);
      ComplexPPIO cppio=(ComplexPPIO)ppio;
      String name=key + "." + cppio.getFileExtension();
      Resource outputResource=resourceManager.getOutputResource(status.getExecutionId(),name);
      try (OutputStream os=new CancellingOutputStream(outputResource.out(),listener)){
        if (o instanceof FeatureCollection) {
          o=CancellingFeatureCollectionBuilder.wrap((FeatureCollection)o,listener);
        }
        cppio.encode(o,os);
      }
       String mime;
      if (o instanceof RawData) {
        RawData rawData=(RawData)o;
        mime=rawData.getMimeType();
      }
 else {
        mime=cppio.getMimeType();
      }
      String url=resourceManager.getOutputResourceUrl(status.getExecutionId(),name,request.getBaseUrl(),mime);
      outputReference.setHref(url);
      outputReference.setMimeType(mime);
    }
 else {
      DataType data=f.createDataType();
      output.setData(data);
      if (ppio instanceof LiteralPPIO) {
        LiteralDataType literal=f.createLiteralDataType();
        data.setLiteralData(literal);
        literal.setValue(((LiteralPPIO)ppio).encode(o));
      }
 else       if (ppio instanceof BoundingBoxPPIO) {
        BoundingBoxType bbox=((BoundingBoxPPIO)ppio).encode(o);
        data.setBoundingBoxData(bbox);
      }
 else       if (ppio instanceof ComplexPPIO) {
        ComplexDataType complex=f.createComplexDataType();
        data.setComplexData(complex);
        ComplexPPIO cppio=(ComplexPPIO)ppio;
        complex.setMimeType(cppio.getMimeType());
        if (cppio instanceof RawDataPPIO) {
          RawData rawData=(RawData)o;
          complex.setMimeType(rawData.getMimeType());
          complex.setEncoding("base64");
          complex.getData().add(new RawDataEncoderDelegate(rawData));
        }
 else         if (cppio instanceof XMLPPIO) {
          complex.getData().add(new XMLEncoderDelegate((XMLPPIO)cppio,o));
        }
 else         if (cppio instanceof CDataPPIO) {
          complex.getData().add(new CDataEncoderDelegate((CDataPPIO)cppio,o));
        }
 else         if (cppio instanceof BinaryPPIO) {
          complex.setEncoding("base64");
          complex.getData().add(new BinaryEncoderDelegate((BinaryPPIO)cppio,o));
        }
 else {
          throw new WPSException("Don't know how to encode an output whose PPIO is " + cppio);
        }
      }
    }
  }
 catch (  Exception e) {
    throw new WPSException("Failed to encode the " + key + " output",e);
  }
  return output;
}
