{
  List<LayerLegend> legends=this.legends.get();
  double dpi=RendererUtilities.getDpi(mapContext.getRequest().getFormatOptions());
  double standardDpi=RendererUtilities.getDpi(Collections.emptyMap());
  double scaleFactor=dpi / standardDpi;
  Rectangle mainClip=g2d.getClipBounds();
  int heightOffset=0;
  Iterator<LayerLegend> imageIterator=legends.iterator();
  while (imageIterator.hasNext()) {
    LayerLegend legend=imageIterator.next();
    int height=legend.legend.getHeight();
    int width=legend.legend.getWidth();
    if (legend.title != null) {
      height+=legend.title.getHeight();
      if (width < legend.title.getWidth()) {
        width=legend.title.getWidth();
        width+=((int)Math.ceil(TITLE_INDENT * 2 * scaleFactor));
      }
    }
    Dimension size=new BasicStroke((float)scaleFactor).createStrokedShape(new Rectangle(0,0,width,height)).getBounds().getSize();
    int strokeHeight=(int)Math.ceil(size.getHeight());
    int strokeWidth=(int)Math.ceil(size.getWidth());
    BufferedImage finalLegend=ImageUtils.createImage(strokeWidth,strokeHeight,(IndexColorModel)null,false);
    Graphics2D finalGraphics=ImageUtils.prepareTransparency(false,LegendUtils.getBackgroundColor(legend.request),finalLegend,new HashMap<RenderingHints.Key,Object>());
    if (LegendUtils.isFontAntiAliasing(legend.request)) {
      finalGraphics.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
    }
 else {
      finalGraphics.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);
    }
    int titleHeightOffset=0;
    if (legend.title != null) {
      finalGraphics.drawImage(legend.title,((strokeWidth - legend.title.getWidth()) / 2),(strokeHeight - height),null);
      titleHeightOffset+=legend.title.getHeight();
    }
    finalGraphics.drawImage(legend.legend,(strokeWidth - width) / 2,(strokeHeight - height) + titleHeightOffset,null);
    finalGraphics.setColor(LegendUtils.DEFAULT_BORDER_COLOR);
    finalGraphics.fill(new BasicStroke((float)scaleFactor).createStrokedShape(new Rectangle(0,0,strokeWidth - 1,strokeHeight - 1)));
    g2d.drawImage(finalLegend,mainClip.x + (int)Math.ceil((paintArea.getWidth() - strokeWidth) / 2),mainClip.y + heightOffset,null);
    heightOffset+=strokeHeight + (strokeHeight * BETWEEN_LEGENDS_PERCENT_INDENT);
  }
}
