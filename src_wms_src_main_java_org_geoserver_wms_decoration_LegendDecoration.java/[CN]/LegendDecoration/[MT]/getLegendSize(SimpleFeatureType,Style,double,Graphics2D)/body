{
  final SimpleFeature sampleFeature=createSampleFeature(layer);
  final FeatureTypeStyle[] ftStyles=style.getFeatureTypeStyles();
  final Rule[] applicableRules=LegendUtils.getApplicableRules(ftStyles,scaleDenominator);
  final NumberRange<Double> scaleRange=NumberRange.create(scaleDenominator,scaleDenominator);
  final int ruleCount=applicableRules.length;
  final int w=20;
  final int h=20;
  FontMetrics metrics=g2d.getFontMetrics();
  float totalHeight=0, totalWidth=0;
  for (int i=0; i < ruleCount; i++) {
    final Symbolizer[] symbolizers=applicableRules[i].getSymbolizers();
    for (int sIdx=0; sIdx < symbolizers.length; sIdx++) {
      final Symbolizer symbolizer=symbolizers[sIdx];
      if (symbolizer instanceof RasterSymbolizer) {
        throw new IllegalStateException("It is not legal to have a RasterSymbolizer here");
      }
    }
    String label=applicableRules[i].getTitle();
    if (label == null)     label=applicableRules[i].getName();
    if (label == null)     label="";
    float heightIncrement=Math.max(h,metrics.getHeight());
    totalHeight=totalHeight + heightIncrement;
    totalWidth=Math.max(totalWidth,w + metrics.getDescent() + metrics.stringWidth(label));
  }
  return new Dimension((int)totalWidth,(int)totalHeight);
}
