{
  timeout=-1;
  Properties p=configFile.getProperties();
  List<FlowController> newControllers=new ArrayList<FlowController>();
  for (  Object okey : p.keySet()) {
    String key=((String)okey).trim();
    String value=(String)p.get(okey);
    LOGGER.info("Loading control-flow configuration: " + key + "="+ value);
    String[] keys=key.split("\\s*\\.\\s*");
    int queueSize=0;
    StringTokenizer tokenizer=new StringTokenizer(value,",");
    try {
      if ("ip.blacklist".equals(key) && "ip.whitelist".equals(key)) {
        continue;
      }
 else {
        if (!key.startsWith("user.ows") && !key.startsWith("ip.ows")) {
          if (tokenizer.countTokens() == 1) {
            queueSize=Integer.parseInt(value);
          }
 else {
            queueSize=Integer.parseInt(tokenizer.nextToken());
          }
        }
      }
    }
 catch (    NumberFormatException e) {
      LOGGER.severe("Rules should be assigned just a queue size, instead " + key + " is associated to "+ value);
      continue;
    }
    FlowController controller=null;
    if ("timeout".equalsIgnoreCase(key)) {
      timeout=queueSize * 1000;
      continue;
    }
    if ("ows.global".equalsIgnoreCase(key)) {
      controller=new GlobalFlowController(queueSize);
    }
 else     if ("ows".equals(keys[0])) {
      if (keys.length >= 4) {
        controller=new BasicOWSController(keys[1],keys[2],keys[3],queueSize);
      }
 else       if (keys.length == 3) {
        controller=new BasicOWSController(keys[1],keys[2],queueSize);
      }
 else       if (keys.length == 2) {
        controller=new BasicOWSController(keys[1],queueSize);
      }
    }
 else     if ("user".equals(keys[0])) {
      if (keys.length == 1) {
        controller=new UserConcurrentFlowController(queueSize);
      }
 else       if ("ows".equals(keys[1])) {
        controller=new RateControllerBuilder(){
          @Override protected KeyGenerator buildKeyGenerator(          String[] keys,          String value){
            return new CookieKeyGenerator();
          }
        }
.build(keys,value);
      }
    }
 else     if ("ip".equals(keys[0])) {
      if (keys.length == 1) {
        controller=new IpFlowController(queueSize);
      }
 else       if (keys.length > 1 && "ows".equals(keys[1])) {
        controller=new RateControllerBuilder(){
          @Override protected KeyGenerator buildKeyGenerator(          String[] keys,          String value){
            return new IpKeyGenerator();
          }
        }
.build(keys,value);
      }
 else       if (keys.length > 1) {
        if (!"blacklist".equals(keys[1]) && !"whitelist".equals(keys[1])) {
          String ip=key.substring("ip.".length());
          controller=new SingleIpFlowController(queueSize,ip);
        }
      }
    }
    if (controller == null) {
      LOGGER.severe("Could not parse rule '" + okey + "="+ value);
    }
 else {
      newControllers.add(controller);
    }
  }
  return newControllers;
}
