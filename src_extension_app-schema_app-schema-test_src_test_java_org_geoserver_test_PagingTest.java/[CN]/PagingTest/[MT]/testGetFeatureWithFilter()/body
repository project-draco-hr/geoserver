{
  String xml="<wfs:GetFeature " + "service=\"WFS\" " + "version=\"1.1.0\" "+ "xmlns:ogc=\"http://www.opengis.net/ogc\" "+ "xmlns:wfs=\"http://www.opengis.net/wfs\" "+ "xmlns:gml=\"http://www.opengis.net/gml/3.2\" "+ "xmlns:gsml=\"urn:cgi:xmlns:CGI:GeoSciML-Core:3.0.0\" "+ "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" "+ "xsi:schemaLocation=\""+ "http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.1.0/wfs.xsd " + AbstractAppSchemaMockData.GSML_URI + " "+ AbstractAppSchemaMockData.GSML_SCHEMA_LOCATION_URL+ "\" "+ "outputFormat=\"gml32\" "+ "startIndex=\"1\" "+ ">"+ "    <wfs:Query typeName=\"gsml:MappedFeature\">"+ "        <ogc:Filter>"+ "            <ogc:PropertyIsLike wildCard=\"*\" singleChar=\"#\" escapeChar=\"!\">"+ "                <ogc:Literal>M*</ogc:Literal>"+ "                <ogc:PropertyName>gml:name</ogc:PropertyName>"+ "            </ogc:PropertyIsLike>"+ "        </ogc:Filter>"+ "    </wfs:Query> "+ "</wfs:GetFeature>";
  Document doc=postAsDOM("wfs",xml);
  LOGGER.info("WFS filter GetFeature response:\n" + prettyString(doc));
  assertXpathCount(1,"//gsml:MappedFeature",doc);
  assertXpathEvaluatesTo("mf4","//gsml:MappedFeature/@gml:id",doc);
  checkMf4Values(doc,null);
  xml="<wfs:GetFeature " + "service=\"WFS\" " + "version=\"2.0.0\" "+ "xmlns:fes=\"http://www.opengis.net/fes/2.0\" "+ "xmlns:wfs=\"http://www.opengis.net/wfs/2.0\" "+ "xmlns:gml=\"http://www.opengis.net/gml/3.2\" "+ "xmlns:gsml=\"urn:cgi:xmlns:CGI:GeoSciML-Core:3.0.0\" "+ "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" "+ "xsi:schemaLocation=\""+ "http://www.opengis.net/wfs/2.0 http://schemas.opengis.net/wfs/2.0/wfs.xsd " + AbstractAppSchemaMockData.GSML_URI + " "+ AbstractAppSchemaMockData.GSML_SCHEMA_LOCATION_URL+ "\" "+ "startIndex=\"0\" count=\"1\" "+ ">"+ "    <wfs:Query typeNames=\"gsml:GeologicUnit\">"+ "        <fes:Filter>"+ "            <fes:PropertyIsEqualTo>"+ "                <fes:Literal>-Py</fes:Literal>"+ "                <fes:ValueReference>gml:name</fes:ValueReference>"+ "            </fes:PropertyIsEqualTo>"+ "        </fes:Filter>"+ "    </wfs:Query> "+ "</wfs:GetFeature>";
  validate(xml);
  doc=postAsDOM("wfs",xml);
  LOGGER.info("WFS filter GetFeature response:\n" + prettyString(doc));
  assertXpathCount(1,"//gsml:GeologicUnit",doc);
  assertXpathEvaluatesTo("gu.25678","//gsml:GeologicUnit/@gml:id",doc);
  assertXpathEvaluatesTo("Olivine basalt, tuff, microgabbro, minor sedimentary rocks","//gsml:GeologicUnit/gml:description",doc);
  assertXpathCount(3,"//gsml:GeologicUnit/gml:name",doc);
  List<String> names=new ArrayList<String>();
  names.add("Yaugher Volcanic Group 1");
  names.add("Yaugher Volcanic Group 2");
  names.add("-Py");
  String name=evaluate("//gsml:GeologicUnit/gml:name[1]",doc);
  assertTrue(names.contains(name));
  names.remove(name);
  name=evaluate("//gsml:GeologicUnit/gml:name[2]",doc);
  assertTrue(names.contains(name));
  names.remove(name);
  name=evaluate("//gsml:GeologicUnit/gml:name[3]",doc);
  assertTrue(names.contains(name));
  names.remove(name);
  assertTrue(names.isEmpty());
  assertXpathEvaluatesTo("instance","//gsml:GeologicUnit/gsml:purpose",doc);
  assertXpathEvaluatesTo("urn:ogc:def:nil:OGC::unknown","//gsml:GeologicUnit/gsml:geologicUnitType/@xlink:href",doc);
  assertXpathCount(2,"//gsml:GeologicUnit/gsml:occurrence",doc);
  assertXpathEvaluatesTo("","//gsml:GeologicUnit/gsml:occurrence",doc);
  assertXpathEvaluatesTo("urn:cgi:feature:MappedFeature:mf2","//gsml:GeologicUnit/gsml:occurrence[1]/@xlink:href",doc);
  assertXpathEvaluatesTo("urn:cgi:feature:MappedFeature:mf3","//gsml:GeologicUnit/gsml:occurrence[2]/@xlink:href",doc);
}
