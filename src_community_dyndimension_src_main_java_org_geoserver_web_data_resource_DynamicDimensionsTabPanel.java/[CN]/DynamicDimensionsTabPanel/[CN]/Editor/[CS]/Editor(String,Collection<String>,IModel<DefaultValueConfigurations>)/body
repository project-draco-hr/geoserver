{
  super(id,model);
  List<Property<DefaultValueConfiguration>> properties=Arrays.asList(DIMENSION,POLICY,DEFAULT_VALUE_EXPRESSION);
  table=new ReorderableTablePanel<DefaultValueConfiguration>("defaultConfigs",configurations,properties){
    private static final long serialVersionUID=8562909315041926320L;
    @Override protected Component getComponentForProperty(    String id,    final IModel<DefaultValueConfiguration> itemModel,    Property<DefaultValueConfiguration> property){
      if (DEFAULT_VALUE_EXPRESSION.equals(property)) {
        Fragment f=new Fragment(id,"ecqlEditor",DynamicDimensionsTabPanel.this);
        TextArea<String> ta=new TextArea<String>("editor");
        List<String> otherDimensions=new ArrayList<String>(enabledDimensionNames);
        String currentDimension=((DefaultValueConfiguration)itemModel.getObject()).getDimension();
        otherDimensions.remove(currentDimension);
        ta.add(new ECQLValidator().setValidAttributes(otherDimensions));
        ta.setModel((IModel<String>)property.getModel(itemModel));
        ta.setOutputMarkupId(true);
        Object currentPolicy=POLICY.getModel(itemModel).getObject();
        ta.setVisible(DefaultValuePolicy.EXPRESSION.equals(currentPolicy));
        f.add(ta);
        return f;
      }
 else       if (POLICY.equals(property)) {
        Fragment f=new Fragment(id,"policyChoice",DynamicDimensionsTabPanel.this);
        final DropDownChoice<DefaultValuePolicy> dd=new DropDownChoice<DefaultValueConfiguration.DefaultValuePolicy>("choice",Arrays.asList(DefaultValuePolicy.values()));
        dd.setChoiceRenderer(new EnumChoiceRenderer(DynamicDimensionsTabPanel.this));
        dd.setModel((IModel<DefaultValuePolicy>)property.getModel(itemModel));
        f.add(dd);
        return f;
      }
      return null;
    }
    @Override protected void onPopulateItem(    final Property<DefaultValueConfiguration> property,    final ListItem<Property<DefaultValueConfiguration>> item){
      super.onPopulateItem(property,item);
      if (property == DEFAULT_VALUE_EXPRESSION) {
        MarkupContainer parent=item.getParent();
        final DropDownChoice<?> dd=(DropDownChoice<?>)((Fragment)((ListItem<?>)parent.get(3)).get(0)).get(0);
        final TextArea<?> ta=(TextArea<?>)((Fragment)((ListItem<?>)parent.get(4)).get(0)).get(0);
        dd.add(new OnChangeAjaxBehavior(){
          private static final long serialVersionUID=-6159626785706793328L;
          @Override protected void onUpdate(          AjaxRequestTarget target){
            DefaultValuePolicy currentPolicy=(DefaultValuePolicy)dd.getConvertedInput();
            ta.setVisible(DefaultValuePolicy.EXPRESSION.equals(currentPolicy));
            target.add(ta);
            target.add(table);
          }
        }
);
      }
      item.add(new Behavior(){
        private static final long serialVersionUID=685833036040462732L;
        public void onComponentTag(        Component component,        ComponentTag tag){
          if (property == DEFAULT_VALUE_EXPRESSION) {
            tag.put("style","width:99%");
          }
 else {
            tag.put("style","width:1%");
          }
        }
      }
);
    }
  }
;
  table.setFilterable(false);
  table.setSortable(false);
  table.setPageable(false);
  table.setItemReuseStrategy(ReuseIfModelsEqualStrategy.getInstance());
  table.setOutputMarkupId(true);
  add(table);
  add(new IValidator<DefaultValueConfigurations>(){
    private static final long serialVersionUID=530635923236054192L;
    @Override public void validate(    IValidatable<DefaultValueConfigurations> validatable){
      DefaultValueConfigurations configurations=validatable.getValue();
      for (      DefaultValueConfiguration config : configurations.getConfigurations()) {
        if (config.getPolicy() == DefaultValuePolicy.EXPRESSION && config.getDefaultValueExpression() == null) {
          error(new ParamResourceModel("expressionRequired",DynamicDimensionsTabPanel.this).getString());
        }
      }
    }
  }
);
}
