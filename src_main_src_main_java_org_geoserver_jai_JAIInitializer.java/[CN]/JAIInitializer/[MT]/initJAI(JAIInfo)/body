{
  JAI jaiDef=JAI.getDefaultInstance();
  jai.setJAI(jaiDef);
  if (ImageWorker.isJaiExtEnabled()) {
    if (jai.getJAIEXTInfo() != null) {
      JAIEXTInfo jaiext=jai.getJAIEXTInfo();
      Set<String> jaiOperations=jaiext.getJAIOperations();
      Set<String> jaiExtOperations=jaiext.getJAIEXTOperations();
      if (jaiOperations != null && !jaiOperations.isEmpty()) {
        JAIExt.registerOperations(jaiOperations,false);
        for (        String opName : jaiOperations) {
          CoverageProcessor.removeOperationFromProcessors(opName);
          JAIExt.setJAIAcceleration(opName,true);
        }
      }
      if (jaiExtOperations != null && !jaiExtOperations.isEmpty()) {
        Set<String> newJai=new TreeSet<String>(jaiExtOperations);
        if (jaiOperations != null && !jaiOperations.isEmpty()) {
          newJai.removeAll(jaiOperations);
        }
        for (        String opName : newJai) {
          if (!JAIExt.isJAIExtOperation(opName)) {
            CoverageProcessor.removeOperationFromProcessors(opName);
          }
        }
        JAIExt.registerOperations(newJai,true);
      }
      CoverageProcessor.updateProcessors();
    }
  }
  jaiDef.setRenderingHint(JAI.KEY_CACHED_TILE_RECYCLING_ENABLED,jai.isRecycling());
  if (jai.isRecycling() && !(jaiDef.getRenderingHint(JAI.KEY_TILE_FACTORY) instanceof ConcurrentTileFactory)) {
    final ConcurrentTileFactory recyclingFactory=new ConcurrentTileFactory();
    jaiDef.setRenderingHint(JAI.KEY_TILE_FACTORY,recyclingFactory);
    jaiDef.setRenderingHint(JAI.KEY_TILE_RECYCLER,recyclingFactory);
  }
 else {
    if (!jai.isRecycling()) {
      final PassThroughTileFactory passThroughFactory=new PassThroughTileFactory();
      jaiDef.setRenderingHint(JAI.KEY_TILE_FACTORY,passThroughFactory);
      jaiDef.setRenderingHint(JAI.KEY_TILE_RECYCLER,passThroughFactory);
    }
  }
  TileCache jaiCache=jaiDef.getTileCache();
  jai.setTileCache(jaiCache);
  long jaiMemory=(long)(jai.getMemoryCapacity() * Runtime.getRuntime().maxMemory());
  jaiCache.setMemoryCapacity(jaiMemory);
  jaiCache.setMemoryThreshold((float)jai.getMemoryThreshold());
  jaiDef.getTileScheduler().setParallelism(jai.getTileThreads());
  jaiDef.getTileScheduler().setPrefetchParallelism(jai.getTileThreads());
  jaiDef.getTileScheduler().setPriority(jai.getTilePriority());
  jaiDef.getTileScheduler().setPrefetchPriority(jai.getTilePriority());
  Registry.setNativeAccelerationAllowed("Mosaic",jai.isAllowNativeMosaic(),jaiDef);
  Registry.setNativeAccelerationAllowed("Warp",jai.isAllowNativeWarp(),jaiDef);
}
