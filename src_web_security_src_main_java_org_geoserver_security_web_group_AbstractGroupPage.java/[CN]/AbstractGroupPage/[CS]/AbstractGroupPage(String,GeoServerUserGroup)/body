{
  this.userGroupServiceName=userGroupServiceName;
  boolean hasUserGroupStore=hasUserGroupStore(userGroupServiceName);
  boolean hasRoleStore=hasRoleStore(getSecurityManager().getActiveRoleService().getName());
  Form form=new Form("form",new CompoundPropertyModel(group));
  add(form);
  form.add(new TextField<String>("groupname").setEnabled(hasUserGroupStore));
  form.add(new CheckBox("enabled").setEnabled(hasUserGroupStore));
  List<GeoServerRole> roles;
  try {
    roles=new ArrayList(getSecurityManager().getActiveRoleService().getRolesForGroup(group.getGroupname()));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  form.add(rolePalette=new RolePaletteFormComponent("roles",new Model((Serializable)roles)));
  rolePalette.setEnabled(hasRoleStore);
  form.add(new SubmitLink("save"){
    @Override public void onSubmit(){
      try {
        onFormSubmit(group);
        setReturnPageDirtyAndReturn(true);
      }
 catch (      IOException e) {
        if (e.getCause() instanceof AbstractSecurityException) {
          error(e.getCause());
        }
 else {
          error(new ParamResourceModel("saveError",getPage(),e.getMessage()).getObject());
        }
        LOGGER.log(Level.SEVERE,"Error occurred while saving group",e);
      }
    }
  }
.setEnabled(hasUserGroupStore || hasRoleStore(getSecurityManager().getActiveRoleService().getName())));
  form.add(getCancelLink());
}
