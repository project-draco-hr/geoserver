{
  Ows20Factory factory=Ows20Factory.eINSTANCE;
  String version=null;
  if (useServiceVersion && request.getServiceDescriptor() != null) {
    version=request.getServiceDescriptor().getVersion().toString();
  }
  ExceptionReportType report=exceptionReport(exception,verboseExceptions,version);
  HttpServletResponse response=request.getHttpResponse();
  if (!request.isSOAP()) {
    response.setContentType("application/xml");
  }
  OWS20Exception ows2ex;
  if (exception instanceof OWS20Exception) {
    ows2ex=(OWS20Exception)exception;
  }
 else   if (exception.getCause() != null && exception.getCause() instanceof OWS20Exception) {
    ows2ex=(OWS20Exception)exception.getCause();
  }
 else {
    ows2ex=null;
  }
  OWSConfiguration configuration=new OWSConfiguration();
  Encoder encoder=new Encoder(configuration,configuration.schema());
  encoder.setIndenting(true);
  encoder.setIndentSize(2);
  encoder.setLineWidth(60);
  encoder.setOmitXMLDeclaration(request.isSOAP());
  String schemaLocation=buildSchemaURL(baseURL(request.getHttpRequest()),"ows/2.0/owsAll.xsd");
  encoder.setSchemaLocation(OWS.NAMESPACE,schemaLocation);
  try {
    if (ows2ex != null && ows2ex.getHttpCode() != null) {
      response.sendError(ows2ex.getHttpCode(),encoder.encodeAsString(report,OWS.ExceptionReport));
    }
 else {
      encoder.encode(report,OWS.ExceptionReport,response.getOutputStream());
    }
  }
 catch (  Exception ex) {
    LOGGER.log(Level.INFO,"Problem writing exception information back to calling client:",ex);
  }
 finally {
    try {
      response.getOutputStream().flush();
    }
 catch (    IOException ioe) {
    }
  }
}
