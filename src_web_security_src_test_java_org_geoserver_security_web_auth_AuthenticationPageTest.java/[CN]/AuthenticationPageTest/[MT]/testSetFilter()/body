{
  initializeForXML();
  activateRORoleService();
  tester.startPage(page=new AuthenticationPage());
  tester.assertComponent("form:filterChain:authFilterChain:recorder",Recorder.class);
  List<String> selected=(List<String>)(page.get("form:filterChain:authFilterChain")).getDefaultModelObject();
  assertEquals(3,selected.size());
  assertTrue(selected.contains(FORM_LOGIN_FILTER));
  assertTrue(selected.contains(ANONYMOUS_FILTER));
  assertTrue(selected.contains(REMEMBER_ME_FILTER));
  GeoServerSecurityFilterChain filterChain=getSecurityManager().getSecurityConfig().getFilterChain();
  assertTrue(filterChain.getRequestChainByName("web").getFilterNames().contains(ANONYMOUS_FILTER));
  assertTrue(filterChain.getRequestChainByName("web").getFilterNames().contains(REMEMBER_ME_FILTER));
  assertFalse(filterChain.getRequestChainByName("web").getFilterNames().contains(BASIC_AUTH_FILTER));
  FormTester form=tester.newFormTester("form");
  form.setValue("filterChain:authFilterChain:recorder",BASIC_AUTH_FILTER);
  form.submit("save");
  tester.assertNoErrorMessage();
  filterChain=getSecurityManager().getSecurityConfig().getFilterChain();
  assertTrue(filterChain.getRequestChainByName("web").getFilterNames().contains(BASIC_AUTH_FILTER));
}
