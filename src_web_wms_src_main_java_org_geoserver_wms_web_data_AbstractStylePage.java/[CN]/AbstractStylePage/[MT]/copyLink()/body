{
  return new AjaxSubmitLink("copy"){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form form){
      styles.processInput();
      StyleInfo style=(StyleInfo)styles.getConvertedInput();
      if (style != null) {
        try {
          editor.reset();
          setRawStyle(readFile(style));
          formatChoice.setModelObject(style.getFormat());
          target.appendJavaScript(String.format("if (document.gsEditors) { document.gsEditors.editor.setOption('mode', '%s'); }",styleHandler().getCodeMirrorEditMode()));
        }
 catch (        Exception e) {
          error("Errors occurred loading the '" + style.getName() + "' style");
        }
        target.add(styleForm);
      }
    }
    @Override protected void updateAjaxAttributes(    AjaxRequestAttributes attributes){
      super.updateAjaxAttributes(attributes);
      attributes.getAjaxCallListeners().add(new AjaxCallListener(){
        @Override public CharSequence getPrecondition(        Component component){
          return "var val = event.view.document.gsEditors ? " + "event.view.document.gsEditors." + editor.getTextAreaMarkupId() + ".getValue() : "+ "event.view.document.getElementById(\""+ editor.getTextAreaMarkupId()+ "\").value; "+ "if(val != '' &&"+ "!confirm('"+ new ParamResourceModel("confirmOverwrite",AbstractStylePage.this).getString()+ "')) return false;";
        }
      }
);
    }
    @Override public boolean getDefaultFormProcessing(){
      return false;
    }
  }
;
}
