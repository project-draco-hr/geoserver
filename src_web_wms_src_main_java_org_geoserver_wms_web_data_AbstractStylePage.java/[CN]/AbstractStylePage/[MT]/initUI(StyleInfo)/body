{
  if (style == null) {
    styleModel=new CompoundPropertyModel<StyleInfo>(getCatalog().getFactory().createStyle());
    styleModel.getObject().setName("");
    styleModel.getObject().setLegend(getCatalog().getFactory().createLegend());
    add(new Label("stylename",""));
  }
 else {
    add(new Label("stylename",(style.getWorkspace() == null ? "" : style.getWorkspace().getName() + ":") + style.getName()));
    styleModel=new CompoundPropertyModel<StyleInfo>(new StyleDetachableModel(style));
  }
  styleForm=new Form<StyleInfo>("styleForm",styleModel){
    @Override protected void onSubmit(){
      onStyleFormSubmit();
      super.onSubmit();
    }
  }
;
  add(styleForm);
  styleForm.setMultiPart(true);
  popup=new ModalWindow("popup");
  styleForm.add(popup);
  List<ITab> tabs=new ArrayList<ITab>();
  PanelCachingTab dataTab=new PanelCachingTab(new AbstractTab(new Model<String>("Data")){
    public Panel getPanel(    String id){
      return new StyleAdminPanel(id,AbstractStylePage.this);
    }
  }
);
  PanelCachingTab publishingTab=new PanelCachingTab(new AbstractTab(new Model<String>("Publishing")){
    private static final long serialVersionUID=4184410057835108176L;
    public Panel getPanel(    String id){
      return new LayerAssociationPanel(id,AbstractStylePage.this);
    }
  }
);
  PanelCachingTab previewTab=new PanelCachingTab(new AbstractTab(new Model<String>("Layer Preview")){
    public Panel getPanel(    String id){
      return new OpenLayersPreviewPanel(id,AbstractStylePage.this);
    }
  }
);
  PanelCachingTab attributeTab=new PanelCachingTab(new AbstractTab(new Model<String>("Layer Attributes")){
    private static final long serialVersionUID=4184410057835108176L;
    public Panel getPanel(    String id){
      try {
        return new LayerAttributePanel(id,AbstractStylePage.this);
      }
 catch (      IOException e) {
        throw new WicketRuntimeException(e);
      }
    }
  }
);
  tabs.add(dataTab);
  if (style != null) {
    tabs.add(publishingTab);
    tabs.add(previewTab);
    tabs.add(attributeTab);
  }
  List<StyleEditTabPanelInfo> tabPanels=getGeoServerApplication().getBeansOfType(StyleEditTabPanelInfo.class);
  Collections.sort(tabPanels,new Comparator<StyleEditTabPanelInfo>(){
    public int compare(    StyleEditTabPanelInfo o1,    StyleEditTabPanelInfo o2){
      Integer order1=o1.getOrder() >= 0 ? o1.getOrder() : Integer.MAX_VALUE;
      Integer order2=o2.getOrder() >= 0 ? o2.getOrder() : Integer.MAX_VALUE;
      return order1.compareTo(order2);
    }
  }
);
  for (  StyleEditTabPanelInfo tabPanelInfo : tabPanels) {
    String titleKey=tabPanelInfo.getTitleKey();
    IModel<String> titleModel=null;
    if (tabPanelInfo.isEnabledOnNew() || style != null) {
      if (titleKey != null) {
        titleModel=new org.apache.wicket.model.ResourceModel(titleKey);
      }
 else {
        titleModel=new Model<String>(tabPanelInfo.getComponentClass().getSimpleName());
      }
      final Class<StyleEditTabPanel> panelClass=tabPanelInfo.getComponentClass();
      tabs.add(new AbstractTab(titleModel){
        private static final long serialVersionUID=-6637277497986497791L;
        @Override public Panel getPanel(        String panelId){
          StyleEditTabPanel tabPanel;
          try {
            tabPanel=panelClass.getConstructor(String.class,IModel.class).newInstance(panelId,styleModel);
          }
 catch (          Exception e) {
            throw new WicketRuntimeException(e);
          }
          return tabPanel;
        }
      }
);
    }
  }
  tabbedPanel=new AjaxTabbedPanel<ITab>("context",tabs);
  styleForm.add(tabbedPanel);
  styleForm.add(editor=new CodeMirrorEditor("styleEditor",styleHandler().getCodeMirrorEditMode(),new PropertyModel<String>(this,"rawStyle")));
  editor.setTextAreaMarkupId("editor");
  editor.setOutputMarkupId(true);
  editor.setRequired(true);
  styleForm.add(editor);
  add(validateLink());
  add(new AjaxSubmitLink("apply",styleForm){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      if (style == null) {
        StyleInfo s=getStyleInfo();
        PageParameters parameters=new PageParameters();
        parameters.add(StyleEditPage.NAME,s.getName());
        if (s.getWorkspace() != null) {
          parameters.add(StyleEditPage.WORKSPACE,s.getWorkspace().getName());
        }
        getRequestCycle().setResponsePage(StyleEditPage.class,parameters);
      }
      target.add(AbstractStylePage.this);
    }
  }
);
  add(new AjaxSubmitLink("submit",styleForm){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      doReturn(StylePage.class);
    }
  }
);
  Link<StylePage> cancelLink=new Link<StylePage>("cancel"){
    @Override public void onClick(){
      doReturn(StylePage.class);
    }
  }
;
  add(cancelLink);
}
