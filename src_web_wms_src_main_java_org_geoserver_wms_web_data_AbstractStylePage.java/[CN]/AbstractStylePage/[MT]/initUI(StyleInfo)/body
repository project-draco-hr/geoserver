{
  IModel<StyleInfo> styleModel=new CompoundPropertyModel(style != null ? new StyleDetachableModel(style) : getCatalog().getFactory().createStyle());
  styleForm=new Form("form",styleModel){
    @Override protected void onSubmit(){
      super.onSubmit();
      onStyleFormSubmit();
    }
  }
;
  styleForm.setMarkupId("mainForm");
  add(styleForm);
  styleForm.add(nameTextField=new TextField("name"));
  nameTextField.setRequired(true);
  DropDownChoice<WorkspaceInfo> wsChoice=new DropDownChoice("workspace",new WorkspacesModel(),new WorkspaceChoiceRenderer());
  wsChoice.setNullValid(true);
  if (!isAuthenticatedAsAdmin()) {
    wsChoice.setNullValid(false);
    wsChoice.setRequired(true);
  }
  styleForm.add(wsChoice);
  styleForm.add(editor=new CodeMirrorEditor("SLD",new PropertyModel(this,"rawSLD")));
  editor.setTextAreaMarkupId("editor");
  editor.setOutputMarkupId(true);
  editor.setRequired(true);
  styleForm.add(editor);
  if (style != null) {
    try {
      setRawSLD(readFile(style));
    }
 catch (    IOException e) {
      Session.get().error(new ParamResourceModel("sldNotFound",this,style.getFilename()).getString());
    }
  }
  styles=new DropDownChoice("existingStyles",new Model(),new StylesModel(),new StyleChoiceRenderer());
  styles.setOutputMarkupId(true);
  styles.add(new AjaxFormComponentUpdatingBehavior("onchange"){
    @Override protected void onUpdate(    AjaxRequestTarget target){
      styles.validate();
      copyLink.setEnabled(styles.getConvertedInput() != null);
      target.addComponent(copyLink);
    }
  }
);
  styleForm.add(styles);
  copyLink=copyLink();
  copyLink.setEnabled(false);
  styleForm.add(copyLink);
  uploadForm=uploadForm(styleForm);
  uploadForm.setMultiPart(true);
  uploadForm.setMaxSize(Bytes.megabytes(1));
  uploadForm.setMarkupId("uploadForm");
  add(uploadForm);
  uploadForm.add(fileUploadField=new FileUploadField("filename"));
  add(validateLink());
  add(previewLink());
  Link cancelLink=new Link("cancel"){
    @Override public void onClick(){
      doReturn(StylePage.class);
    }
  }
;
  add(cancelLink);
  legendContainer=new WebMarkupContainer("legendContainer");
  legendContainer.setOutputMarkupId(true);
  add(legendContainer);
  legend=new Image("legend");
  legendContainer.add(legend);
  legend.setVisible(false);
  legend.setOutputMarkupId(true);
  legend.setImageResource(new DynamicWebResource(){
    @Override protected ResourceState getResourceState(){
      return new ResourceState(){
        @Override public byte[] getData(){
          try {
            ByteArrayInputStream input=new ByteArrayInputStream(lastStyle.getBytes());
            EntityResolverProvider entityResolverProvider=new EntityResolverProvider(getGeoServer());
            StyledLayerDescriptor sld=Styles.parse(input,entityResolverProvider.getEntityResolver());
            if (sld != null && sld.getStyledLayers().length > 0) {
              Style style=null;
              StyledLayer sl=sld.getStyledLayers()[0];
              if (sl instanceof UserLayer) {
                style=((UserLayer)sl).getUserStyles()[0];
              }
 else {
                style=((NamedLayer)sl).getStyles()[0];
              }
              GetLegendGraphicRequest request=new GetLegendGraphicRequest();
              request.setStyle(style);
              request.setLayer(null);
              request.setStrict(false);
              Map<String,String> legendOptions=new HashMap<String,String>();
              legendOptions.put("forceLabels","on");
              legendOptions.put("fontAntiAliasing","true");
              request.setLegendOptions(legendOptions);
              BufferedImageLegendGraphicBuilder builder=new BufferedImageLegendGraphicBuilder();
              BufferedImage image=builder.buildLegendGraphic(request);
              ByteArrayOutputStream bos=new ByteArrayOutputStream();
              ImageIO.write(image,"PNG",bos);
              return bos.toByteArray();
            }
            error("Failed to build legend preview");
            return null;
          }
 catch (          IOException e) {
            throw new RuntimeException(e);
          }
        }
        @Override public String getContentType(){
          return "image/png";
        }
      }
;
    }
  }
);
}
