{
  CompoundPropertyModel<StyleInfo> styleModel=new CompoundPropertyModel(style != null ? new StyleDetachableModel(style) : getCatalog().getFactory().createStyle());
  format=style != null ? style.getFormat() : getCatalog().getFactory().createStyle().getFormat();
  if (null == styleModel.getObject().getLegend()) {
    styleModel.getObject().setLegend(getCatalog().getFactory().createLegend());
  }
  styleForm=new Form("form",styleModel){
    @Override protected void onSubmit(){
      super.onSubmit();
      onStyleFormSubmit();
    }
  }
;
  styleForm.setMarkupId("mainForm");
  add(styleForm);
  styleForm.add(nameTextField=new TextField("name"));
  nameTextField.setRequired(true);
  wsChoice=new DropDownChoice<WorkspaceInfo>("workspace",new WorkspacesModel(),new WorkspaceChoiceRenderer());
  wsChoice.setNullValid(true);
  if (!isAuthenticatedAsAdmin()) {
    wsChoice.setNullValid(false);
    wsChoice.setRequired(true);
  }
  styleForm.add(wsChoice);
  formatChoice=new DropDownChoice<String>("format",new PropertyModel(this,"format"),new StyleFormatsModel(),new ChoiceRenderer<String>(){
    @Override public String getIdValue(    String object,    int index){
      return object;
    }
    @Override public Object getDisplayValue(    String object){
      return Styles.handler(object).getName();
    }
  }
);
  formatChoice.add(new AjaxFormComponentUpdatingBehavior("onchange"){
    @Override protected void onUpdate(    AjaxRequestTarget target){
      target.appendJavaScript(String.format("if (document.gsEditors) { document.gsEditors.editor.setOption('mode', '%s'); }",styleHandler().getCodeMirrorEditMode()));
    }
  }
);
  styleForm.add(formatChoice);
  formatReadOnlyMessage=new WebMarkupContainer("formatReadOnly",new Model());
  formatReadOnlyMessage.setVisible(false);
  styleForm.add(formatReadOnlyMessage);
  styleForm.add(editor=new CodeMirrorEditor("styleEditor",styleHandler().getCodeMirrorEditMode(),new PropertyModel(this,"rawStyle")));
  editor.setTextAreaMarkupId("editor");
  editor.setOutputMarkupId(true);
  editor.setRequired(true);
  styleForm.add(editor);
  ExternalGraphicPanel legendPanel=new ExternalGraphicPanel("legendPanel",styleModel,styleForm);
  legendPanel.setOutputMarkupId(true);
  styleForm.add(legendPanel);
  if (style != null) {
    try {
      setRawStyle(readFile(style));
    }
 catch (    IOException e) {
      Session.get().error(new ParamResourceModel("styleNotFound",this,style.getFilename()).getString());
    }
  }
  templates=new DropDownChoice("templates",new Model(),new StyleTypeModel(),new StyleTypeChoiceRenderer());
  templates.setOutputMarkupId(true);
  templates.add(new AjaxFormComponentUpdatingBehavior("onchange"){
    @Override protected void onUpdate(    AjaxRequestTarget target){
      templates.validate();
      generateLink.setEnabled(templates.getConvertedInput() != null);
      target.add(generateLink);
    }
  }
);
  styleForm.add(templates);
  generateLink=generateLink();
  generateLink.setEnabled(false);
  styleForm.add(generateLink);
  styles=new DropDownChoice("existingStyles",new Model(),new StylesModel(),new StyleChoiceRenderer());
  styles.setOutputMarkupId(true);
  styles.add(new AjaxFormComponentUpdatingBehavior("onchange"){
    @Override protected void onUpdate(    AjaxRequestTarget target){
      styles.validate();
      copyLink.setEnabled(styles.getConvertedInput() != null);
      target.add(copyLink);
    }
  }
);
  styleForm.add(styles);
  copyLink=copyLink();
  copyLink.setEnabled(false);
  styleForm.add(copyLink);
  uploadForm=uploadForm(styleForm);
  uploadForm.setMultiPart(true);
  uploadForm.setMaxSize(Bytes.megabytes(1));
  uploadForm.setMarkupId("uploadForm");
  add(uploadForm);
  uploadForm.add(fileUploadField=new FileUploadField("filename"));
  add(validateLink());
  add(previewLink());
  Link cancelLink=new Link("cancel"){
    @Override public void onClick(){
      doReturn(StylePage.class);
    }
  }
;
  add(cancelLink);
  legendContainer=new WebMarkupContainer("legendContainer");
  legendContainer.setOutputMarkupId(true);
  add(legendContainer);
  this.legendImg=new Image("legendImg");
  legendContainer.add(this.legendImg);
  this.legendImg.setVisible(false);
  this.legendImg.setOutputMarkupId(true);
  this.legendImg.setImageResource(new DynamicWebResource(){
    @Override protected ResourceState getResourceState(){
      return new ResourceState(){
        @Override public byte[] getData(){
          GeoServerDataDirectory dd=GeoServerExtensions.bean(GeoServerDataDirectory.class,getGeoServerApplication().getApplicationContext());
          StyleInfo si=new StyleInfoImpl(getCatalog());
          String styleName="tmp" + UUID.randomUUID().toString();
          String styleFileName=styleName + ".sld";
          si.setFilename(styleFileName);
          si.setName(styleName);
          si.setWorkspace(wsChoice.getModel().getObject());
          Resource styleResource=null;
          try {
            styleResource=dd.style(si);
            try (OutputStream os=styleResource.out()){
              IOUtils.write(lastStyle,os);
            }
             Style style=dd.parsedStyle(si);
            if (style != null) {
              GetLegendGraphicRequest request=new GetLegendGraphicRequest();
              request.setLayer(null);
              request.setStyle(style);
              request.setStrict(false);
              Map<String,String> legendOptions=new HashMap<String,String>();
              legendOptions.put("forceLabels","on");
              legendOptions.put("fontAntiAliasing","true");
              request.setLegendOptions(legendOptions);
              BufferedImageLegendGraphicBuilder builder=new BufferedImageLegendGraphicBuilder();
              BufferedImage image=builder.buildLegendGraphic(request);
              ByteArrayOutputStream bos=new ByteArrayOutputStream();
              ImageIO.write(image,"PNG",bos);
              return bos.toByteArray();
            }
            error("Failed to build legend preview");
            return null;
          }
 catch (          IOException e) {
            throw new RuntimeException(e);
          }
 finally {
            if (styleResource != null) {
              styleResource.delete();
            }
          }
        }
        @Override public String getContentType(){
          return "image/png";
        }
      }
;
    }
  }
);
}
