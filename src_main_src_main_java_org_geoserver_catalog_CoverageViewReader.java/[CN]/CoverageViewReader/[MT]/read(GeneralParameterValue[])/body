{
  List<CoverageBand> bands=coverageView.getCoverageBands();
  List<GridCoverage2D> coverages=new ArrayList<GridCoverage2D>();
  CoveragesConsistencyChecker checker=null;
  int coverageBandsSize=bands.size();
  ArrayList<Integer> selectedBandIndices=new ArrayList<Integer>();
  for (int m=0; m < coverageBandsSize; m++) {
    selectedBandIndices.add(m);
  }
  if (parameters != null) {
    for (int i=0; i < parameters.length; i++) {
      final ParameterValue param=(ParameterValue)parameters[i];
      if (AbstractGridFormat.BANDS.getName().equals(param.getDescriptor().getName())) {
        int[] bandIndicesParam=(int[])param.getValue();
        if (bandIndicesParam != null) {
          selectedBandIndices=new ArrayList<Integer>();
          for (int bIdx=0; bIdx < bandIndicesParam.length; bIdx++) {
            selectedBandIndices.add(bandIndicesParam[bIdx]);
          }
          break;
        }
      }
    }
  }
  HashMap<String,GridCoverage2D> inputCoverages=new HashMap<String,GridCoverage2D>();
  GridCoverage2D dynamicAlphaSource=null;
  for (  int bIdx : selectedBandIndices) {
    CoverageBand band=bands.get(bIdx);
    List<InputCoverageBand> selectedBands=band.getInputCoverageBands();
    String coverageName=selectedBands.get(0).getCoverageName();
    if (!inputCoverages.containsKey(coverageName)) {
      GridCoverage2DReader reader=SingleGridCoverage2DReader.wrap(delegate,coverageName);
      if (checker == null) {
        checker=new CoveragesConsistencyChecker(reader);
      }
 else {
        checker.checkConsistency(reader);
      }
      final GridCoverage2D coverage=reader.read(parameters);
      if (coverage == null) {
        continue;
      }
      if (dynamicAlphaSource == null && hasDynamicAlpha(coverage,reader)) {
        dynamicAlphaSource=coverage;
      }
      inputCoverages.put(coverageName,coverage);
    }
  }
  if (inputCoverages.isEmpty()) {
    return null;
  }
  ArrayList<CoverageBand> mergedBands=new ArrayList<CoverageBand>();
  int idx=0;
  CoverageBand mBand=null;
  while (idx < selectedBandIndices.size()) {
    if (mBand == null) {
      mBand=new CoverageBand();
      mBand.setInputCoverageBands(bands.get(selectedBandIndices.get(idx)).getInputCoverageBands());
    }
    String coverageName=bands.get(selectedBandIndices.get(idx)).getInputCoverageBands().get(0).getCoverageName();
    if (idx + 1 < selectedBandIndices.size() && bands.get(selectedBandIndices.get(idx + 1)).getInputCoverageBands().get(0).getCoverageName().equals(coverageName)) {
      ArrayList<InputCoverageBand> groupBands=new ArrayList<InputCoverageBand>();
      groupBands.addAll(mBand.getInputCoverageBands());
      groupBands.addAll(bands.get(selectedBandIndices.get(idx + 1)).getInputCoverageBands());
      mBand.setInputCoverageBands(groupBands);
    }
 else {
      mergedBands.add(mBand);
      mBand=null;
    }
    idx++;
  }
  for (  CoverageBand band : mergedBands) {
    List<InputCoverageBand> selectedBands=band.getInputCoverageBands();
    String coverageName=selectedBands.get(0).getCoverageName();
    ArrayList<Integer> bandIndices=new ArrayList<Integer>(selectedBands.size());
    for (    InputCoverageBand icb : selectedBands) {
      bandIndices.add(Integer.parseInt(icb.getBand()));
    }
    GridCoverage2D coverage=inputCoverages.get(coverageName);
    Hints localHints=new Hints(hints);
    if (dynamicAlphaSource != null && mergedBands.size() == 1 && (bandIndices.size() == 1 || bandIndices.size() == 3)) {
      final int alphaBandIndex=getAlphaBandIndex(coverage);
      addAlphaColorModelHint(localHints,bandIndices.size());
      bandIndices.add(alphaBandIndex);
    }
    coverage=retainBands(bandIndices,coverage,localHints);
    coverages.add(coverage);
  }
  GridCoverage2D result;
  if (coverages.size() > 1) {
    Hints localHints=new Hints(hints);
    if (dynamicAlphaSource != null) {
      int currentBandCount=countBands(coverages);
      if (currentBandCount == 1 || currentBandCount == 3) {
        final int alphaBandIndex=getAlphaBandIndex(dynamicAlphaSource);
        GridCoverage2D alphaBandCoverage=retainBands(Arrays.asList(alphaBandIndex),dynamicAlphaSource,hints);
        coverages.add(alphaBandCoverage);
        addAlphaColorModelHint(localHints,currentBandCount);
      }
    }
    final ParameterValueGroup param=PROCESSOR.getOperation("BandMerge").getParameters();
    param.parameter("sources").setValue(coverages);
    result=(GridCoverage2D)PROCESSOR.doOperation(param,localHints);
  }
 else {
    result=coverages.get(0);
  }
  return result;
}
