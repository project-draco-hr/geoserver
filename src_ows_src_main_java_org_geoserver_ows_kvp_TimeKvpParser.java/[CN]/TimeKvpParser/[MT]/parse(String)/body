{
  if (value == null) {
    return Collections.emptyList();
  }
  value=value.trim();
  if (value.length() == 0) {
    return Collections.emptyList();
  }
  final Set result=new TreeSet(new Comparator(){
    public int compare(    Object o1,    Object o2){
      final boolean o1Date=o1 instanceof Date;
      final boolean o2Date=o2 instanceof Date;
      if (o1Date) {
        final Date dateLeft=(Date)o1;
        if (o2Date) {
          return dateLeft.compareTo((Date)o2);
        }
        return dateLeft.compareTo(((DateRange)o2).getMinValue());
      }
      final DateRange left=(DateRange)o1;
      if (o2Date) {
        return left.getMinValue().compareTo(((Date)o2));
      }
      return left.getMinValue().compareTo(((DateRange)o2).getMinValue());
    }
  }
);
  String[] listDates=value.split(",");
  for (  String date : listDates) {
    if (date.indexOf("/") <= 0) {
      Object o=getFuzzyDate(date);
      if (o instanceof Date) {
        addDate(result,(Date)o);
      }
 else {
        addPeriod(result,(DateRange)o);
      }
    }
 else {
      String[] period=date.split("/");
      if (period.length == 3) {
        final Date begin=beginning(getFuzzyDate(period[0]));
        final Date end=end(getFuzzyDate(period[1]));
        final long millisIncrement=parsePeriod(period[2]);
        final long startTime=begin.getTime();
        final long endTime=end.getTime();
        long time;
        int j=0;
        while ((time=j * millisIncrement + startTime) <= endTime) {
          final Calendar calendar=new GregorianCalendar(UTC_TZ);
          calendar.setTimeInMillis(time);
          addDate(result,calendar.getTime());
          j++;
          if (j >= MAX_ELEMENTS_TIMES_KVP) {
            if (LOGGER.isLoggable(Level.INFO))             LOGGER.info("Lmiting number of elements in this periodo to " + MAX_ELEMENTS_TIMES_KVP);
            break;
          }
        }
      }
 else       if (period.length == 2) {
        final Date begin=beginning(getFuzzyDate(period[0]));
        final Date end=end(getFuzzyDate(period[1]));
        addPeriod(result,new DateRange(begin,end));
      }
 else {
        throw new ParseException("Invalid time period: " + Arrays.toString(period),0);
      }
    }
  }
  return new ArrayList(result);
}
